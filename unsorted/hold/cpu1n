;
;CPU, MIMIC INTERFACE, NOVA/SUPPERNOVA, PAGE 1
;
	T==14		;TEMPORARY FOR TRAPS
;
;BREAK ROUTINES HAVE TWO FUNCTIONS:    SET UP A CONFIRMATION ADDRESS.
;  SET UP A BREAK MASK.
;
OBKPT:	SKIPA T,[XWD 010000,MMO]	;OBKPT
NBKPT:	MOVE T,[XWD 200000,MMN]	;NBKPT
	JRST BRK
RBKPT:	SKIPA T,[XWD 100000,MMR]	;RBKPT
WBKPT:	MOVE T,[XWD 040000,MMW]	;WBKPT
	JRST BRK
IBKPT:	SKIPA T,[XWD 020000,MMI]	;IBKPT
EBKPT:	MOVE T,[XWD 400000,MME]	;EBKPT
BRK:	HRRZM T,CMSGAD	;STORE MESSAGE ADDRESS.
	HRRI T,CPUUCB	;MASK IS IN 0-17, PUT UNIT IN 18-35
	MOVEM T,BRKBLK+BBRK	;AND STORE IN BRKBLK.
	MOVEM MA,BRKBLK+BFRM	;STORE FRAME# IN BRKBLK,
	ANDI MB,177777	;CUT MB TO 16 BITS.
	PUSHJ P,BRKCHK	;GO BREAK.
NULL:	POPJ P,
;
;TRAPS ARE DIRECT, "AUTOMATIC" BREAKS.  WE GO STRAIGHT TO THE BREAK
;TYPER WITH A CONFIRMATION ADDRESS AND A STRING POINTER.
;
INDTRP:	MOVEI T,MIND	;INDIRECT ADDR LOOP TRAP
	JRST TRAP
MEMTRP:	MOVE T,TRAPS	;MEMORY TRAP...GET MEM TRAP BIT.
	TLNN T,200000	;IS IT ON?
	POPJ P,	;NO.
	MOVEI T,MMEM	;YES, SET UP TRAP
	JRST TRAP
PHALT:	MOVEI T,MHLT	;HALT TRAP
	JRST TRAP
ILLTRP:	MOVEI T,MILL	;ILLEGAL TRAP
	JRST TRAP
WRUTRP:	TLZN XR3,400000	;FETCH PHASE TRAP SET... IS IT WRU?
	JRST STRAP	;NO, MUST BE SIN INSTR.
	MOVEM XR3,.FLAGS
	MOVEI T,MWRU	;WRU TRAP
	JRST TRAP
STRAP:	MOVEI T,MSIN	;SINGLE INSTRUCTION TRAP.
TRAP:	MOVEM T,CMSGAD	;STORE TRAP MESSAGE ADDR
	MOVEM PC,BRKBLK+BFRM	;STORE FRAME#,
	MOVEI T,CPUUCB	;SET UP UNIT (AND CLEAR BREAK MASK BITS).
	MOVEM T,BRKBLK+BUCB
	CLEARM ,BRKBLK+BACT	;CLEAR THE ACTION BITS.
	PUSHJ P,INTSTP	;GO HONOR BREAKPOINT.
	POPJ P,
;
;
	EXTERN ITIM
.TRDN:	SUB TM,ITIM+1	;COMPUTE TIME SINCE LAST TRDN.
	ADDM TM,ITIM	;ADD INTERVAL ONTO INTERVAL TIMER.
	ADDB TM,ITIM+1	;UPDATE LAST TRDN VARIABLE.
	MOVEI 14,STM	;SET UP XWD AC0,STM
	BLT 14,STM+12	;SAVE AC0-AC12.
	POPJ P,
;
.BLDUP:	HRLZI TM+12,STM	;SET UP XWD STM,AC0.
	BLT TM+12,TM+12	;RESTORE AC0-AC12.
	CAMGE TM,ITIM+1	;IF MAIN CLOCK HAS BEEN RESET,
	MOVEM TM,ITIM+1	;UPDATE LAST TRDN VARIABLE.
	POPJ P,
;
;NOVA/SUPERNOVA INTERFACE, PAGE 2
;
;CPURD AND CPUWR.  ROUTINES FOR CONSOLE I/O.
;
CPURD:	MOVE XR3,.UCBAD	;GET THE UNIT ADDRESS.
	MOVE MA,UFRM(XR3)	;GET THE FRAME TO BE READ.
	CAML MA,XCORE	;DOES IT EXIST?
	JRST STEOF	;NO.
	HRRZ MB,C(MA)	;GET THE WORD FROM CORE.
	MOVEM MB,UBUF(XR3)	;STORE WORD IN UNIT BUFFER.
	AOS ,(P)	;TAKE SKIP RETURN.
	POPJ P,
;
CPUWR:	MOVE XR3,.UCBAD	;GET THE UNIT ADDRESS.
	MOVE MA,UFRM(XR3)	;GET THE FRAME#.
	CAML MA,XCORE	;DOES IT EXIST?
	JRST STEOF	;NO.
	MOVE MB,UBUF(XR3)	;GET THE FRAME TO BE WRITTEN.
	HRRM MB,C(MA)	;STORE IT IN CORE.
	AOS ,(P)	;TAKE SKIP RETURN.
	POPJ P,
;
STEOF:	MOVSI XR2,EFRM	;NON-EXISTANT FRAME:  SET BIT IN
	IORM XR2,USTAT(XR3)	;UNIT STATUS.
	POPJ P,	;TAKE FAIL RETURN.
;
;.BRSET:	SET/CLEAR BKPTS IN NOVA MEMORY.
;THE BREAK BITS ARE IN THE LEFT HALF OF BRKBLK+BBRK.
;
BRSET:	MOVE MA,BRKBLK+BFRM	;GET THE CORE ADDRESS.
	CAML MA,XCORE	;DOES IT EXIST?
	POPJ P,	;NO.
	AOS ,(P)	;YES, SET UP SKIP RETURN.
	HLRZ XR3,BRKBLK+BBRK	;GET THE BREAK BITS.
	JUMPE XR3,.+2	;ACTIONS ARE ZERO... BREAKS?
	MOVSI XR3,400000	;EITHER... SET FLAG OF 1 IN BIT 0.
	HLLM XR3,C(MA)	;STORE BREAK BIT.
	POPJ P,	;EXIT.
;
;NOVA/SUPERNOVA INTERFACE, PAGE 3
;CPU RESET ROUTINE:
;CLEARS AC'S, CLEARS ION AND POWER FAILURE FLAGS.
;ALSO CLEARS CARRY.
;
CPURST:	CLEARM ,AC	;CLEAR ALL 4 AC'S.
	CLEARM ,AC+1
	CLEARM ,AC+2
	CLEARM ,AC+3
	CLEARM ,CARRY	;CLEAR CARRY.
	MOVSI XR1,400000	;CLEAR ION (CPU BSY)
	ANDCAM XR1,SBSY	;AND POWER FAILURE (CPU DONE)
	ANDCAM XR1,SDON
	POPJ P,
;
	INTERN ADDNOV
ADDNOV:	MOVE XR1,LOCTRM	;ADDRESS INTERPRETER... GET LOCAL
	MOVE MB,VALUE	;TERMINATOR AND WORD TO INTERPRET.
	CAIE XR1,2	;IS TERMINATOR @?
	POPJ P,	;NO, EXIT.
	CAIL MB,060000	;YES, IS INSTRUCTION MEM REF?
	JRST NOTREF	;NO, GIVE MESSAGE AND DIE.
	MOVE MA,MB	;GET THE WORD AND
	ANDI MA,377	;CUT TO 8 BIT DISPLACEMENT.
	LDB XR1,[POINT 2,MB,27]	;GET THE MODE.
	JUMPE XR1,APGZRO	;IF ZERO, THEN PAGE 0.
	TRNE MB,200	;IF NOT, EXTEND DISLACEMENT TO 16 BITS, SIGNED.
	IORI MA,177400
	ADD MA,@ARGTB-1(XR1)	;ADD ON PROPER REGISTER.
	ANDI MA,77777	;CUT TO 15 BITS.
APGZRO:	TRNN MB,2000	;INDIRECT?
	JRST NOINDT	;NO.
	SETZ XR1,	;ZERO LEVEL COUNTER.
AINDT:	CAML XR1,INDMAX	;INDIRECT ADDR LOOP OVERFLOW?
	JRST ADDXT	;YES, GIVE IT UP.
	CAML MA,XCORE	;YES, MA WITHIN CORE?
	TRZA MA,777777	;NO, READ A ZERO.
	HRRZ MA,C(MA)	;YES, GET MA WORD.
	TRZE MA,100000	;NEW INDIRECT LOOP.
	AOJA XR1,AINDT	;YES.
NOINDT:	MOVEM MA,FRMNUM	;STORE RESULT.
ADDXT:	AOS (P)	;TAKE SKIP RETURN.
	POPJ P,
;
ARGTB:	Z ,FRMNUM	;1= CURRENT LOC RELATIVE
	Z ,AC+2	;2=AC2 RELATIVE
	Z ,AC+3	;3=AC3 RELATIVE
;
NOTREF:	TTCALL 3,MNTREF	;NOT MEM REF, GIVE NASTY MESSAGE AND
	JRST ADDXT	;TAKE SUCCESS RETURN, SIMULATING LOCAL INPUT ERROR.
;
MNTREF:	ASCIZ /NO MEM ADDR
/
;
;NOVA/SUPERNOVA INTERFACE, PAGE 4
;
MME:	ASCIZ /E-BK AT /
MMN:	ASCIZ /N-BK AT /
MMR:	ASCIZ /R-BK AT /
MMW:	ASCIZ /W-BK AT /
MMI:	ASCIZ /I-BK AT /
MMO:	ASCIZ /O-BK AT /
MHLT:	ASCIZ /HALT AT /
MILL:	ASCIZ /ILL INST AT /
MSIN:	ASCIZ /SIN INST AT /
MWRU:	ASCIZ /WRU AT /
MMEM:	ASCIZ /ILL MEM AT /
MIND:	ASCIZ /IND ADDR LOOP AT /
;
;NOVA FAMILY INTERFACE, PAGE 5
;STANDARD BINARY ABSOLUTE LOADER.
;
	WD==AR
	ADDR==MA
	WC==MB
	DSUM==RTN
	FRM==PC
;
	EXTERN LDRFLG
LOADR:	SKIPE ,LDRFLG	;IS THE LDR FLAG ZERO?
	JRST HENNESS	;NO, GO TO SPECIAL LOADER FOR HENNESS ASSEMBLER.
	PUSHJ P,RDFRME	;START OF BLOCK... GET A FRAME
	JRST GDEXIT	;NO INPUT, EOF.  LOAD OK.
	JUMPE FRM,LOADR	;IS FRAME ZERO?  YES, IGNORE
;
	CLEAR DSUM,	;NO, CLEAR BLOCK SUM.
	PUSHJ P,GTWORD	;FORM A WORD FROM CURRENT FRAME+NEXT.
	JRST GDEXIT	;EOF, LEAVE.
	TRNE WD,100000	;EXTEND 16-BIT SIGNED WORD-COUNT TO
	IORI WD,700000	;18-BITS, THEN
	HRRE WC,WD	;TO 36 BITS.
	PUSHJ P,RDWORD	;GET NEXT WORD.
	POPJ P,	;EOF-- BOMB.
	HRRZ ADDR,WD	;STORE AS ORIGIN.
	PUSHJ P,RDWORD	;GET NEXT WORD. "RDWORD" ADDS IT INTO BLOCK SUM.
	POPJ P,
	JUMPG WC,SPECIAL	;IF WC>0, SPECIAL BLOCK.
	JUMPE WC,CHKSUM	;IF WC=0, NO LOADING, GO DO CHECKSUM.
;
	CAMGE WC,[-20]	;IF WC>-20, THEN SMALL BLOCK.
	AOJA WC,LGBLK	;OTHERWISE, LARGE BLOCK.
SMLP:	PUSHJ P,RDWORD	;SMALL BLOCK... GET DATA  WORD.
	POPJ P,	;BOMB ON EOF.
	CAML ADDR,XCORE	;IS CURRENT LOADER ORIGIN LEGAL?
	POPJ P,	;NO, BOMB.
	HRRM WD,C(ADDR)	;STORE WORD IN CORE.
	ADDI ADDR,1	;INCREMENT ADDRESS AND WORD COUNT.
	AOJN WC,SMLP	;IF NOT ZERO, CONTINUE.
	JRST CHKSUM	;GO CHECK CHECKSUM.
;
LGBLK:	PUSHJ P,RDWORD	;LARGE BLOCK... GET WORD.
	POPJ P,
LGLP:	CAML ADDR,XCORE	;IS CURRENT LOADER ORIGIN LEGAL?
	POPJ P,	;NO, BOMB.
	HRRM WD,C(ADDR)	;STORE WORD IN CORE.
	ADDI ADDR,1	;INCREMENT ORIGIN+WC.
	AOJN WC,LGLP	;IF NOT ZERO, CONTINUE STORING.
CHKSUM:	TRNE DSUM,177777	;BLOCK SUM ZERO?
	POPJ P,	;NO, BOMB.
	JRST LOADR	;YES, GO TO NEW BLOCK.
;
SPECIAL:	SOJG WC,ERRBLK	;SPECIAL.  WC=1? NO, ERROR.
	DPB ADDR,CPUPC+RPTR	;YES, STORE ADDRESS AS PC VALUE.
	JRST CHKSUM	;GO CHECKSUM BLOCK.
;
ERRBLK:	PUSHJ P,RDFRME	;ERROR BLOCK... SKIP DOWN TO RUBOUT.
	JRST GDEXIT	;IF ERROR BLOCK ENDS EARLY, OK.
	CAIE FRM,377
	JRST ERRBLK
	JRST LOADR	;GO GET NEXT BLOCK.
;
RDFRME:	PUSHJ P,.READ	;GET A FRAME FROM CIO.
	POPJ P,	;EOF.
	MOVE FRM,LDRUCB+UBUF
	AOS ,LDRUCB+UFRM	;GET FRAME JUST READ, INCREMENT FRAME COUNT.
GDEXIT:	AOS ,(P)
	POPJ P,
;
RDWORD:	PUSHJ P,RDFRME
	POPJ P,
GTWORD:	MOVE WD,FRM
	PUSHJ P,RDFRME
	POPJ P,
	DPB FRM,[POINT 8,WD,27]
	ADD DSUM,WD
	JRST GDEXIT

;NOVA FAMILY INTERFACE, PAGE 6
;HENNESS FORMAT LOADER FOR NOVA/SUPERNOVA.
;
	LDRBUF=LDRUCB+UBUF
	LDRADR=MA
	LDRDAT=MB
;
;
LDADDR:	HRRZM XR2,LDRADR	;STORE ADDRESS.
HENNES:	PUSHJ P,RDFRM	;GET INPUT FRAME FROM CIO.
	JRST ,@LDRTAB(XR1)	;JUMP TABLE WITH CONTROL BITZ.
;
LDRTAB:	LDDATA	;CONTTOL=0, DATA.
	HENNES
	LDADDR	;CONTROL=2, ADDRESS.
	REPEAT 5,<	HENNES>
	LDSTRT
	LDSTRT	;CONTROL 10-11, START
	REPEAT 5,<	HENNES>
;
RDFRM:	PUSHJ P,.READ	;IN CIO WE TRUST.
	POP P,XR1	;SET UP STACK SO THAT POPJ WILL CAUSE FAIL
		;RETURN FROM LOADER.
	AOS ,LDRUCB+UFRM	;BUMP FRAME COUNT
	LDB XR1,[POINT 4,LDRBUF,^D35]
	LDB XR2,[POINT ^D16,LDRBUF,^D31]
	POPJ P,		;ISOLATE CONTROL AND DATA.
;
LDDATA:	CAML LDRADR,XCORE	;DATA... IS ORIGIN LEGAL?
	POPJ P,	;NO.
	HRRM XR2,C(LDRADR)	;YES, STORE DATA.
	AOJA LDRADR,HENNES	;INCREMENT ORIGIN, GET NEXT BLOCK.
;
LDSTRT:	DPB XR2,CPUPC+RPTR	;END... STORE STARTING ADDRESS.
	AOS ,(P)	;SET UP SKIP EXIT
	POPJ P,		;EXIT WITH START ADDR IN PC.
;

	END
