	SALL
	TITLE VM11CM	PDP-11 COMMUNICATIONS REGION
	INTERN CDMLST,PERBNK,ADRTBL,RDTBL,WRTBL,HMASK,HADD
	INTERN BR7TBL,BR6TBL,BR4TBL,BR5TBL,WRBTBL
	INTERN BR3TBL,BR2TBL,BR1TBL
	EXTERN PDP11S
;
;THE COMMUNICATIONS REGION CONSISTS OF SEVERAL CONDITIONAL TABLES:
;1) CDMLST:	LIST OF ALL CONFIGURED CONTROLLERS
;2) ADRTBL:	LIST OF ALL LEGAL DEVICE ADDRESSES (HASHED)
;3) PERBNK:	CONTENTS OF DEVICE ADDRESSES
;4) RDTBL:	READ INSTRUCTIONS FOR DEVICES
;5) WRTBL:	WRITE INSTRUCTIONS FOR DEVICES
;6) WRBTBL:	WRITE BYTE INSTRUCTIONS FOR DEVICES
;7)-10) BR7TBL,...,BR1TBL:	INTERRUPT VECTOR TABLES
;
;A NOTE ON MODEL NUMBERS.  THE 11/05, 11/20, 11/40, AND 11/45
;ARE REPRESENTED BY MODEL NUMBERS OF 5, 20, 40, AND 45 RESPECTIVELY.
;THE 11/20 WITH KS-11 IS ASSIGNED AN INTERNAL MODEL NUMBER OF 44.
;

;A NOTE TO ANYONE MODIFYING THIS MODULE
;DO NOT USE LITERALS. THE LITERAL POOL WILL END UP IN HYPERSPACE
;BECAUSE OF EXTENSIVE RELOC'ING.
;(PRESUMABLY A JUDICIOUSLY PLACED LIT STATEMENT COULD FIX THAT, BUT
;WHY NOT BE EXPLICIT?)

	DEFINE DFT(F,S)	;DEFINE DEFAULT STATE OF FLAG
<IFNDEF F,<	F=S>>

	DEFINE CD(F,S)	;CONDITIONAL DDM ENTRY
<IFN F,<	EXTERN S
	S>>

;DEFINE DEFAULT STATE OF CONDITIONAL ASSEMBLY FLAGS:

	DFT PTR,0	;ALL DEVICES ARE OUT EXCEPT CPU, 1ST KL.
	DFT PTP,0
	DFT CLK,0
	DFT PK,0
	DFT EAE,0
	DFT RF,0
	DFT RK,0
	DFT RP,0
	DFT RC,0
	DFT CPU,^D8
	DFT MODEL,^D20
	DFT PACKED,0	;DEFAULT IS 8KB, PDP-11/20, UNPACKED CORE
	DFT TC,0
	DFT DM,0
	DFT KL,1
IFGE KL-1,<
	TTI==	1	;CONDITIONAL FLAGS FOR 1ST KL
	TTO==	1
>
	DFT KBN,0
	DFT MBR,0
	DFT AD,0
	DFT SEG,0
	DFT FPP,0
	DFT STKL,0
	DFT EIS,0

	UDV=KBN
IFNDEF DMVCTR,<	DMVCTR=310>
IFNDEF KLVCTR,<	KLVCTR=300>	;FLOATING VECTOR ARITHMETIC
IFG <KL-1>,<	DMVCTR=10*<KL-1>+KLVCTR>
;
;PDP-11 COMMUNICATIONS REGION, PAGE 2.
;CDM LIST.
;
	DEFINE CKLD(N)	;DEFINE KL-11 DDM LINKS
<IFGE KL-^D'N,<	EXTERN TTI'N'DDM,TTO'N'DDM
	Z ,TTI'N'DDM
	Z ,TTO'N'DDM
>
>

CDMLST:	CD CPU,CPUDDM	;CPU, 1ST KL ARE STANDARD.
	CD TTI,TTIDDM
	CD TTO,TTODDM
	CD PTR,PTRDDM
	CD PTP,PTPDDM
	CD CLK,CLKDDM
	CD PK,PKDDM
	CD EAE,EAEDDM
	CD RF,RFDDM
	CD RP,RPDDM
	CD RC,RCDDM
	CD RK,RKDDM
	CD TC,DTDDM
	CD DM,DMDDM
	CKLD 2;	;TELETYPES 2-8
	CKLD 3
	CKLD 4
	CKLD 5
	CKLD 6
	CKLD 7
	CKLD 8
	CD KBN,KBNDDM
	CD MBR,MBRDDM
	CD AD,ADDDM
	Z
;
;VECTOR TABLES.
;
BR7TBL:	REPEAT PV7,<0>
BR6TBL:	REPEAT PV6,<0>
BR5TBL:	REPEAT PV5,<0>
BR4TBL:	REPEAT PV4,<0>
BR3TBL:	REPEAT PV3,<0>
BR2TBL:	REPEAT PV2,<0>
BR1TBL:	REPEAT PV1,<0>

	DEFINE CV(NM,L,V)	;DEFINE VECTOR TABLE ENTRY.
<	RELOC BR'L'TBL+NM'PV
	XWD 0,V
>
;
;WE'LL DO THESE LAST, SINCE THEY DESTROY THE LOCATION COUNTER.
;
;
;PDP-11 COMMUNICATIONS REGION, PAGE 3
;DEVICE ADDRESS TABLES.  THE DEVICE TABLES ARE HASH-CODED,
;AND WE HAVE SOME FAIRLY HAIRY MACROS TO DO THE ENCODEMENT.
;THE SECRET OF THE PROCESS LIES IN THE "PROBE RECORD VARIABLES"
;PRB0,...,PRB'N', WHICH FOR EACH TABLE LOCATION  RECORDS
;WHETHER THE LOCATION IS ALREADY IN USE.

	DEFINE CLRP(I)	;CLEAR PROBE I
<	PRB'I=0>

	DEFINE SETP(I)	;SET PROBE I
<	PRB'I=1>

	DEFINE TSTP(I)	;TEST PROBE I
<	FLAG=PRB'I>

;AS THE FIRST STEP, WE CLEAR ALL THE PROBE VARIABLES:

	HSIZE=^D128	;TABLE SIZE
IFE MODEL-^D45, <HSIZE=^D256>
	HCONT=^D27	;OFFSET CONSTANT

	FLAG=0
	REPEAT HSIZE,<	CLRP(\FLAG)
	FLAG=FLAG+1>

;NOW DEFINE THE TABLES THEMSELVES, ALL INITIALLY EMPTY:

HMASK:	HSIZE-1	;TABLE SIZE MUST BE A POWER OF 2
HADD:	HCONT
ADRTBL:
	XLIST
	REPEAT HSIZE,<	Z>	;ADDRESS TABLE
	LIST
PERBNK:
	XLIST
	REPEAT HSIZE,<	Z>	;CONTENTS
	LIST
RDTBL:
	XLIST
	REPEAT HSIZE,<	Z>	;READ INSTRUCTION
	LIST
WRTBL:
	XLIST
	REPEAT HSIZE,<	Z>	;WRITE INSTRUCTION
	LIST
WRBTBL:
	XLIST
	REPEAT HSIZE,<	Z>	;WRITE BYTE INSTRUCTION
	LIST

;A MACRO TO CONDITIONALLY ASSEMBLE 40 VS 45 STUFF

	DEFINE MOD40 (X)
<IFE MODEL-^D40,
<X>
>

	DEFINE MOD45 (X)
<IFE MODEL-^D45,
<X>
>

IFGE MODEL-^D40,<
;DEFINE ALL APRTBL ENTRIES FOR /40 AND /45
;THE APRTBL IS HERE TO AVOID A LOT OF INTERNS AND EXTERNS

;FIRST A MACRO THAT WILL DEFINE IT

	DEFINE TABLE(STATE,SPACE,SEG)
<	IRPC STATE
<	 IRPC SPACE
<	  IRPC SEG
<STATE'SPACE'APR'SEG::	0
>
>
>
>

	INTERN APRTBL	;KT11C/D CODE IN CPU3 IS NOT CONDITIONALLY ASSEMBLED

APRTBL:
IFN SEG, <TABLE KSXU,ID,01234567>

;CONDITIONAL EXTRACTORS FOR FPP

IFN FPP,<

MOD45 <	EXTERN	FPP45>
MOD40 <	EXTERN	FPP40>
>

;BUS ROUTINES FOR 11/40 AND 11/45

;STACK LIMIT

MOD45 <STKL==1>

IFN STKL, <	EXTERN	STKLIM
WRTSLR:	ANDI	MB,177400	;EVEN BYTE IS ALWAYS ZERO
	HRRM	MB,STKLIM
	POPJ	S,


WRBSLR:	JUMPGE	MA,.+2	;IF EVEN BYTE, DO NOTHING
	DPB	MB,ODDSTL
	POPJ	S,

ODDSTL:	POINT	8,STKLIM,27
>;END OF STKL CONDITIONAL


;PROGRAM INTERRUPT REQUEST


MOD45 <
	EXTERN CLRQST,LVLARY

WRBPIR:	JUMPGE	MA,PIRDON	;IGNORE EVEN BYTE
	LSH	MB,^D8		;GET ODD BYTE INTO POSITION
WRTPIR:	MOVEI	TMP2,7		;SEVEN LEVELS TO CHECK
NXTPIR:	SKIPL	,LVLARY-1(TMP2)	;PIR OUTSTANDING AT NEXT HIGHER LEVEL?
	JRST	,CNTPIR		;NO, GO ON TO NEXT
	MOVSI	TMP1,400000	;YES, CLEAR IT
	ANDCAB	TMP1,LVLARY-1(TMP2)	;NO OTHER LEVEL CAN BE SET
	JUMPN	TMP1,CNTPIR+1	;ANY OTHER REQUESTS AT THIS LEVEL?
	 TDZA	PS,CLRQST(TMP2)	;NO, CLEAR THE LEVEL SUMMARY BIT
CNTPIR:	SOJG	TMP2,NXTPIR
	ANDI	MB,177000	;EVEN BYTE IS READ ONLY, BIT 8 IS NONEXIXTENT
	JFFO	MB,.+2		;LOCATE HIGHEST REQUEST
	JRST	,PIRDON-1	;NONE, NO MORE TO DO
	IOR	MB,PIRTBL-^D20(MB+1)	;SET PIA IN MB<7:5,3:1>
	MOVSI	TMP2,400000	;PIRQ IS HIGHEST REGEST AT LEVEL
	IORM	TMP2,LVLARY-^D20(MB+1)	;SET REQUEST BIT
	IOR	PS,CLRQST-^D19(MB+1)	;SET APPROPRIATE LEVEL SUMMARY BIT
	HRRM	MB,PIRQ		;STORE NEW PIRQ
PIRDON:	POPJ	S,

PIRTBL:	356	;7
	314	;6
	252	;5
	210	;4
	146	;3
	104	;2
	42	;1
>



;PROCESSOR STATUS

	EXTERN UNDTRP

WRTPS:
MOD45<	ANDCMI	MB,TBIT+PS1008>	;EXPLICIT REF CANNOT SET T; PS<10:8>
MOD40<	ANDCMI	MB,TBIT+PS1108>	;ON /45, PS<11:8> ON /40 DO NOT EXIST
	HRR	PS,MB		;STORE PS
	TRNN	PS,PS15		;CHECK FOR ILLEGAL STATE WHIC IS 10
	 POPJ	S,		;PS<15> 0, MUST BE OK
	TRNN	PS,PS14		;PS<15> 1, PS<14> MUST BE 1
	 PUSHJ	S,UNDTRP	;NO, TRAP TO MIMIC USER
	POPJ	S,

WRBPS:	JUMPL	MA,PSODDB	;WHICH BYTE?
	ANDCMI	MB,TBIT		;EVEN, CAN'T SET T
	DPB	MB,PSEVEN	;STORE IT
	POPJ	S,

PSODDB:
MOD45<	ANDCMI	MB,7>	;ODD, PS<10:8> DO NOT EXIST ON /45
MOD40<	ANDCMI	MB,17>	;PS<11:8> DO NOT EXIST ON /40
	DPB	MB,PSODD
	TRNN	PS,PS15		;JUST LIKE ABOVE
	 POPJ	S,
	TRNN	PS,PS14
	 PUSHJ	S,UNDTRP
	POPJ	S,

PSEVEN:	POINT 8,PS,35
PSODD:	POINT 8,PS,27

;KT11C/D

IFN SEG,<

WRBPAR:	JUMPGE	MA,.+3		;WHICH BYTE?
	DPB	MB,PARODD	;ODD
	JRST	,WRTPAR-1
	DPB	MB,PAREVN	;EVEN
	HLRZ	MB,@PERBNK(XMA)	;GET THE PAR BACK
WRTPAR:	ANDI	MB,7777		;PAR<15:12> NONEXISTENT
	HRL	MB,@PERBNK(XMA)	;GET POINTED AT PDR
	TLZ	MB,ABIT+PWBIT	;CLEAR A AND W BITS - PAR AND PDR ARE SWAPPED
	MOVSM	MB,@PERBNK(XMA)	;GIVE BACK PROPERLY
	POPJ	S,

WRBPDR:	JUMPGE	MA,.+3
	DPB	MB,PDRODD
	JRST	,WRTPDR-1
	DPB	MB,PDREVN
	HRRZ	MB,@PERBNK(XMA)
WRTPDR:
MOD45 <	ANDI	MB,77417	;PDR<15,5:4> NONEXISTENT, PDR<7:6> CLEARED BY WRITE
>
MOD40 <	ANDI	MB,77416	;PDR<15,5:4,1> NONEXISTENT
>
	HRRM	MB,@PERBNK(XMA)
	POPJ	S,

PAREVN:	POINT 8,@PERBNK(XMA),17
PARODD:	POINT 8,@PERBNK(XMA),9
PDREVN:	POINT 8,@PERBNK(XMA),35
PDRODD:	POINT 8,@PERBNK(XMA),27


;JUST AS WITH APRTBL, THE KT11C STATUS REGISTERS ARE NOT IN PERBNK
;SINCE THE KT11C CODE IN CPU3 IS NOT CONDITIONALLY ASSEMBLED,
;THE SR'S MUST EXIST SOMEWHERE TO KEEP THE LOADER HAPPY
;HOWEVER, IF THE KT11C IS NOT 'CONFIGURED', THE BUS ADDRESSES MUST NOT
;RESPOND.

	EXTERN SR0, SR1, SR2, SR3

WRBSR0:	JUMPL	MA,.+3
	DPB	MB,SR0EVN
	POPJ	S,
MOD45 <	ANDI	MB,373		;IN ODD BYTE, BIT 10 CANNOT BE SET
	DPB	MB,SR0ODD
	POPJ	S,
>
MOD40 <	ANDI	MB,341		;CLEAR READONLY BITS
	DPB	MB,SR0ODD	;STORE ODD BYYE
TRKINT:	MOVE	MB,SR0		;GET ALL OF SR0
	TRNE	MB,1		;KT11D ON?
	TRNE	MB,QABORT	;ABORT FLAGS NOW CLEAR?
	 POPJ	S,		;NO, STILL LOCKED UP
	ANDCMI	MB,SR0TRK	;YES, CLEAR TRACKED BITS
	HRLZI	STATE,(PS)	;FIGURE OUT ACCESS STATE
	ROT	STATE,4		;IN CASE KT11-D JUST GOT TURNED ON
	TRNE	MAF,QPRV
	 ROT	STATE,2
	ANDI	STATE,3	;MASK APPROPRIATE STATE
	LSH	STATE,5		;SHIFT INTO POSITION
	IORI	STATE,16	;ACCESS MUST ALWAYS BE TO PAGE 7
	IORI	MB,(STATE)	;TRACK
	MOVEM	MB,SR0		;GIVE BACK
	POPJ	S,		;ALL DONE
>

SR0EVN:	POINT 1,SR0,35	;IN EVEN BYTE, ONLY BIT 0 CAN BE SET
SR0ODD:	POINT 8,SR0,27

WRTSR0:
MOD45 <	MOVEI	T1,175401>
MOD40 <	MOVEI	T1,160401>
	ANDCAM	T1,SR0
MOD45 <	ANDI	MB,175401	;SR0<10,7:1> ARE READ ONLY>
MOD40 <	ANDI	MB,160401	;SR0<12:9,7:1> ARE READ ONLY>
	IORM	MB,SR0
MOD40 <	JRST	,TRKINT		;CHECK FOR POSSIBLE TRACKING>
	POPJ	S,



MOD45 <
WRBSR3:	JUMPL	MA,.+3
WRTSR3:	ANDI	MB,7
	HRRZM	MB,SR3
	POPJ	S,
>


>;END OF SEG CONDITIONAL
>;END OF 11/45 CONDITIONAL



;PDP-11 COMMUNICATIONS REGION, PAGE 3A
;SUPPLEMENTARY BUS ROUTINES.
;
IFN EAE,<
READSC:	HRR MB,SCX	;READ SC WITHOUT SR, PRESERVING MB.
	TRZ MB,777400
	POPJ P,
>
IFN RF,<
PTCMA:	TRZ MB,600001	;RF11 CMA-- BIT 0 DOES NOT EXIST
	DPB MB,CMAPTR	;STORE MB AS NEW RFCMA
	POPJ P,
;
RDDAR:	HRR MB,RFUCB+UFRM	;READ RF11 DAR PRESERVING MB LEFT.
	TRZ MB,600000
	POPJ P,
CMAPTR:	POINT 16,RFCMA,35
PTDAR:	POINT 16,RFUCB+UFRM,35
>	;MUST GO HERE BECAUSE SUBSEQUENT CODE DESTROYS
	;ASSEMBLER ORIGIN.
IFN RK,<
RKBABP:	POINT 16,RKBA,35
>
	INTERN BSEVAL
BSEVAL:	Z

;THE FOLLOWING PSEUDO-OPERATIONS ARE FOR USE WITH THE DATOB
;(WRBTBL) LINE OF THE SIMULATED UNIBUS

NOP=JFCL 0,0	;NO STORE
RDZRO=HRRI MB,0	;READ ZERO
ODDNOP=PUSHJ P,IGNODD	;IGNORE DATOB TO ODD BYTE
BNRML=PUSHJ P,BSNRML	;STORE BYTE IN NORMAL FASHION

IGNODD:	JUMPGE MA,@WRTBL(XMA)	;IGNORE ODD BYTE.  IF EVEN BYTE,
		;BRANCH TO DATO PROCESSOR, WHICH IS ASSUMED TO
		;HAVE BEEN CALLED BY A PUSHJ.
	POPJ P,	;OTHERWISE, RETURN, NO STORE.

BSNRML:	JUMPGE MA,.+3	;A "NORMAL" REGISTER HAS ITS LOCATION IN
	DPB MB,ODDBYT	;PERBNK AND HENCE CAN
	POPJ P,		;BE STORED INTO DIRECTLY
WRTEVN:	DPB MB,EVNBYT	;BY THIS ROUTINE.
	POPJ P,

ODDBYT:	POINT 8,PERBNK(XMA),27
EVNBYT:	POINT 8,PERBNK(XMA),35
;
;PDP-11 COMMUNICATIONS REGION, PAGE 4
;ACTUAL HASH ENCODEMENT MACROS:

	DEFINE HASH(I)	;HASH AN ADDRESS
<	LADDR=<I>!600000
	TORG=<<I>/2>&<HSIZE-1>
	PROBE TORG>

	DEFINE PROBE(I)
<	TSTP(\I)
IFE FLAG,<	SETP(\I)>
IFN FLAG,<	I=<I+HCONT>&<HSIZE-1>
	PROBE(I)>
>

	DEFINE DV(NM,CON,R,W,WB)
<	RELOC ADRTBL+TORG
	LADDR/2
	RELOC PERBNK+TORG
IFNDEF NM,<	INTERN NM
NM:>
	CON
	RELOC RDTBL+TORG
	R
	RELOC WRTBL+TORG
	W
	RELOC WRBTBL+TORG
IFB <WB>,<	CAIA>
IFNB <WB>,<	WB>
>


;ACTUAL DEVICE OVERLAYS, AT LAST!

IFN PTR,<	EXTERN PRBRD,PRSWR
	HASH 177550
	DV PRS,100000,NOP,<PUSHJ P,PRSWR>
	HASH 177552
	DV PRB,0,<PUSHJ P,PRBRD>,NOP,NOP
>

IFN PTP,<	EXTERN PPSWR,PPBWR
	HASH 177554
	DV PPS,100200,NOP,<PUSHJ P,PPSWR>
	HASH 177556
	DV PPB,0,NOP,<PUSHJ P,PPBWR>,ODDNOP
>

IFN TTI,<	EXTERN TKS,TKSWR,TKBRD
	HASH 177560
	DV P,0,<HRR MB,TKS>,<PUSHJ P,TKSWR>
	HASH 177562
	DV TKB,0,<PUSHJ P,TKBRD>,NOP,NOP
>

IFN TTO,<	EXTERN TPS,TPSWR,TPBWR
	HASH 177564
	DV P,0,<HRR MB,TPS>,<PUSHJ P,TPSWR>
	HASH 177566
	DV TPB,0,NOP,<PUSHJ P,TPBWR>,ODDNOP
>

IFN CPU,<
	HASH 177570
	DV SR,0,NOP,NOP,NOP
IFE MODEL-05,<	EXTERN CPU5,STPS
	HASH 177776
	DV PS,PS,<HRR MB,PS>,<PUSHJ P,STPS>,ODDNOP
	>
IFE MODEL-^D20,<	EXTERN STPSD,STPS,CPU20
	HASH 177776
	DV PS,PS,<HRR MB,PS>,<PUSHJ P,STPS>,<PUSHJ P,STPSD>
	>
>

IFE MODEL-^D44,<	EXTERN KSRWRD,KSRWWR	;KS-11 REGS
	HASH 177600
	DV KSS,0,NOP,NOP,NOP
	HASH 177602
	DV KSPL,0,NOP,<HRRM MB,KSPL>,BNRML
	HASH 177604
	DV KSRL,0,NOP,<HRRM MB,KSRL>,BNRML
	HASH 177606
	DV KSPH,0,NOP,<HRRM MB,KSPH>,BNRML
	HASH 177610
	DV KSRH,0,NOP,<HRRM MB,KSRH>,BNRML
	HASH 177612
	DV KSPC,0,NOP,<HRRM MB,KSPC>,BNRML
	HASH 177614
	DV KSAD,0,NOP,<HRRM MB,KSAD>,BNRML
	HASH 177616
	DV KSRW,0,<PUSHJ P,KSRWRD>,<PUSHJ P,KSRWWR>
>



IFGE MODEL-^D40,<
MOD45 <	EXTERN CPU45>
MOD40 <	EXTERN CPU40>
MOD45 <	HASH 777770
	DV UBRK,0,NOP,<PUSHJ S,WRTEVN>,ODDNOP

	HASH 777772
	DV PIRQ,0,NOP,<PUSHJ S,WRTPIR>,<PUSHJ S,WRBPIR>

>

IFN STKL, <	HASH 777774
	DV STKLIM,0,<HRR MB,STKLIM>,<PUSHJ S,WRTSLR>,<PUSHJ S,WRBSLR>
>

	HASH 777776
	DV PS,0,<HRR MB,PS>,<PUSHJ S,WRTPS>,<PUSHJ S,WRBPS>

IFN SEG,<

	HASH 777572
	DV SR0,0,<HRR MB,SR0>,<PUSHJ S,WRTSR0>,<PUSHJ S,WRBSR0>

	HASH 777574
MOD45 <	DV SR1,0,<HRR MB,SR1>,NOP,NOP>
MOD40 <	DV SR1,0,RDZRO,NOP,NOP>

	HASH 777576
	DV SR2,0,<HRR MB,SR2>,NOP,NOP

MOD45 <	HASH 772516
	DV SR3,0,<HRR MB,SR3>,<PUSHJ S,WRTSR3>,<PUSHJ S,WRBSR3>
>

;THE FOLLOWING GRUESOME SPECIAL VERSION OF THE DV MACRO ESTABLISHES
;THE MAPPING FROM THE SCATTERED BUS ADDRESSES OF THE
;KT11C REGISTERS TO THE ORDERED APR TABLE ABOVE.
;THE PERBNK ENTRIES ARE USED TO POINT TO THE APRTBL ENTRIES
;SO THAT ONLY TWO ROUTINES ARE NECESSARY TO WRITE A PDR OR PAR

;M CAN BE K, S, OR U
;X CAN BE I OR D
;R CAN BE PAR OR PDR
;P IS A NUMBER FROM 0 TO 7
;A IS THE BUS ADDRESS

	DEFINE SRG(M,X,R,P,A)

<	HASH A			;;HASH THE REGISTER ADDRESS
	RELOC ADRTBL+TORG	;;GO TO POSITION IN ADDRESS TABLE
	LADDR/2			;;LEAVE SEARCH ADDRESS THERE

	RELOC PERBNK+TORG	;;GO TO CONTENTS TABLE
	M'X'APR'P		;;LEAVE POINTER TO APRTBL ENTRY

	RELOC RDTBL+TORG	;;GO TO READ INSTRUCTION TABLE
IFIDN <R> <PAR> , <HLR MB,M'X'APR'P>	;;PAR'S ARE IN LEFT HALF
IFIDN <R> <PDR> , <HRR MB,M'X'APR'P>	;;PDR'S ARE IN RIGHT HALF

	RELOC WRTBL+TORG	;;GO TO WRITE INSTRUCTION TABLE
	PUSHJ S,WRT'R		;;WRITE HAS SIDE EFFECTS

	RELOC WRBTBL+TORG	;;FINALLY DATOB TABLE
	PUSHJ S,WRB'R
>;END OF SRG DEFINITION

;NOW ANOTHER MACRO THAT WILL DEFINE ALL THE PAR'S AND PDR'S
;FOR A GIVEN STATE

	DEFINE SRSET(M,BASE)

<PN=0
REPEAT 10,<SRG(M,I,PDR,\PN,BASE+2*PN)
PN=PN+1>
PN=0
MOD45 <
REPEAT 10,<SRG(M,D,PDR,\PN,BASE+20+2*PN)
PN=PN+1>
>
PN=0
REPEAT 10,<SRG(M,I,PAR,\PN,BASE+40+2*PN)
PN=PN+1>
PN=0
MOD45 <
REPEAT 10,<SRG(M,D,PAR,\PN,BASE+60+2*PN)
PN=PN+1>
>
>;END OF SRSET DEFINITION

;NOW AT LAST DO IT

MOD45 <	SRSET (S,772200)>
	SRSET (K,772300)
	SRSET (U,777600)

;ARGHHHHHHH...

>;END OF SEG CONDITIONAL
>;END OF 11/45 CONDITIONAL
IFN CLK,<	EXTERN LKSWR
	HASH 177546
	DV LKS,000200,NOP,<PUSHJ P,LKSWR>
>

IFN RF,<	EXTERN RFDAER, RFDAEW, RFADSR, RFSW, RFUCB
	HASH	177460
	DV	RFS,000200,<NOP>,<PUSHJ P,RFSW>
	HASH	177462
	DV RFWC,0,<NOP>,<HRRM MB,RFWC>,BNRML
	HASH	177464
	DV RFCMA,0,<TRZ MB,600001>,<PUSHJ P,PTCMA>
	HASH	177466
	DV RFDAR,0,<PUSHJ P,RDDAR>,<DPB MB,PTDAR>
	HASH	177470
	DV	RFDAE,0,<PUSHJ P,RFDAER>,<PUSHJ P,RFDAEW>
	HASH	177472
	DV RFDBR,0,<HRR MB,RFUCB+UBUF>,<HRRM MB,RFUCB+UBUF>
	HASH	177474
	DV	RFMAR,0,<NOP>,<NOP>,<NOP>
	HASH	177476
	DV	RFADS,0,<PUSHJ P,RFADSR>,<NOP>,<NOP>
>	;END OF RF DEFINITIONS

IFN RK,<EXTERN	RKDSRD,RKCSRD,RKCSWR
	EXTERN	RKDAWR,RKDBRD
	HASH	177400
	DV	RKDS,0,<PUSHJ P,RKDSRD>,NOP,NOP
	HASH	177402
	DV	RKER,0,NOP,NOP,NOP
	HASH	177404
	DV	RKCS,200,<PUSHJ P,RKCSRD>,<PUSHJ P,RKCSWR>
	HASH	177406
	DV	RKWC,0,NOP,<HRRM MB,RKWC>
	HASH	177410
	DV	RKBA,0,NOP,<DPB MB,RKBABP>
	HASH	177412
	DV	RKDA,0,NOP,<PUSHJ P,RKDAWR>
	HASH	177414
	DV	RKMR,0,NOP,NOP,NOP
	HASH	177416
	DV	RKDB,0,<PUSHJ P,RKDBRD>,NOP,NOP
>	;END OF RK DEFINITIONS.

IFN RP,<EXTERN RPDSRD,RPDSWR,RPCSRD,RPCSWR,RPCARD,RPCAWR
	EXTERN RPWCWR,RPDARD,RPDAWR
	HASH 176710
	DV RPDS,0,<PUSHJ P,RPDSRD>,<PUSHJ P,RPDSWR>
	HASH 176712
	DV RPER,0,NOP,NOP,NOP
	HASH 176714
	DV RPCS,200,<PUSHJ P,RPCSRD>,<PUSHJ P,RPCSWR>
	HASH 176716
	DV RPWC,0,NOP,<PUSHJ P,RPWCWR>
	HASH 176720
	DV RPBA,0,NOP,<HRRM MB,RPBA>,BNRML
	HASH 176722
	DV RPCA,0,<PUSHJ P,RPCARD>,<PUSHJ P,RPCAWR>
	HASH 176724
	DV RPDA,0,<PUSHJ P,RPDARD>,<PUSHJ P,RPDAWR>
	HASH 176726
	DV RPM1,0,NOP,NOP,NOP
	HASH 176730
	DV RPM2,0,NOP,NOP,NOP
	HASH 176732
	DV RPM3,0,NOP,NOP,NOP
	HASH 176734
	DV RPB1,0,NOP,NOP,NOP
	HASH 176736
	DV RPB2,0,NOP,NOP,NOP
	HASH 176740
	DV RPB3,0,NOP,NOP,NOP
>	;END OF RP DEFINITIONS

	DEFINE HSHK(N)	;EXTERNAL PAGE LINKS FOR TELETYPE N
<IFGE KL-^D'N,<	EXTERN TK'N'S,TP'N'S,TK'N'SWR
	EXTERN TP'N'SWR,TK'N'BRD,TP'N'BWR
	HASH <^D'N*10-20+176500>
	DV P,0,<HRR MB,TK'N'S>,<PUSHJ P,TK'N'SWR>
	HASH <^D'N*10-20+176502>
	DV TK'N'B,0,<PUSHJ P,TK'N'BRD>,NOP,NOP
	HASH <^D'N*10-20+176504>
	DV P,0,<HRR MB,TP'N'S>,<PUSHJ P,TP'N'SWR>
	HASH <^D'N*10-20+176506>
	DV TP'N'B,0,NOP,<PUSHJ P,TP'N'BWR>,ODDNOP
>
>

;NOW DO EXPANSIONS FOR TELETYPES 2-8

	HSHK 2
	HSHK 3
	HSHK 4
	HSHK 5
	HSHK 6
	HSHK 7
	HSHK 8



IFN UDV,<
	HASH 165000
	DV UDS,0,NOP,<HRRM MB,UDS>,BNRML
	HASH 165002
	DV UDB,0,NOP,<HRRM MB,UDB>,BNRML
>

IFN DM,<	EXTERN DMCSW,DMBARW,DMBCW,DMBAW
	HASH 175000
	DV DMCS,0,NOP,<PUSHJ P,DMCSW>
	HASH 175002
	DV DMBAR,0,NOP,<PUSHJ P,DMBARW>
	HASH 175004
	DV DMBC,0,NOP,<PUSHJ P,DMBCW>
	HASH 175006
	DV DMBA,0,NOP,<PUSHJ P,DMBAW>
>
IFN AD,<EXTERN ADCSWR,ADDBRD
	HASH 176770
	DV ADCS,0,NOP,<PUSHJ P,ADCSWR>
	HASH 176772
	INTERN ADDB		;DV WON'T DEFINE IT,
	ADDB=PERBNK+TORG	;BECAUSE IT'S ALSO AN OPCODE.
	DV ADDB,0,<PUSHJ P,ADDBRD>,NOP
>

IFN PK,<	EXTERN PKCSRW,PKCSBW
	HASH 172540
	DV PKCSR,0,NOP,<PUSHJ P,PKCSRW>
	HASH 172542
	DV PKCSB,0,NOP,<PUSHJ P,PKCSBW>
	HASH 172544
	DV PKCNTR,0,NOP,NOP,NOP
>

IFN EAE,<	EXTERN SLSH,SLSHB,SASH,SASHB
	EXTERN DIVID,DIVIDB,LAC,LACB,LMQ,LMQB
	EXTERN MULT,MULTB,LSCSR,NORML,NORMLB
	HASH 777300
	DV P,0,RDZRO,<PUSHJ P,DIVID>,<PUSHJ P,DIVIDB>
	HASH 777302
	DV ACX,0,NOP,<PUSHJ P,LAC>,<PUSHJ P,LACB>
	HASH 777304
	DV MQX,0,NOP,<PUSHJ P,LMQ>,<PUSHJ P,LMQB>
	HASH 777306
	DV P,0,RDZRO,<PUSHJ P,MULT>,<PUSHJ P,MULTB>
	HASH 777310
	DV SCX,17000,NOP,<PUSHJ P,LSCSR>,NOP
	HASH 777312
	DV P,0,<PUSHJ P,READSC>,<PUSHJ P,NORML>,<PUSHJ P,NORMLB>
	HASH 777314
	DV P,0,RDZRO,<PUSHJ P,SLSH>,<PUSHJ P,SLSHB>
	HASH 777316
	DV P,0,RDZRO,<PUSHJ P,SASH>,<PUSHJ P,SASHB>
>

IFN TC, <	EXTERN WRTCST,WBTCST,WRTCCM,WBTCCM

	HASH 777340
	DV TCST,0,NOP,<PUSHJ P,WRTCST>,<PUSHJ P,WBTCST>
	HASH 777342
	DV TCCM,200,NOP,<PUSHJ P,WRTCCM>,<PUSHJ P,WBTCCM>
	HASH 777344
	DV TCWC,0,NOP,<HRRM MB,TCWC>,BNRML
	HASH 777346
	DV TCBA,0,NOP,<HRRM MB,TCBA>,BNRML
	HASH 777350
	DV TCDT,0,NOP,<HRRM MB,TCDT>,BNRML
	HASH 777352
	DV TCX1,0,NOP,NOP,NOP
	HASH 777354
	DV TCX2,0,NOP,NOP,NOP
	HASH 777356
	DV TCX3,0,NOP,NOP,NOP
>
;
;PDP-11 COMMUNICATIONS REGION, PAGE 5
;
	CV PIR7,7,240	;11/45 PIR REQUESTORS
	CV PIR6,6,240
	CV PIR5,5,240
	CV PIR4,4,240
	CV PIR3,3,240
	CV PIR2,2,240
	CV PIR1,1,240
	CV PTR,4,70	;DEVICE VECTORS:  PTR=70
	CV PTP,4,74	;PTP=74
	CV TTI,4,60	;TTI=60
	CV TTO,4,64	;TTO=64
	CV CLK,6,100	;CLK=100
	CV PK,6,104	;KW11-P=104
	CV RK,5,220	;RK11=220
	CV RF,5,204	;RF11=204
	CV RC,5,210	;RC11=210
	CV TC,6,214	;DECTAPE=214
	CV RP,5,254	;RP11=254
	CV UDV,4,170	;USER DEVICE=170
	CV TTI2,4,KLVCTR+0	;TELETYPES 2-8
	CV TTO2,4,KLVCTR+4
	CV TTI3,4,KLVCTR+10
	CV TTO3,4,KLVCTR+14
	CV TTI4,4,KLVCTR+20
	CV TTO4,4,KLVCTR+24
	CV TTI5,4,KLVCTR+30
	CV TTO5,4,KLVCTR+34
	CV TTI6,4,KLVCTR+40
	CV TTO6,4,KLVCTR+44
	CV TTI7,4,KLVCTR+50
	CV TTO7,4,KLVCTR+54
	CV TTI8,4,KLVCTR+60
	CV TTO8,4,KLVCTR+64
	CV DMI,4,DMVCTR	;DM11, INPUT SIDE
	CV DMO,4,DMVCTR+4	;DM11, OUTPUT SIDE
	CV AD,6,130		;AD, AS PLUG WIRED
	CV AD7,7,130		;AD, PROGRAM SELECTABLE BR7


	END
    ba6v