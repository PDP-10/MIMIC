	TITLE GRILNK	GRI-909 LINK EDITOR
	SUBTTL PARAMETER DEFINITIONS
	TWOSEG
	RELOC 400000

	ENTRY $INITU,$LOADR,$ELOAD
	INTERN $EMASK,$DFINF
	INTERN $ORIGN,$RELOC,$USRSW
	INTERN $DFBIN,$BITS,$RADIX
	EXTERN $STSYM,$RDWRD,$WRWRD,$PURGE,$GTWRD,$PTWRD
	EXTERN $PRFIL,$PRSYM,$PRVAL
	EXTERN $LKSYM,$LKGLBL
	EXTERN $HI,$LO

;ACCUMULATORS:

	F=0	;FLAGS
	P=17	;PUSHDOWN
	ARG=13	;ARGUMENT REG
	A==ARG
	T=14	;TEMPORARY
	T1=15

	AC=1
	AC1=2	;TEMPORARIES
	AC2=3
	AC3=4
	NAME=5
	VALUE=6
	FLGS=7
	CSUM=10
	CNT=11
	ACX=12
	ENT==AC2
	EXT==AC3

;GRI-909 LOADER FLAGS (BITS 15-11 OF SECOND WORD OF SYMBOL NAME)

	GRIENT=100000	;?ENTRY
	GRIREL=040000	;?RELOCATE DEFN
	GRIPLS=020000	;?+ EXTERN REF
	GRIMIN=010000	;?- EXTERN REF

	MAXCOD=5	;MAXIMUM BLOCK CODE

	RELOCT=JSP T,RELSUB

	RELOC==AC1
	DFTORG=200	;DEFAULT ORIGIN

	DEFINE CPY(B,C)
<	MOVE T,B
	MOVEM T,C>
	SYMLNT=3	;LOADER SYMBOL LENGTH.
;GRI-909 RELOCATING LOADER, PAGE 2
;MAIN LOADER ROUTINES.
	SUBTTL MAIN ROUTINES

;$INITU--	INITIALIZE RELOCATION CONSTANT
;$LOADR--	LOAD A FILE
;$ELOAD--	PUNCH CORE IMAGE

LVLOAD:	MOVE AC,$HI	;AT END OF LOAD, SET NEW RELOCATION CONSTANT
	ADDI AC,1	;TO HIGHEST LOADED WORD+1.
	AOSA ,(P)	;SET UP SKIP RETURN OUT OF LOADER.
$INITU:	MOVEI AC,DFTORG	;CONSTANT.
	MOVEM AC,$RELOC
	POPJ P,

LOADRC:	ANDI CSUM,177777	;AT THE END OF A BLOCK, CHECK
	JUMPN CSUM,CSUMER	;FOR CHECKSUM ERROR.
$LOADR:	PUSHJ P,$RDWRD	;START OF BLOCK... GET A BYTE.
	JRST LVLOAD	;ON EOF, EXIT.
	CAILE A,MAXCOD	;IS BLOCK CODE LEGAL?
	JRST BADBLK	;NO, BAD BLOCK FORMAT.
	JRST CODES(A)	;YES, BRANCH ON BLOCK TYPE.
CODES:	JRST $LOADR	;0= FILLER, IGNORE
	JRST ABSBLK	;1= ABSOLUTE BLOCK
	JRST LVLOAD	;2= END OF TAPE
	JRST RELBLK	;3= REL. BLOCK
	JRST DICTN	;4= ENTRY DICTIONARY
	JRST DICTN	;5= EXTERN DICTIONARY

RELBLK:	PUSHJ P,GETRHD	;REL. BLOCK.  GET BLOCK HEADER.
	JRST BADBLK	;DIE ON EOF.
	PUSHJ P,GET3	;GET 3 WORD ADDRESS HEADER
	JRST BADBLK
	RELOCT	;AND RELOCATE.
	MOVEM A,$ORIGN	;SAVE AS NEW ORIGIN.
	CAMLE A,$HI	;IF NEW ORIGIN IS GREATER THAN HIGHEST
	MOVEM A,$HI	;LOADED WORD, SAVE IT AS HIGHEST.
	JRST CHKCNT	;GO DECREMENT BLOCK COUNT.

RELBLP:	PUSHJ P,GET3	;DATA LOOP... GET NEXT DATA WORD.
	JRST BADBLK
	RELOCT	;RELOCATE IT.
	PUSHJ P,$PTWRD	;PUT WORD IN SIMULATED CORE.
	JRST BADORG	;ON ERROR, DIE
	AOS ,$ORIGN	;ADVANCE ORIGIN.
CHKCNT:	SOJG CNT,RELBLP	;DECREMENT BLOCK COUNT, LOOP BACK IF NOT DONE.
	JRST LOADRC	;IF DONE, GO CHECK ON CHECKSUM.

RELTBL:	JFCL	;REL BYTE=0: ABSOLUTE
	ADD A,$RELOC	;1:  NORMAL REL.
	SUB A,$RELOC	;2:  NEGATIVE REL.

RELSUB:	TRZN RELOC,200	;RELOCATION:  IS INDEX FLAG SET?
	TDZA T1,T1	;NO, OR IN NOTHING.
	MOVEI T1,100000	;YES, OR IN INDEX BIT.
	XCT ,RELTBL(RELOC)	;DO RELOCATION.
	ANDI A,177777	;CUT RESULT TO PROPER SIZE.
	IOR A,T1	;OR IN INDEX/NO-INDEX BIT.
	JRST (T)	;RETURN.
	SUBTTL DICTIONARY PROCESSING
;GRI-909 RELOCATING LOADER, PAGE 3
;DICTN:  PROCESS A DICTIONARY ENTRY.
;ON ENTRY'S-- MULTIPLY DEFINED ENTRY'S ARE FLAGGED AND IGNORED
;  NEW ENTRY'S ARE USED TO RESOLVE OUTSTANDING EXTERNS AND ARE
;  STORED IN THE MASTER SYMBOL TABLE.
;ON EXTERN'S-- IF A MATCHING ENTRY ALREADY EXISTS, THE EXTERN IS
;  RESOLVED ON THE SPOT.  OTHERWISE IT IS PUT IN THE MASTER
;  SYMBOL TABLE.

DICTN:	PUSHJ P,GETRHD	;DICTIONARY BLOCK.  GET HEADER.
	JRST BADBLK
DICTLP:	PUSHJ P,RDSYM	;GET NEXT SYMBOL ENTRY.
	JRST BADBLK
	TLNE FLGS,QENT	;IS IT AN ENTRY?
	JRST ENTFND	;YES, GO PROCESS.
EXTFND:	TRNE FLGS,GRIPLS+GRIMIN	;IS EXTERN EITHER A PLUS OR MINUS REF?
	JRST NOTDGN	;NO, CANNOT BE DEGENERATE CASE.
	CAIN VALUE,177777	;IS VALUE 177777?
	JRST COUNT	;YES, IGNORE EXTERN.
NOTDGN:	MOVE A,NAME	;NO, AN EXTERN.  LOOK IT UP IN THE MASTER
	PUSHJ P,$LKGLBL	;SYMBOL TABLE OF GLOBALS.
	JRST INWREF	;NOT PRESENT IN ANY FORM.  GO INSERT IT.
	MOVE AC,SYMF(A)	;FOUND.  IS TABLE SYMBOL ALSO AN
	TLNE AC,QEXT	;EXTERN REFERENCE?
	JRST INWREF	;YES, GO INSERT NEW REFERENCE.
	MOVE ENT,A	;NO, ENTRY IN TABLE IS A TRUE ENTRY.
	MOVEI EXT,NAME	;SYMBOL IN "NAME" IS AN EXTERN.
	PUSHJ P,RESOLV	;GP RESOLVE EXTERN REFERENCE.
COUNT:	SOJG CNT,DICTLP	;DECREMENT BLOCK COUNT.  LOOP BACK IF NOT DONE.
	JRST LOADRC	;IF DONE, GO CHECKSUM.

INWREF:	MOVEI A,NAME	;INSERT CURRENT SYMBOL INTO
	PUSHJ P,$STSYM	;MASTER SYMBOL TABLE.
	JRST NOCORE	;ERROR
	JRST COUNT	;GO DECREMENT BLOCK COUNT.

ENTFND:	MOVE A,NAME	;SYMBOL IS AN ENTRY.  LOOK IT UP.
	PUSHJ P,$LKGLBL	;IF NOT FOUND, GO INSERT.
	JRST INWREF
	MOVE AC,SYMF(A)	;FOUND, GET FLAGS FROM SYMBOL TABLE.
	TLNE AC,QENT	;ALSO AN ENTRY>
	JRST MULDEF	;YES, MULTIPLY DEFINED.
	MOVEI ENT,NAME	;NO.  EXTERN IS IN TABLE, ENTRY IS IN
	MOVE EXT,A	;CURRENT SYMBOL.
	PUSHJ P,RESOLV	;GO RESOLVE.
	MOVE A,EXT	;PURGE THE EXTERN REFERENCE FROM
	PUSHJ P,$PURGE	;THE MASTER SYMBOL TABLE.
	JRST ENTFND	;TRY AGAIN.
;GRI-909 RELOCATING LOADER, PAGE 4
;RESOLVE AN ENTRY-EXTERN PAIR.
;ENT	POINTS TO ENTRY SYMBOL BLOCK.
;EXT	POINTS TO EXTERN SYMBOL BLOCK.

RESOLV:	MOVE AC,SYMV(EXT)	;USE VALUE OF EXTERN (+1 FOR
	ADDI AC,1	;AUTO-INDEXING)
	MOVEM AC,$ORIGN	;AS POINTER TO CORE.
	PUSHJ P,$GTWRD	;GET WORD FROM CORE.
	MOVE AC,SYMF(EXT)	;GET FLAGS OF EXTERN REF.
	TRZE AC,GRIPLS	;PLUS REFERENCE?
	JRST ADDENT	;YES.
	TRZN AC,GRIMIN	;MINUS REFERENCE?
	JRST NRMEXT	;NO, MUST BE NORMAL EXTERN.
	SUB A,SYMV(ENT)	;SUBTRACT OFF VALUE OF
	JRST .+2	;ENTRY REFERENCE AND SKIP.
ADDENT:	ADD A,SYMV(ENT)	;ADD REF... ADD ON VALUE OF REFERENCE.
	ANDI A,177777	;CUT RESULT TO 16 BITS.
	PUSHJ P,$PTWRD	;STORE RESULT BACK.
	JRST BADORG	;ERROR, DIE.
CPOPJ:	POPJ P,	;EXIT.

NRMEXT:	MOVEI AC,1(A)	;A CONTAINS WORD FROM CORE = NEXT CHAIN POINTER.
	MOVE A,SYMV(ENT)	;REPLACE CORE WORD WITH VALUE
	PUSHJ P,$PTWRD	;OF ENTRY (IE, THE EXTERN'S DEFINITION).
	JRST BADORG
	CAIN AC,177777+1	;END OF CHAIN?
	POPJ P,	;YES, PUNT.
	MOVEM AC,$ORIGN	;NO, CHAIN POINTER IS NEW ORIGIN.
	PUSHJ P,$GTWRD	;GET NEXT LINK IN CHAIN.
	JRST NRMEXT	;ONWARD!
;GRI-909 RELOCATING LOADER, PAGE 5
;READ ROUTINES:
;GET3:  GET REL. FLAG + DATA
;GETRHD:  GET REL. HEADER
;RDSYM:  READ SYMBOL AND CONVERT TO MIMIC FORMAT

GET3:	PUSHJ P,$RDWRD	;GET 1ST BYTE.
	POPJ P,
	ADD CSUM,ARG	;TREAT AS WHOLE WORD FOR CHECKSUM PURPOSES.
	MOVE RELOC,A
RDWRD:	PUSHJ P,$RDWRD	;GET 2ND BYTE.
	POPJ P,
	MOVE ACX,A	;SAVE IT.
	PUSHJ P,$RDWRD	;GET 3RD BYTE.
	POPJ P,
	DPB ACX,[POINT 8,A,27]	;FORM COMPLETE WORD FROM BYTE 2 & 3
	ADD CSUM,A	;AND ADD RESULT INTO CHECKSUM.
CPOPJ1:	AOS ,(P)	;SKIP RETURN.
	POPJ P,

GETRHD:	PUSHJ P,RDWRD	;GET RELOCATABLE HEADER.  1ST WORD
	POPJ P,
	MOVE CSUM,A	;IS CHECKSUM.
	PUSHJ P,RDWRD	;2ND WORD IS BLOCK COUNT
	POPJ P,
	MOVN CNT,A	;WHICH IS NEGATIVE AND MUST BE MADE POSITIVE.
	ANDI CNT,177777
	JRST CPOPJ1	;EXIT OK.

ABSBLK:	PUSHJ P,RDWRD	;ABSOLUTE BLOCK FORMAT IS DIFFERENT.
	JRST BADBLK
	MOVN CSUM,A	;FIRST WORD IS CHECKSUM, POSITIVE INSTEAD
	PUSHJ P,RDWRD	;OF NEGATIVE.  2ND WORD IN ORIGIN.
	JRST BADBLK
	MOVEM A,$ORIGN
	PUSHJ P,RDWRD	;NEXT WORD IS BLOCK COUNT, POSITIVE INSTEAD
	JRST BADBLK
	MOVE CNT,A	;OF NEGATIVE!
ABSLP:	PUSHJ P,RDWRD	;GET DATA WORD.
	JRST BADBLK
	PUSHJ P,$PTWRD	;STORE IT IN CORE.
	JRST BADORG
	AOS ,$ORIGN	;INCREMENT ORIGIN.
	SOJG CNT,ABSLP	;DECREMENT BLOCK COUNT.  IF NOT ZERO, LOOP.
	JRST LOADRC	;GO CHECK ON CHECKSUM.
;GRI-909 RELOCATING LOADER, PAGE 6
;
RDSYM:	PUSHJ P,RDWRD	;READ SYMBOL ENTRY.  GET FIRST WORD
	POPJ P,
	MOVE AC,A	;AND SAVE.
	PUSHJ P,RDWRD	;GET 2ND WORD.
	POPJ P,
	MOVE FLGS,A	;AND SAVE AGAIN.
	CAIN AC,177777	;IS "SYMBOL NAME" -1?
	JRST INDXBL	;YES, INDEXED EXTERNAL EXPRESSION, GO PROCESS.
	IMULI AC,50*50	;1ST AND 2ND WORD ARE RADIX 50 SYMBOL NAMES?
	ANDI A,003777	;MULTIPLY HIGH ORDER 3 DIGITS BY 2500
	ADD AC,A	;AND ADD IN LOWER HALF.
	PUSHJ P,RDX50C	;CONVERT FROM RADIX 50 TO SIXBIT.
	PUSHJ P,RDWRD	;GET SYMBOL VALUE.
	POPJ P,
	MOVE VALUE,A	;SAVE IT.

	ANDI FLGS,170000	;CUT OUT EXTRANEOUS FLAG BITS.
	TRZN FLGS,GRIENT	;IS SYMBOL AN ENTRY POINT?
	JRST EXTFXX	;NO, EXTERN, GO FIX.
	TLO FLGS,QENT	;YES, SET MIMIC ENTRY FLAG.
	TRZE FLGS,GRIPLS	;IS POSITIVE REF BIT SET?
	JRST NEGENT	;YES, THEN NEGATIVELY RELOCATABLE (UGH).
CHKREL:	TRZN FLGS,GRIREL	;NO. IS RELOCATION BIT SET?
	JRST .+4	;NO.
	ADD VALUE,$RELOC	;YES, ADD ON RELOCATION CONSTANT.
	ANDI VALUE,77777	;CUT RESULT TO 15 BITS.
ROUND:	TLO FLGS,QREL	;SET MIMIC RELOCATION FLAG.
	JRST CPOPJ1	;TAKE SKIP RETURN.

NEGENT:	SUB VALUE,$RELOC	;NEGATIVE ENTRY POINT.  SUBTRACT
	ANDI VALUE,177777	;CUT RESULT TO 16 BITS.
	JRST ROUND	;RELOCATION CONSTANT FROM VALUE.

INDXBL:	MOVE NAME,INDXNM	;INDEXED EXTERNAL EXPRESSION.
	PUSHJ P,RDWRD	;CHANGE NAME TO [INDX].
	POPJ P,	;READ THRID WORD (VALUE).
	SKIPA VALUE,A	;SAVE VALUE.
EXTFXX:	TLO FLGS,QEXT	;EXTERN REF... SET MIMIC EXTERN FLAG.
	JRST CHKREL	;GO CHECK FOR RELOCATION.

RDX50C:	CLEAR NAME,	;CONVERT RADIX 50 SYMBOL IN AC.
RDX50L:	IDIVI AC,50	;DIVIDE SYMBOL BY 50 TO GET A DIGIT.
	PUSH P,AC+1	;PUSH REMAINDER.
	SKIPE AC	;QUOTEINT ZERO?
	PUSHJ P,RDX50L	;NO, RECUR.
RDXDON:	POP P,NAME-1	;GET DIGIT.
	JUMPE NAME-1,INCRAD	;IGNORE ZERO CHARACTERS.
	CAIL NAME-1,15	;IN RADIX 50, 15-47 IS @-Z.
	JRST ADD15	;GO ADJUST ALPHANUMERIC
	CAIGE NAME-1,3	;IN RADIX 50, 3-14 ARE 0-9.
	ADDI NAME-1,-<-3+20>+3	;[$,%]: 3+[1,2]= 04,05
ADDNM:	ADDI NAME-1,-<-15+40>-3+20	;[0,9]: 15+[3,14]= 20-31
ADD15:	ADDI NAME-1,-15+40	;[@,Z]: 23+[15,47]= 40-72
	DPB NAME-1,PUTTBL(AC)	;PUT DIGIT IN PLACE.
INCRAD:	ADDI AC,1	;ADVANCE TO NEXT DIGIT POSITION.
	POPJ P,	;RETURN RECURSIVELY.

PUTTBL:	POINT 6,NAME,5	;DIGIT 1
	POINT 6,NAME,11	;DIGIT 2
	POINT 6,NAME,17	;DIGIT 3
	POINT 6,NAME,23	;DIGIT 4
	POINT 6,NAME,29	;DIGIT 5
	POINT 6,NAME,35	;DIGIT 6
;GRI-909 RELOCATING LOADER, PAGE 7
;ERROR PROCESSOR.

	DEFINE ER(B,C)
<	MOVEI A,.+3
	PUSHJ P,PRERR
	JRST C
	ASCIZ \B\>

MULDEF:	ER <?MULTIPLY DEFINED GLOBAL 1>,COUNT
CSUMER:	ER <?CHECKSUM ERROR>,$LOADR
BADORG:	ER <?ILLEGAL ORIGIN 2>,CPOPJ
BADBLK:	ER <?BAD BLOCK>,LVLOAD
NOCORE:	ER <?INSUFFICIENT CORE>,CPOPJ

PRERR:	HRRZ AC,A	;MAKE A BYTE POINTER OUT OF THE
	HRLI AC,(POINT 7,)	;ARGUMENT.
	PUSHJ P,$PRFIL	;PRINT IDENTIFICATION OF OFFENDING FILE.
ERRNXT:	ILDB A,AC	;GET NEXT CHARACTER OF ERROR MESSAGE.
	JUMPE A,ENDMSG	;ON ZERO, END
	CAIN A,"1"	;1 STANDS FOR CURRENT SYMBOL.
	JRST PRSYMB
	CAIN A,"2"	;2 STANDS FOR CURRENT ORIGIN.
	JRST PRORGN
	OUTCHR A	;OTHERWISE, PRINT CHARACTER.
	JRST ERRNXT

ENDMSG:	OUTSTR CRLF	;END OF ERROR, TYPE CR-LF.
	POPJ P,	;EXIT.
CRLF:	ASCIZ /
/

PRORGN:	MOVE A,$ORIGN	;PRINT ORIGIN AS 16 BIT INTEGER
	PUSHJ P,$PRVAL
	JRST ERRNXT

PRSYMB:	MOVEI A,NAME	;PRINT CURRENT SYMBOL
	PUSHJ P,$PRSYM
	JRST ERRNXT
;GRI-909 RELOCATING LOADER, PAGE 8
;BINARY PUNCH SUBROUTINE.
;
$ELOAD:	SETZM ,SYMPTR	;FIRST, RESOLVE INDEXED EXPRESSIONS.
ILOOP:	PUSHJ P,NXTSYM	;GET FIRST(NEXT) SYMBOL FFROM SYMBOL TABLE.
	JRST ALLDN	;NONE LEFT? DONE.
	MOVE T,INDXNM	;IS SYMBOL AN INDEX BLOCK?
	CAME T,SYMN(A)
	JRST ILOOP	;NO, ON TO NEXT SYMBOL.
	AOS T,SYMV(A)	;YES, SYMBOL VALUE IS POINTER(-1) TO CORE.
	MOVEM T,$ORIGN	;SET ORIGIN FOR CORE PROBE.
	PUSHJ P,$PURGE	;PURGE THE INDEX BLOCK FROM THE SYMBOL TABLE.
	PUSHJ P,$GTWRD	;GET WORD FROM CORE.
	IORI A,100000	;SET INDEX BIT.
	PUSHJ P,$PTWRD	;PUT IT BACK.
	JFCL	;IGNORE ERRORS.
	JRST $ELOAD	;PURGE CLOBBERS POINTERS, START OVER.

INDXNM:	SIXBIT /[INDX]/

ALLDN:	TLNN F,QOBFIL	;IS THERE AN OUTPUT BINARY FILE?
	POPJ P,	;NO, EXIT.
	PUSHJ P,LEADER	;PUNCH INITIAL ZEROES.
	CPY $LO,$ORIGN	;START PUNCHING FROM LOWEST LOADED ADDR.
PUNBLP:	CPY $ORIGN,PNBORG	;SET UP BUFFER ORIGIN.
	MOVEM T,PNBSUM	;ADD ORIGIN INTO CHECKSUM.
	MOVSI CNT,-PNBLNT	;SET UP MAXIMUM COUNT.
PNBLP:	CAMLE T,$HI	;IS CURRENT ORIGIN < MAXIMUM?
	JRST PUNBLK	;NO, DONE PUNCHING.
	PUSHJ P,$GTWRD	;GET WORD FROM SIMULATED CORE.
	ADDM A,PNBSUM	;ADD WORD INTO CHECKSUM.
	MOVEM A,PUNBUF(CNT)	;STORE WORD IN PUNCH BUFFER.
	AOS T,$ORIGN	;INCREMENT ORIGIN.
	AOBJN CNT,PNBLP	;DECREMENT COUNT. IF NOT ZERO, LOOP.

PUNBLK:	HRRZ CNT,CNT	;REDUCE COUNT TO 18 BITS, POSITIVE.
	ADDM CNT,PNBSUM	;ADD COUNT INTO CHECKSUM.
	MOVEM CNT,PNBCNT	;STORE BLOCK COUNT.
	ADDI CNT,4	;DATA BLOCK IS 4 WORDS LONGER.
	MOVEI AC1,PNBST	;START PUNCHING AT BLOCK START.
PUNLP:	HRLI AC1,(POINT 8,,19)	;CONVERT WORD PTR TO BYTE PTR.
	ILDB A,AC1	;GET FIRST BYTE.
	PUSHJ P,$WRWRD	;PUNCH IT.
	ILDB A,AC1	;GET SECOND BYTE.
	PUSHJ P,$WRWRD	;PUNCH IT.
	ADDI AC1,1	;ADVANCE TO NEXT WORD OF PUNCH BLOCK.
	SOJG CNT,PUNLP	;DECREMENT COUNT.  IF NOT ZERO, LOOP.
	PUSHJ P,LEADER	;PUNCH INTER-BLOCK LEADER.
	MOVE T,$ORIGN	;HAVE WE REACHED END OF CORE TO BE PUNCHED?
	CAMG T,$HI
	JRST PUNBLP	;NO, GO PUNCH MORE.
	MOVEI A,02	;YES, PUNCH "02" AS END OF TAPE
	PUSHJ P,$WRWRD
	POPJ P,	;EXIT.

LEADER:	MOVEI CNT,^D19	;LEADER... PUNCH 19 FRAMES OF ZERO.
	CLEAR A,
	PUSHJ P,$WRWRD
	SOJG CNT,.-2
	POPJ P,
;GRI-909 RELOCATING LOADER, PAGE 9
;SYMBOL TABLE SEARCH ROUTINES

	EXTERN JOBFF,SYMBEG

NXTSYM:	SKIPN A,SYMPTR	;IF SYMPTR=0, RETURN ADDRESS OF FIRST SYMBOL.
	SKIPA A,SYMBEG	;WHICH IS AT SYMBEG.
	ADDI A,SYMLNT	;OTHERWISE RETURN ADDRESS OF NEXT.
	CAML A,JOBFF	;WITHIN DEFINED AREA?
	POPJ P,	;NO, FAIL RETURN, NONE LEFT.
	MOVEM A,SYMPTR	;YES, STORE IN SYMPTR
	JRST CPOPJ1	;AND TAKE SKIP RETURN.

	EXTERN $RDNUM,SYMBEG,JOBFF

FSW:	PUSHJ P,$RDNUM	;/F:XXXXX--- READ NUMBER.
	MOVEM A,DUMENT+SYMV	;SAVE AS VALUE OF DUMMY ENTRY.
FOVER:	SETZM ,SYMPTR	;START AT BEGINNING OF SYMBOL TABLE.
FLOOP:	PUSHJ P,NXTSYM	;GET NEXT SYMBOL.
	POPJ P,	;NONE LEFT.
	MOVE AC,SYMF(A)	;GET ITS FLAGS.
	MOVE T,SYMN(A)	;GET ITS NAME.
	CAME T,INDXNM	;NOT AN INDEX BLOCK AND AN
	TLNN AC,QEXT	;UNRESOLVED EXTERN?
	JRST FLOOP	;NO, ON TO NEXT.
	MOVEI ENT,DUMENT	;YES, RESOLVE IT AGAINST THE
	MOVE EXT,A	;DUMMY ENTRY.
	PUSHJ P,RESOLV
	MOVE A,EXT	;PURGE THE EXTERN REFERENCE.
	PUSHJ P,$PURGE
	JRST FOVER	;BECAUSE POINTERS ARE RAPED, START SEARCH OVER.
;GRI-909 RELOCATING LOADER, PAGE 10
;LOW SEGMENT
	SUBTTL VARIABLES
	INTERN IPCODE
$RADIX:	^D8	;RADIX 8, BIT WIDTH 16
$BITS:	^D16
IPCODE:	^D316		;PROGRAM CODE, TYMSHARE
$DFBIN:	SIXBIT /BIN/	;BINARY FILE EXTENSION
$DFINF:	SIXBIT /GRL/
$EMASK:	XWD QENT+QEXT,0
$USRSW:	ASCIZ /F:/
	PUSHJ P,FSW
	Z	;USER SWITCH TABLE.
	LIT
	RELOC 0
SYMPTR:	BLOCK 1
DUMENT:	BLOCK 3
$ORIGN:	BLOCK 1	;ORIGIN
$RELOC:	BLOCK 1	;RELOCATION CONSTANT

PNBST:	1	;START OF ABSOLUTE PUNCH BUFFER.

PNBSUM:	BLOCK 1	;BLOCK SUM
PNBORG:	BLOCK 1	;ORIGIN
PNBCNT:	BLOCK 1	;COUNT
PUNBUF:	BLOCK 100	;BUFFER PROPER
	PNBLNT=.-PUNBUF
	END
