	TITLE EXEC	GENERALIZED ASSEMBLER EXECUTIVE, R.M. SUPNIK, 7/71
	SUBTTL EXEC PARAMETERS
	SALL

;1) ACCUMULATOR ASSIGNMENTS.
;   PERMANENT ACCUMULATORS:

	F=0	;FLAGS
	P=17	;PUSHDOWN

;   EXEC-DESTROYABLE AC'S:

	ARG=13
	ARG2=14
	PA1=15
	PA2=16
	PA3==14

;   INITIALIZATION ONLY AC'S:

	TA1=2
	TA2=3
	TA3=4
	TA4=5

;2) DEVCHR UUO BITS.

	DSKDEV=200000	;DEVICE IS A FILE STRUCTURE
	CDRDEV=100000	;DEVICE IS CDR
	LPTDEV=040000
	DSPDEV=002000
	PTPDEV=000400
	PTRDEV=000200
	TTYDEV=000010
	DIRDEV=000004	;DIRECTORY DEVICE (DSK OR DTA)
	INPDEV=000002	;INPUT DEVICE
	OTPDEV=000001	;OUTPUT DEVICE

;3) I/O ERROR BITS.

	IOIMPM=400000	;IMPROPER MODE
	IODERR=200000	;DEVICE ERROR
	IODTERR=100000	;DATA ERROR
	IOBKTL=040000	;BLOCK TOO LARGE
	IOEOF=020000	;END OF FILE

;EXEC1, PAGE 2
;FILE DESCRIPTION BLOCKS.  FOR EACH FIELD (SRC,LST,BIN,MAC,SYM)
;THERE IS AN ASSOCIATED BLOCK GIVING THE NECESSARY INFORMATION
;ABOUT THE FILE FOR THE FIELD.   THIS BLOCK IS FORMATTED
;AS FOLLOWS:
;WORD 0:	DEFAULT DEVICE
; 1:	DEFAULT FILE NAME
; 2:	DEFAULT FILE EXTENSION (ALL SIXBIT)
; 3-6:	LOOKUP/ENTER BLOCK
; 7-9:	OPEN BLOCK
; 10:	CHANNEL
; 11-13:	BUFFER HEADER
; 14:	POINTER TO SWITCH TABLE
; 15-16:	FIELD NAME (ASCII)
;
	FDFDEV=0
	FDFNAM=1
	FDFEXT=2
	FNAM=3
	FEXT=4
	FPJ=6
	FOBLK=7
	FOPEN==7
	FDEV=^D8
	FPTR=^D9
	FCHL=^D10
	FHDR=^D11
	FSWT=^D14
	FFLD=^D15

	SRCHDR=SRCBLK+FHDR
	LSTHDR=LSTBLK+FHDR
	BINHDR=BINBLK+FHDR
	SYMHDR=SYMBLK+FHDR
	MACHDR=MACBLK+FHDR
	CCLHDR=CCLBLK+FHDR

;WITHIN THE HEADER, FIELDS ARE ALLOCATED AS FOLLOWS:

	HBYT=1	;BYTE PTR
	HCNT=2	;WORD COUNTER
;EXEC1, PAGE 3
;CHANNEL ASSIGNMENTS.

	SRC=1	;SOURCE
	LST=2	;LISTING
	BIN=3	;BINARY
	SYM=4	;SYMBOLS
	MAC=5	;MACRO EXPANSION
	CCL=6	;CCL FILE

;MISCELLANEOUS PARAMETERS.

	NUMBUF=2	;NUMBER OF BUFFERS
	BUFSIZ=203	;BUFFER SIZE FOR SOURCE FILE(S)

	STKMAX=^D200	;STACK LENGTH
	LINMAX=^D54	;PAGE LENGTH (IN LINES)

	FFEED=14	;ASCII CHARACTERS
	CRETURN=15
	LNFEED=12
	BELL=7
	ALTMOD=175	;HANDLE ALL THREE FLAVORS OF ALTMOD
	ALTMD1=176
	ALTMD2=033
	VTAB=13		;VERTICAL TAB
	TEOF=32		;TELETYPE END OF FILE (^Z)
	CCLNAM='MSA'	;NAME OF STANDARD CCL FILE

;LOCAL (EXEC ONLY FLAGS) IN F:
	QLFTARW=000010	;LEFT ARROW IN COMMAND STRING?
	SUBTTL EXECUTIVE CONTROL LOGIC
	TWOSEG
	RELOC 400000

;THE MAIN EXECUTIVE IS A RATHER TRIVIAL AFFAIR:

	ENTRY EXEC
START:
EXEC:	TDZA F,F	;NORMAL START... ZERO FLAGS.
CCLST:	MOVSI F,QCCL	;CCL START... SET CCL BIT.
	MOVE P,[IOWD STKMAX,STACK]	;INITIALIZE THE STACK.
	PUSHJ P,INITCD	;INITIALIZE THE COMMAND DEVICE.
NEWPRG:	PUSHJ P,EXINIT	;INITIALIZE THE EXECUTIVE.
	TLNE F,QEOF	;END OF FILE ON COMMAND DEVICE?
	JRST DOEXIT	;YES, GO AWAY TO MONITOR.
	PUSHJ P,GETLIN	;NO, GET AN INPUT LINE.

IFN TIMLTD,<	EXTERN CHARGE
	JSP 16,CHARGE	;WRITE INITIAL BILL
	JUMP 0,1
	JUMP 0,[ASCII/MIM3/]
>
	PUSHJ P,CHKBLK	;CHECK FOR BLANK COMMAND LINE.
	SKP		;IF NON-BLANK (CHAR IS NOT EOL), CONTINUE
	JRST RETURN	;IF BLANK, BYPASS PROCESSING.
	PUSHJ P,SCAN	;OTHERWISE, SCAN THE INPUT FOR BIN AND LST.
	PUSHJ P,INITPS	;INITIALIZE PASS 1.
	PUSH P,F	;SAVE THE CURRENT STATE OF THE ASSB FLAGS AND
	PUSHJ P,$PASS1	;DO PASS 1.
	POP P,F		;THEN RESTORE ASSB FLAGS.
	SKIPE ,MANUAL	;CHANGE OVER TO PASS2:  TYPE MESSAGE IF
	OUTSTR ENDPS1	;ANY OF THE INPUT DEVICES WERE MANUAL.
	TLZ F,QPASS1	;ZERO THE PASS 1 FLAG.
	PUSHJ P,INITPS	;INITIALIZE PASS 2.
	PUSHJ P,$PASS2	;DO PASS 2.
	PUSHJ P,EXCLOS	;CLOSE DOWN THE WORLD.
RETURN:	IFN TIMLTD,<
	JSP 16,CHARGE	;WRITE FINAL BILL
	JUMP 0,2
	JUMP 0,[ASCII/MIM3/]
>
	JRST NEWPRG	;GET ANOTHER COMMAND.

;SIMPLE, ISNT IT?  ALL WE NEED IS A FEW EXTERNS TO INDICATE
;WHERE WE EXPECT THE OUTSIDE WORLD TO CONNECT IN:

	EXTERN $PASS1,$PASS2
	EXTERN $TITLE,$SUBTTL,$NAME,$VRSN,$USRSW
	EXTERN $DFBIN,$DFSRC
	INTERN $SQNUM,$CRFNO,$ERCNT
	EXTERN JOBREN,JOBREL,JOBFF,JOBHRL,JOBUUO,JOBSA

	DEFINE CPY(A,B)
<	MOVE PA1,A
	MOVEM PA1,B>
;EXEC2, PAGE 2
;EXINIT--- INITIALIZE THE ASSEMBLER BY
;1) SETTING UP STANDARD SWITCH DEFAULTS
;2) ZEROING PERMANENT CORE AREAS
;3) GETTING THE DATE AND TIME FOR LATER USE
;4) DOING MISC. HOUSECLEANING

EXINIT:	HLRZ PA1,JOBSA	;RESET JOBFF FROM JOBSA.
	MOVEM PA1,JOBFF
	MOVEI PA1,EXEC	;SET UP THE REENTRY ADDRESS
	MOVEM PA1,JOBREN
	SETZ TA1,
	RUNTIM TA1,	;GET THE CURRENT RUN TIME
	MOVEM TA1,STTIME	;AND SAVE AS STARTING TIME

	CLEARM BINBLK+FNAM	;CLEAR BINARY FILE NAME.
	DFTL=QNOBIN+QNBINRQ+QPASS1+QNOLST+QNLSTRQ
	DFTR=QNOSYM+QNSYMRQ+QNOMAC+QNMACRQ
	AND F,[XWD QCCL+QCCLC+QEOF+QCCLU,0]	;CLEAR FLAGS AND
	IOR F,[XWD DFTL,DFTR]
			;SET UP STANDARD DEFAULTS:  NO OUTPUT AT ALL
	MOVE PA1,[XWD TCORE,TCORE+1]	;ZERO TEMPORARY CORE
	SETZM TCORE
	BLT PA1,TCOREND

	DATE TA1,	;GET CURRENT DATE.
	IDIVI TA1,^D31	;FORMAT IS  (DAY-1)+((YR-1964)*12+(MTH-1))*31
	ADDI TA1+1,1	;DIVIDING BY 31 GETS THE DAY AS REMAINDER.
	MOVEM TA1+1,DAY	;SAVE DAY.
	IDIVI TA1,^D12	;DIVIDING BY 12 GETS THE MONTH.
	MOVEM TA1+1,MONTH	;SAVE IT.
	ADDI TA1,^D64	;QOTIENT IS YEAR-64.  ADJUST AND SAVE.
	MOVEM TA1,YEAR

	MSTIME TA1,	;GET THE CURRENT  TIME IN MS.
	IDIVI TA1,^D60*^D1000	;CONVERT MILLISECONDS TO MINUTES.
	IDIVI TA1,^D60	;CONVERT MINUTES TO HOURS AND MINUTES.
	MOVEM TA1+1,MINUTE	;TO GET HOUR AND MINUTE IN 24-HOUR FORM
	MOVEM TA1,HOUR

	MOVEI PA1,COMBUF-1	;INITIALIZE SCANNING POINTER
	MOVEM PA1,COMPTR
	CPY $DFSRC,SRCBLK+FDFEXT	;PCIK UP USER SPECIFIED SRC
	CPY $DFBIN,BINBLK+FDFEXT	;AND BIN DEFAULT EXTENSIONS.

	POPJ P,		;EXIT
;EXEC2, PAGE 3
;INITPS--- INITIALIZE PASS BY
;1) ZEROING THE LISTING MECHANISM TEMPORARY CORE
;2) SCANNING THE FIRST SOURCE FILE.

INITPS:	CPY SAVPTR,COMPTR	;REINITIALIZE THE COMMAND SCANNING
			;PTR TO BEGINNING OF SRC FIELD.
	MOVE PA1,[XWD LCORE,LCORE+1]	;ZERO LISTING CORE.
	SETZM LCORE
	BLT PA1,LCOREND

	MOVEI ARG,SRCBLK	;USING THE SOURCE SWITCH TABLE,
	PUSHJ P,GETNAM	;GET SOURCE FILE.
	JRST ERNSF	;NONE?  DIE.
GETSRC:	MOVE PA1,SCNDEV	;GET SELECTED INPUT DEVICE NAME
	DEVCHR PA1,	;AND FIND OUT WHAT IT IS.
	TLNE PA1,CDRDEV+TTYDEV+PTRDEV	;IF MANUALLY OPERATED,
	SETOM MANUAL	;SET THE MANUAL FLAG.
	PUSHJ P,INITSRC	;INITIALIZE THE SOURCE FILE.
	SETOM LINNUM	;FORCE TOP OF FORM.
	CLEARM FILPAG	;CLEAR PHYSICAL PAGE# COUNTER
	CLEARM $SQNUM	;AND SEQUENCE NUMBER.

	POPJ P,		;EXIT.
;EXEC2, PAGE 4
;EXCLOS--- NORMAL SHUTDOWN FOR EXECUTIVE.
;WE GIVE OUT A OUMBER OF INTERESTING AND DIFFERENT MESSAGES
;TO INDICATE THAT THE WHOLE THING IS OVER.

	DEFINE PRINT(M)
<	MOVEI ARG,M
	PUSHJ P,$WRLIN>

	DEFINE PRCHR(M)
<	MOVEI ARG,M
	PUSHJ P,$WRCHR>

EXCLOS:	SETOM LINNUM	;FORCE TOP OF FORM...
	TLZ F,QPASS1+QLSTOFF+QANLST+QNOERR	;SET UP FLAGS TO
	TLO F,QERROR	;FORCE OUTPUT TO BOTH TTY AND LIST FILE
		;(UNLESS EITHER NO LIST FILE OR LIST=TTY)
	CPY SRCBLK+FNAM,OLDNAM	;DISABLE ERROR IDENTIFICATION MECHANISM.
	CPY FILPAG,OLDPAG
	PRINT CRLFST	;TYPE CR,LF.
	SKIPN ,$ERCNT	;ANY ERRORS?
	JRST NOERRM	;NO, PUT OUT "NO ERRORS".
	PRINT MERDET	;YES, PRINT "?ERRORS DETECTED: "
	MOVE ARG,$ERCNT	;FOLLOWD BY ERROR COUNT
	PUSHJ P,BTHDNL	;AS DECIMAL INTEGER
NEXTM:	PRINT CRLFST	;SPACE DOWN 2 LINES.
	TLNE F,QCCL+QCCLC+QCCLU	;IF IN CCL MODE, DONT PRINT
	JRST EREXIT	;ANYTHING ELSE.

	PRINT MRNTIM	;PRINT #RUN TIME: #
	SETZ PA1,	;GET THE CURRENT RUNTIME.
	RUNTIM PA1,
	SUB PA1,STTIME	;SUBTRACT OFF THE STARTING TIME.
	IDIVI PA1,^D1000	;DIVIDE BY01000 AND ROUND UP
	MOVEI ARG,1(PA1)	;TO GET RUNTIME IN SECONDS.
	PUSHJ P,BTHDNL	;TYPE RUN TIME AS DECIMAL INTEGER.
	PRINT MSCNDS	;FOLLOWED BY "SECONDS".

	PRINT MCORE	;PRINT "CORE USED: "
	HRRZ PA1,JOBREL	;GET TOP OF LOW SEGMENT
	LSH PA1,-^D10	;DIVIDE BY 1024 TO GET "K" CORE USED
	MOVEI ARG,1(PA1)	;BE HONEST ABOUT IT.
	PUSHJ P,BTHDNL	;PRINT OUT AS DGCIMAL INTEGER.
	PRCHR "+"	;PRINT "+"
	HRRZ PA1,JOBHRL	;GET OP OF HIGH SEGMENT.
	LSH PA1,-^D10	;CONVERT TO K.
	MOVEI ARG,777601(PA1)	;STRIP OF HIGH ORDER 400000 (AS SHIFTED)
	PUSHJ P,BTHDNL	;AND PRINT EM OUT.
	PRINT MKCRLF	;FOLLOWD BY "K".
	JRST EREXIT	;GO CLOSE DOWN I/O

NOERRM:	PRINT MNOERR	;NO ERRORS, GIVE MESSAGE AND
	JRST NEXTM	;RETURN.
;EXEC2, PAGE 5
;CLOSE DOWN I/O.

EREXIT:	CLOSE SRC,	;CLOSE DOWN ALL POSSIBLE FILES.
	CLOSE BIN,
	CLOSE LST,
	CLOSE SYM,
	CLOSE MAC,

	TLNN F,QNOLST	;ANY LISTING FILE?
	PUSHJ P,LSTTST	;YES, CHECK FOR FINAL ERROR.
	TLNN F,QNOBIN	;REPEAT FOR BIN, MAC, SYM FILES.
	PUSHJ P,BINTST
	TRNN F,QNOMAC
	PUSHJ P,MACTST
	TRNN F,QNOSYM
	PUSHJ P,SYMTST

	MOVE PA1,@COMPTR	;DID COMMAND STRING END IN A GOOD TERMINATOR?
	PUSHJ P,CHKEOL
	JRST ERRTMF	;NO, TOO MANY FILES SPECIFIED.
	POPJ P,		;EXIT
;EXEC2, PAGE 6
;MISC.

	AOS ,COMPTR	;ADVANCE TO NEXT CHARACTER AND...
GETBLK:	MOVE PA3,COMPTR	;WITHOUT ADVANCING COMPTR,
	MOVE PA1,1(PA3)	;GET THE NEXT CHAR.
	CAIE PA1," "	;IS IT SPACE OR TAB?
	CAIN PA1,"	"
	JRST GETBLK-1	;YES, CONTINUE SCAN.
	POPJ P,		;NO, EXIT.

CHKBLK:	PUSHJ P,GETBLK	;LOOK FOR BLANK LINE: ABSORB SPACES.
CHKEOL:	CLEAR PA2,	;CLEAR TABLE INDEX.
CHKELP:	SKIPN ,TTBL(PA2)	;END OF TABLE?
	POPJ P,	;YES, NO MATCH.
	CAME PA1,TTBL(PA2)	;CHAR MATCH TO TABLE?
	AOJA PA2,CHKELP	;NO, GO ON.
CPOPJ1:	AOS ,(P)	;YES, TAKE SKIP RETURN.
	POPJ P,

TTBL:	CRETURN	;TABLE OF LEGAL COMMAND TERMINATORS
	LNFEED
	ALTMOD
	ALTMD1
	ALTMD2
	BELL
	FFEED
	VTAB
	TEOF
	Z

;END OF RUN MESSAGES:

MERDET:	ASCIZ /?ERRORS DETECTED: /
MRNTIM:	ASCIZ /
RUN-TIME: /
MSCNDS:	ASCIZ / SECONDS

/
MCORE:	ASCIZ /CORE USED: /
MKCRLF:	ASCIZ /K

/
MNOERR:	ASCIZ /NO ERRORS DETECTED/
CRLFLF:	ASCIZ /

/
CRLFST:	ASCIZ /
/
ENDPS1:	ASCIZ /END OF PASS 1
/
;EXEC2, PAGE 7
;IMPINT-- DO IMPLICIT INITIALIZATION.  NOTE THAT THIS
;IS DONE BEFORE PASS1 COMMENCES.

IMPINT:	TLNE F,QNOBIN	;ANY BINARY FILE?
	TLNE F,QNBINRQ	;NO.  ANY REQUEST FOR ONE?
	SKP		;NO REQUEST OR ALREADY PRESENT.
	PUSHJ P,$INITB	;INITIALIZE IMPLICIT BINARY FILE.
	TLNE F,QNOLST	;ANY LISTING FILE?
	TLNE F,QNLSTRQ	;NO.  ANY REQUEST FOR ONE?
	SKP		;NO REQUEST OR ALREADY PRESENT.
	PUSHJ P,$INITL	;INITIALIZE IMPLICIT LIST FILE.
	TRNE F,QNOSYM	;YOU KNOW THE DRILL NOW.
	TRNE F,QNSYMRQ
	SKP
	PUSHJ P,$INITS
	TRNE F,QNOMAC	;SO DO THE SAME WITH SYMBOL AND MACRO
	TRNE F,QNMACRQ	;EXPANSION FILES.
	SKP
	PUSHJ P,$INITM
	POPJ P,	;EXIT.
;EXEC2, PAGE 8
;COMMAND DEVICE ROUTINES
;INITCD-- INITIALIZE COMMAND DEVICE
;GETLIN-- GET COMMAND LINE
;
	A==13
	T==14		;LOCAL AC DEFINITIONS
	T1==15
	T2==16
INITCD:	RESET		;INITIALIZE COMMAND DEVICE:  RESET THE SYSTEM.
	CLRBFI		;CLEAR TTI INPUT BUFFER.
IFN ONLINE,<	EXTERN BILL,BILFRC
	PUSH P,F	;SAVE AC-0, ONLY ACTIVE AC.
	PUSHJ P,BILL	;CALL BILLING PROGRAM.
	ARG 5,XN1
	ARG 5,XE1
	ARG 5,XN2
	ARG 5,XE2
	ARG 0,XNCO2
	ARG 0,XNPR2
	ARG 5,XN3
	ARG 5,XE3
	ARG 0,XNCO3
	ARG 0,XNPR3
	ARG 2,XPCT1
	ARG 2,XPCT2
	ARG 0,XMIN
	POP P,F	;POP FLAGS.
>
IFN TYMSHR,<
	PUSHJ P,BRI	;WRITE INITIAL BILLING RECORD.
>
	TLNN F,QCCL	;ARE WE IN CCL MODE?
	POPJ P,		;NO, EXIT, NOTHING TO BE DONE.
	SETZM ,CCLBUF	;YES, ZERO THE CCL BUFFER.
	MOVE T,[XWD CCLBUF,CCLBUF+1]
	BLT T,CCLBUF+BUFSIZ-1
	MOVE T1,[XWD 2,TMPBLK]	;FIRST, TRY FOR TMPCOR FILE.
	TMPCOR T1,	;ATTEMPT TO READ AND DELETE FILE 'MSA'.
	JRST NOTCOR	;NOT IMPLEMENTED OR NOT FOUND.
	TLO F,QCCLC	;FOUND, SET TMPCOR FLAG.
	MOVEI T1,5*200	;FAKE BYTE COUNT AND BYTE POINTER FOR
	MOVEM T1,CCLHDR+HCNT	;CCL FETCH ROUTINE.
	MOVE T1,[POINT 7,CCLBUF]
	MOVEM T1,CCLHDR+HBYT
	POPJ P,		;EXIT.

TMPBLK:	XWD CCLNAM,0	;TMPCOR BLOCK-- FILE NAME.
	IOWD 200,CCLBUF	;COMMAND WORD

NOTCOR:	PUSHJ P,MAKCCL	;MAKE CCL NAME FROM JOB NUMBER.
OPNCCL:	OPEN CCL,CCLBLK+FOPEN	;NOT TMPCOR.  TRY FOR DISK.
	JRST NOCCL	;NOT TODAY.
	LOOKUP CCL,CCLBLK+FNAM	;TRY TO FIND CCL FILE.
	JRST NOCCL	;NOT THERE.
	PUSH P,JOBFF	;SAVE OLD JOBFF AND THEN
	MOVEI T1,CCLBUF	;FAKE JOBFF SO THAT
	MOVEM T1,JOBFF	;MONITOR ALLOCATES 1 BUFFER IN PREDETERMINED
	INBUF CCL,1
	POP P,JOBFF	;LOCATION.  FINALLY, RESTORE JOBFF.
	POPJ P,		;EXIT.

MAKCCL:	MOVEI A,3	;TRIED AND TRUE CCL FILE NAME CREATOR.
	PJOB T,		;GET JOB NUMBER.
MAKPJ:	IDIVI T,^D10	;CONVERT TO THREE SIXBIT DIGITS.
	ADDI T1,'0'
	LSHC T1,-6
	SOJG A,MAKPJ
	HLR T2,TMPBLK	;PUT REST OF FILE NAME IN RIGHT HALF.
	MOVEM T2,CCLBLK+FNAM	;STORE IN CCL BLOCK.
	POPJ P,		;EXIT.

DOEXIT:
IFN ONLINE,<	PUSHJ P,BILFRC>	;EXIT AFTER CCL FILE.
IFN TYMSHR,<	PUSHJ P,BRF>	;WRITE ANY FINAL BILLING RECORDS
	EXIT		;NO RETURN POSSIBLE.
;EXEC2, PAGE 9
;
GETLIN:	TLNE F,QCCL	;GET A COMMAND LINE.  ARE WE IN CCL MODE?
	JRST CCLLIN	;YES.
TTYLIN:	OUTCHR ["*"]	;PUT OUT REQUEST FOR INPUT.
IFN TYMSHR,<
	PUSHJ P,BRCP	;WRITE A CHECKPOINT BILLING RECORD
>
	MOVEI A,COMBUF+1	;SET UP POINTER IN COMMAND BUFFER.
	INCHWL COMBUF	;GET FIRST CHARACTER.
	INCHRS (A)	;GET SUBSEQUENT CHARACT\RS, IF ANY.
	POPJ P,		;NONE LEFT, EXIT.
	AOJA A,.-2	;MORE, INCREMENT POINTER AND GO BACK.

CCLLIN:	MOVEI A,COMBUF	;SET UP POINTER IN COMMAND BUFFER.
NEWCCL:	PUSHJ P,GETCCL	;GET A CCL CHARACTER.
	MOVEM T1,(A)	;STORE IT.
	PUSHJ P,CHKEOL	;END OF LINE?
	AOJA A,NEWCCL	;NO, GET MORE
IFN TYMSHR,<
	PUSHJ P,BRCP	;WRITE A CHECKPOINT BILLING RECORD
>
	POPJ P,		;YES, EXIT.

GETCCL:	SOSLE ,CCLHDR+HCNT	;GET CCL CHARACTER.  BUFFER EMPTY?
	JRST OKTOGT	;NO, GO GET CHARACTER.
	TLNE F,QCCLC	;YES, TMPCOR FILE?
	JRST NOCCLC	;IF SO, NO FURTHER BUFFERS.
	INPUT CCL,	;REGULAR FILE, TRY FOR MORE.
	STATZ CCL,IOEOF	;END OF FILE?
	JRST NOMORC	;YES, DONE.
OKTOGT:	ILDB T1,CCLHDR+HBYT	;OK, GET BYTE.
	JUMPE T1,GETCCL	;IGNORE ZERO.
	POPJ P,		;EXIT.

NOMORC:	TLNE F,QCCLU	;USER SUPPLIED CCL FILE?
	JRST NODLTE	;THEN DONT DELETE IT.
	SETZM ,CCLBLK+FNAM	;NO MORE CCL INPUT.  ZERO FILE NAME.
	RENAME CCL,CCLBLK+FNAM	;DELETE CCL FILE.
	JFCL		;IGNORE ERRORS.
NODLTE:	RELEAS CCL,	;RELEASE THE CCL CHANNEL.
NOCCLC:	TLZ F,QCCL+QCCLC+QCCLU	;TURN OFF CCL FLAGS.
	MOVEI T1,015	;RETURN CARRIAGE RETURN.
NOCCL:	TLO F,QEOF
	POPJ P,
