	SUBTTL DATA AND SYMBOL PUNCH ROUTINES
;
;THE BINARY AND SYMBOL PUNCH ROUTINES ARE EXTREMELY CONFUSING,
;BECAUSE OF THE LARGE NUMBER OF ROUTINES AND THE VARIETY
;OF BLOCK FORMATS.  SOME PRELIMINARY INFORMATION:
;
;ALL BLOCKS CONSIST OF A THREE WORD HEADER + A BODY.  HEADER
;FORMAT IS STANDARD:
; 0	BLOCK TYPE
; 1	CHECKSUM
; 2	ITEM COUNT (NEGATIVE)
;THERE ARE TWO DIFFERENT BLOCK TYPES, DATA (TYPE=03) AND
;SYMBOL (TYPE=04/05).  WITHIN A DATA BLOCK, ITEMS ARE
;ORGANIZED AS FOLLOWS:

;EACH ITEM CONSISTS OF THREE BYTES:
;BYTE 1		REL FLAG
;BYTE 2,3	VALUE
;THE FIRST DATA ITEM IN A DATA BLOCK IS THE BLOCK ORIGIN.
;NOTE THAT FOR CHECKSUM PURPOSES, THE REL FLAG IS CONSIDERED
;TO BE A 16 BIT VALUE, THE HIGH ORDER 8 BITS OF WHICH ZRE ZERO.
;WITHIN THE PUNCH BUFFER, A THREE BYTE DATA ITEM IS STORED IN
;ONE BUFFER LOCATION, AS FOLLOWS:
;BITS 0-11	UNUSED
; 12-19		REL FLAG
; 20-35		DATA VALUE
;HENCE IN PUNCHING A THREE BYTE ITEM, WE GET THREE BYTES FROM
;THE SAME BUFFER WORD.

;WITHIN A SYMBOL BLOCK, ITEMS ARE ORGANIZED AS FOLLOWS:
;EACH ITEM CONSISTS OF 6 BYTES:
;BYTES 1-4	RADIX 50 SYMBOL NAME
;BITS 15-11 OF BYTE 3 ARE FLAGS
;BYTES 5-6	SYMBOL VALUE
;WITHIN THE PUNCH BUFFER, ITEMS ARE STORED 2 BYTES/PDP-10 WORD
;AND TAKE 3 WORDS.
;
;
;
;
;THIS SECTION CONTAINS THE FOLLOWING ROUTINES:
;PENTDC		PUNCH ENTRY DICTIONARY
;PEXTDC		PUNCH EXTERN DICTIONARY
;PARITH		PUNCH THE EXTERNAL ARITHMETIC DICTIONARY
;PUNCH		PUNCH A BINARY DATA ITEM
;OTPDCN		FORCE OUTPUT OF DICTIONARY BLOCK
;OTPDAT		FORCE OUTPUT OF DATA BLOCK
;
;PLUS THE USUAL RAFT OF SUPPORTING SUBROUTINES AND MISC. GARBAGE
;GRI-909/99/919 PUNCH ROUTINES, PAGE 2
;PENTDC-- PUNCH ENTRY DICTIONARY, WHICH IS THE FIRST THING ON
;THE OUTPUT TAPE.
;
PENTDC:	TLNE F,QNOBIN	;ANY BINARY OUTPUT?
	POPJ P,	;NO, EXIT
	MOVEI ARG,4	;YES, INITIALIZE PUNCH BUFFER FOR
	JSP T2,INDCBF	;ENTRY DICTIONARY (BLOCK TYPE 04).
	PUSHJ P,INITNX	;INITIALIZE 'NEXT SYMBOL' ROUTINE.
ENTDCL:	PUSHJ P,NXTSYM	;GET NEXT SYMBOL.
	JUMPE ARG,ENDDC	;NONE LEFT, DONE.
	MOVE AC,SYMF(ARG)	;GET FLAGS.
	TLNE AC,QENT	;IS IT A DEFINED ENTRY POINT?
	TLNE AC,QUNV
	JRST ENTDCL	;NO, IGNORE.
	MOVEI FLGS,GRIENT	;YES, BASIC FLAG IS 'ENTRY POINT'.
	HLRZ AC,SYMV(ARG)	;SET OTHER FLAGS BASED ON
	IOR FLGS,ENTFLG+RELBAS(AC)	;RELOCATABILITY.
	PUSHJ P,PDICTN	;PUNCH DICTIONARY ENTRY.
	JRST ENTDCL	;GO DO MORE.

ENDDC:	TLZE AF,QNYDAT	;IF ANYTHING FOUND IN DICTIONARY, THEN
	PUSHJ P,OTPDCN	;AT END, FORCE OUTPUT OF BLOCK.
	POPJ P,		;EXIT.

ENTFLG:	GRIPLS+GRIREL	;NEG ENTRY POINT IS MARKED AS POS REF/REL
	Z		;ABS ENTRY POINT
	GRIREL		;NORMAL ENTRY POINT

;PEXTDC-- PUNCH EXTERN DICTIONARY, VERY SIMILAR TO ABOVE.

PEXTDC:	TLNE F,QNOBIN	;BINARY OUTPUT?
	POPJ P,		;NO, EXIT.
	MOVEI ARG,5	;YES, INITIALIZE PUNCH BUFFER FOR
	JSP T2,INDCBF	;EXTERN DICTIONARY (BLOCK TYPE 05).
	PUSHJ P,INITNX	;INITIALIZE 'NEXT SYMBOL' ROUTINE.
EXTDCL:	PUSHJ P,NXTSYM	;GET NEXT SYMBOL.
	JUMPE ARG,PARITH	;DONE, GO ONTO EXTERNAL ARITHMETIC.
	MOVE AC,SYMF(ARG)	;GET FLAGS. UNDEFINED?
	TLNN AC,QUNV
	JRST EXTDCL	;NO, IGNORE.
	HLRZ AC,SYMV(ARG)	;YES, GET RELOCATION FLAG.
	MOVE FLGS,ENTFLG+RELBAS(AC)
	PUSHJ P,PDICTN	;PUNCH ENTRY.
	JRST EXTDCL	;ON TO NEXT.
;GRI-909/99/919 PUNCH ROUTINES, PAGE 3
;PARITH-- PUNCH ARITHMETIC REFERENCES.

PARITH:	SKIPN ARG,MEXLST	;IS THE MASTER EXTERNAL LIST EMPTY?
	JRST ENDDC	;YES, DONE.
	MOVE AC,(ARG)	;GET LINK TO NEXT
	MOVEM AC,MEXLST	;AND SAVE AS NEW START OF LIST
	ADDI ARG,LINK	;ADVANCE TO BODY OF REFERENCE.
	HLRZ FLGS,SYMF(ARG)	;GET FLAGS.
	PUSHJ P,PDICTN	;GO PUNCH.
	JRST PARITH	;ON TO NEXT.
;GRI-909/99/919 PUNCH ROUTINES, PAGE 4
;PDICTN-- PUNCH A DICTIONARY ENTRY.  FLAGS ARE
;IN FLGS, ALREADY TRANSLATED TO GRI FORMAT.  THE SYMBOL BLOCK
;IS POINTED TO BY ARG.

PDICTN:	TLO AF,QNYDAT	;ENTRY FOUND, SET "ANY DATA" FLAG.
	MOVE AC,PUNPSN	;GET POINTER INTO PUNCH BUFFER.
	CAIGE AC,PUNMAX	;IS BUFFER FULL?
	JRST NOPUN	;NO.
	PUSH P,ARG	;YES, SAVE ARGUMENT.
	PUSHJ P,OTPDCN	;PUNCH BUFFER.
	BFINIT		;REINITIALIZE.
	POP P,ARG	;RECOVER ARGUMENT.
NOPUN:	MOVE AC,SYMN(ARG)	;GET SYMBOL NAME.
	CAMN AC,[SIXBIT /[INDX]/]	;IS IT INDEX BLOCK?
	JRST INDXBL	;YES.
	MOVEI T1,3	;NO, CONVERT 3 CHARACTERS TO RADIX 50
	RAD50C
	BFINST		;AND STORE IN BUFFER.
	MOVEI T1,2	;CONVERT 2 MORE CHARACTERS TO RADIX 50
	RAD50C
	IOR T,FLGS	;OR IN GRI MODE FLAGS.
INSPT2:	BFINST		;INSERT IN PUNCH BUFFER.
	MOVE T,SYMV(ARG)
	BFINST		;INSERT VALUE OF SYMBOL.
	POPJ P,		;EXIT.

INDXBL:	MOVEI T,177777	;INDEX BLOCK, NAME IS -1.
	BFINST
	MOVE T,FLGS	;SECOND PART OF NAME IS BLANK.
	JRST INSPT2	;GO INSERT.
;GRI-909/99/919 PUNCH ROUTINES, PAGE 5
;PUNCH-- PUNCH A DATA ITEM IN ARG.

PUNCH:	TLNE F,QPASS1+QBINOFF+QNOBIN	;PUNCHING OFF?
	JRST INCRXT	;YES, BYPASS PUNCHING.
	MOVE AC,PUNPSN	;PUNCH OVERFLOW?
	CAIGE AC,PUNMAX
	JRST NOPNCH	;NO.
	PUSH P,ARG	;SAVE ARGUMENT.
	PUSHJ P,OTPDAT	;YES, OUTPUT DATA ITEMS.
	PUSHJ P,INDBNT	;REINITIALIZE THE PUNCH BUFFER.
	POP P,ARG	;RESTORE ARGUMENT.
NOPNCH:	BFCNVT		;CONVERT ARGUMENT AND STORE IN BUFFER.
INCRXT:	AOS ,CURLOC	;ADVANCE LOCATION COUNTER.
	POPJ P,		;EXIT.
;GRI-909/99/919 PUNCH ROUTINES, PAGE 6
;SUPPORTING CAST OF THOUSANDS--
;RAD50S  RADIX 50 CONVERSION
;BUFINS  INSERT DATA ITEM IN BUFFER
;BFCNVT  INSERT 3 BYTE DATA ITEM IN BUFFER
;
;RAD50S IS CALLED BY JSP T2,RAD50S WITH COUNT IN T1, SIXBIT
;SYMBOL IN AC.  VALUE IS RETURNED IN T.

RAD50S:	SETZ T,		;CLEAR RESULT.
RAD50L:	SETZ AC+1,	;ISOLATE HIGH ORDER SIXBIT
	ROTC AC,6	;CHARACTER.
	JUMPE AC+1,R50MUL	;BLANK GOES THRU AS ZERO.
	CAIL AC+1,'@'	;IS IT @ THRU Z?
	JRST ALPHA	;YES
	CAIGE AC+1,'0'	;IS IT NUMBER OR SPECIAL?
SPCL:	ADDI AC+1,12	;(4:5) +12-15 = (1:2)
	ADDI AC+1,6	;(20:31) +6-23 = (3:14)
ALPHA:	SUBI AC+1,23	;(40:72) -23 = (15:47)
R50MUL:	IMULI T,50	;MULTIPLY RESULT BY 50 AND
	ADD T,AC+1	;ADD IN CONVERTED CHARACTER.
	SOJG T1,RAD50L	;DECREMENT COUNT, BRANCH BACK IF NOT DONE.
	JRST (T2)	;EXIT

;BUFCVT IS CALLED WITH DATA WORD IN ARG.
;BUFINS IS CALLED WITH DATA ITEM IN T.  THEY INTERLINK AS
;FOLLOWS:

BUFCVT:	HLRZ T1,ARG	;GET RELOCATION BITS.
	HRRZ T,RELBYT+RELBAS(T1)	;CONVERT TO PUNCHABLE FRM.
	TRZE ARG,400000	;IF INDEXED,
	IORI T,200	;SET INDEX BIT IN RELOCATION BYTE.
	ADDM T,PUNSUM	;ADD INTO CHECKSUM.
	LSH T,^D16	;MOVE INTO PLACE AND
	IORI T,(ARG)	;OR IN ARGUMENT.
BUFINS:	ADDM T,PUNSUM	;ADD RESULT INTO CHECKSUM.
	AOS T1,PUNPSN	;INCREMENT PUNCH POINTER AND
	MOVEM T,PUNBUF-1(T1)	;STORE PUNCH DATA.
	JRST (T2)

RELBYT:	2	;NEG REL
	0	;ABS
	1	;NORMAL
;GRI909/99/919 PUNCH ROUTINES, PAGE 7
;AT LAST, PUNCH A BUFFER FULL OF GOODIES.
;NOTE THAT WE MUST CAREFULLY DISTINGUISH BETWEEN SYMBOL
;AND DATA BLOCKS.

OTPDCN:	MOVE AC,PUNPSN	;IN A DICTIONARY BLOCK, THE NUMBER OF
	IDIVI AC,3	;DATA ITEMS = NUMBER OF BUFFER WORDS/3
	JRST OTPCMN
OTPDAT:	MOVE AC,PUNPSN	;IN A DATA BLOCK, DATA ITEMS= BUFFER WORDS
OTPCMN:	MOVNM AC,PUNCNT	;STORE NEGATIVE ITEM COUNT IN PUNCH COUNT.
	SUBM AC,PUNSUM	;ADD NEGATED COUNT INTO CHECKSUM AND
			;NEGATE CHECKSUM.
	MOVE AC2,PNBFST	;GET BUFFER HEADER AS SWITCH.
	MOVEI AC3,3	;SET INITIAL COUNT OF 3, FOR HEADER.
	MOVEI AC1,PNBFST	;START PUNCHING AT DEADER.
	MOVE AC,PUNPSN	;NUMBER OF WORDS TO PUNCH IS 2ND COUNT.
PUNLP2:	HRLI AC1,(POINT 8,,19)	;SET UP BYTE POINTER.
PUNCMN:	ILDB ARG,AC1	;BYTE POINTER AND GET BYTE.
	PUSHJ P,$WRWRD	;WRITE IT OUT.
	ILDB ARG,AC1	;GET NEXT BYTE.
	PUSHJ P,$WRWRD	;WRITE IT OUT.
	ADDI AC1,1	;ADVANCE TO NEXT BUFFER WORD.
	SOJG AC3,PUNLP2	;DECREMENT OUTSIDE CNT, BR BACK IF NOT DONE.
	SOJL AC,PUNDON	;DONE WITH HEADER, CHECK FOR END OF DATA.
	CAIE AC2,3	;DATA OK.  DATA BLOCK BEING PUNCHED?
	JRST PUNLP2	;NO, KEEP PUNCHING TWO BYTES PER BUFFER WORD.
	HRLI AC1,(POINT 8,,11)	;YES, PUNCH THREE.
	ILDB ARG,AC1
	PUSHJ P,$WRWRD
	JRST PUNCMN

PUNDON:
PUNLDR:	MOVEI AC,^D9	;PUNCH 9 BLANK FRAMES BETWEEN BLOCKS.
	SETZ ARG,
	PUSHJ P,$WRWRD
	SOJG AC,.-1
	POPJ P,		;EXIT.
;GRI-909/99/919 PUNCH ROUTINES, PAGE 8
;INITIALIZATION ROUTINES, IN MANY FLAVORS.

INDCBF:	TLZ AF,QNYDAT	;INITIALIZE ANY DATA FLAG.
	MOVEM ARG,PNBFST	;INITILIZE DICTN BUF, SAVE BLOCK TYPE.
INDCNT:	SETZM ,PUNSUM	;INITIALIZE COUNTS-- CHECKSUM,
	SETZM ,PUNCNT	;COUNT,
	SETZM ,PUNPSN	;BUFFER POSITION.
	JRST (T2)	;EXIT.

INDBBF:	MOVEM ARG,PNBFST
INDBNT:	BFINIT
	MOVE ARG,CURLOC	;STORE LOCATION COUNTER AS FIRST DATA ITEM
	BFCNVT		;OF NEW BUFFER.
	POPJ P,
