	TITLE CONSYN	SUPERVISORY SYNTAX, MIMIC, RELEASE II
	HISEG
;
;CONSYN CONTAINS THE MAIN SYNTAX FOR THE STANDARD MIMIC COMMAND
;SET.  IT IS WRITTEN PRIMARILY IN SM (SYNTAX MACHINE)
;PSEUDO-CODE;  HOWEVER, IMPORTANT OR TIME-CONSTRAINED SECTIONS,
;SUCH AS THE GUT ROUTINES FOR EXAMINATION/MODIFICATION, ARE
;WRITTEN IN PDP-10 CODE.
;
;THE COMPANION MODULE TO CONSYN IS PLUG, WHICH CONTAINS
;SUBROUTINES FOR FRAME/REGISTER/BREAK/FILE TRANSMISSION
;TO/FROM THE USER AND TO/FROM THE VM.  CONSYN ALSO USES THE
;UTILITY SUBROUTINES IN MODULES REDWRT AND CURSRV.
;
	INTERN VERBS,IDCMN,LDRFLS	;LINK FOR SLEEP CHECK
	INTERN WRCRLF,EXMOD,EXMR,FNDRET,VRBTRM	;INTERNS FOR PDP-11 SYNTAX
	INTERN LDFAIL,CONSYN,CIOFAIL,QAJAM

IFN TYMSHR,<	EXTERN BRCP,BRF>
	EXTERN WRTTXT,COMTXT
	EXTERN REDNAM,WRTNAM	;REDWRT ROUTINES
	EXTERN REDINT,WRTINT
	EXTERN REDADR,WRTADR

	EXTERN FNDCON,FNDUNT,FNDREG,FNDAUNT	;CURSRV ROUTINES
	EXTERN NXTCON,NXTUNT,NXTREG,PRVREG,NXTAUNT

	EXTERN SMGR,ATMLST,SYSLSP,ACTPTR,STKSAV,STKINIT	;VARIABLES

	EXTERN .ATTAC,.DETAC	;CIO ROUTINES

	EXTERN REDREG,WRTREG,ANLREG,GETREG,PUTREG	;PLUG ROUTINES
	EXTERN WRTBRK,ANLBRK,GETBRK,PUTBRK
	EXTERN REDFRM,WRTFRM,ANLFRM,GETFRM,PUTFRM
	EXTERN WRTFIL,ANLFIL,GETFIL
	EXTERN INPUT,TRMCR,ACTPNT,USRACT,FNDCR,CINPUT
	EXTERN DOACTS,SAVSUB,GETSUB
	EXTERN DUMPF,DUMPR,DMPUCB,CTYSTAT	;SYNTAX SUPPORT
	EXTERN JOBREN,JOBOPC,.FLAGS,CDMLSP

	AC1==1	;AC ASSIGNMENTS
	AC2==2
	DDM==3
	UCB==4
	FAB==5
	AC3==6
	STA==7
	TMP=16
	STK=17

	SALL
	XDSYN==DSYN
	XSYLDR==SYLDR	;EXTENDED DEFINITIONS
	XDRST==DRST	;USED FOR "RP" TYPE SM-COMMANDS.
	XUNAM==UNAM
	XDNAM==DNAM
	XSYFTCH==SYFTCH
	XSYPC==SYPC
	XSYTIM==SYTIM
	XDATT==DATT
;
;CONSYN, PAGE 2
;THE SYNTAX CAN BE DIVIDED INTO TWO PARTS:
;1) VERB-TYPE COMMANDS:  ATTACH, DETACH, LOAD, ETC.
;2) EXAMINATION/MODIFICATION.
;THE HIGHEST LEVEL SUBROUTINE, CONSYN ITSELF, MERELY TOGGLES
;TWO MAJOR SUBROUTINES, ONE FOR VERBS, THE OTHER FOR EX/MOD.
;
CONSYN:	MFF DMPFLG	;JUST IN CASE, CLEAR "DUMP TO FILE" FLAG.
	LDG CONADR,0,I	;PREPARE TO SEARCH ALL CONTROLLERS FOR SYNTAX.
SYNDLP:	CHM NXTCON,I	;GET ADDRESS OF NEXT CONTROLLER.
	JMP NODSYN,I	;NONE LEFT, NO DEVICE SYNTAX.
	CSS CONADR,RPR,DSYN	;CALL SYNTAX PROCESSOR.
	JMP SYNDLP,I	;FAILURE, TRY NEXT CONTROLLER.
	RSS		;SUCCESS, EXIT.
NODSYN:	CSS VERBS,I	;LOOK FOR VERB-TYPE COMMANDS.
	CSSF EXMOD,I	;NOT FOUND, LOOK FOR EX/MOD.
	RSS		;FOUND, RETURN.
;
;CONSYN, PAGE 3
;VERB PROCESSORS:
;1) BLANK LINE OR REMARK--	DO NOTHING, TAKE SUCCESS EXIT.
;2) RESET--	COMES IN TWO FLAVORS:
;	RESET SYS:	RESET ALL CONTROLLERS
;	RESET <CTLR>[,<CTLR>]*:	RESET NAMED CONTROLLERS
;
VERBS:	ASMR RMK,I	;LOOK FOR REMARK.
	CHMA CONDCR,I	;FOUND, CHECK FOR CR-LF, TYPING CR-LF
			;IF NONE PRESENT, AND SKIP.
	ASMR RETURN,I	;LOOK FOR CR,LF ALONE.
	RSS		;FOUND, TAKE SUCCESS RETURN.
RESET:	ASM RES,I	;NOT FOUND, LOOK FOR "RE" OF RESET.
	JMP ATTACH,I	;NO MATCH, GO TO NEXT COMMAND.
	ABS ET,I	;ABSORB OPTIONAL "SET".
	CSSF VRBTRM,I	;LOOK FOR SPACE OR TAB.
	ASM SYS,I	;LOOK FOR "SYS" AFTER "RESET".
	ASMR ALL,I	;NOT FOUND, TRY FOR "ALL".
	JMP RESALL,I	;RESET SYS OR ALL... GO DO IT.
RESLP:	CHMF REDNAM,I	;NO MATCH, GET CONTROLLER NAME.
	CHMF FNDCON,I	;FIND THE NAMED CONTROLLER.
	CHMN CONADR,RPL,DRST	;TOGGLE ITS RESET ROUTINE.
	ASMR COMMA,I	;LOOK FOR OPTIONAL COMMA.
	JMP RESLP,I	;FOUND, WE MUST HAVE ANOTHER CONTROLLER.
FNDRET:	ASMP RETURN,I	;NOT FOUND, WE MUST HAVE CR-LF, PROPAGATE RESULTS.
;
RESALL:	ASMF RETURN,I	;RESET ALL... LOOK FOR CR-LF
RESASB:	LDG VALUE,0,I	;LOAD ZERO INTO TEMPORARY IN ORDER
	STG VALUE,SYSLSP,RPR,SYTIM	;TO ZERO THE SYSTEM TIMER.
	LDG CONADR,0,I	;INITIALIZE "NXTCON" FOR ALL CTOLRS SEARCH.
RESALP:	CHM NXTCON,I	;GET ADDRESS OF 1ST (NEXT) CONTROLLER.
	RSS		;NONE LEFT, DONE.
	CHMN CONADR,RPL,DRST	;TOGGLE ITS RESET ROUTINE.
	JMP RESALP,I	;CONTINUE.
;
VRBTRM:	MCH SPACE,I	;VERB TERMINATOR... MAY BE EITHER
	MCHF TAB,I	;SPACE OR TAB.
	RSS
;
;CONSYN, PAGE 4
;3) DETACH--	HAS THE SAME VARIANTS AS "RESET", EXCEPT
;		THE PERMISSABLE ARGUMENTS ARE UNITS, NOT CONTROLLERS
;
DETACH:	ASM DET,I	;LOOK FOR "DET" OF DETACH.
	JMP LOAD,I	;NOT FOUND, GO TO NEXT COMMAND.
	ABS ACH,I	;MATCH, ABSORB OPTIONAL "ACH".
	CSSF VRBTRM,I	;LOOK FOR SPACE OR TAB.
	ASM SYS,I	;LOOK FOR DETACH SYS.
	ASMR ALL,I	;NOT FOUND, LOOK FOR DETACH ALL.
	JMP DETALL,I	;DETACH SYS OR ALL... GO DO IT.
DETLP:	CHMF REDNAM,I	;NOT FOUND, LOOK FOR UNIT NAME.
	CHMF FNDAUNT,I	;SEARCH THE ENTIRE VM FOR THE UNIT.
	STG UNTADR,.UCBAD,D	;STORE THE UNIT ADDRESS AS CIO ARGUMENT.
	CSS DETINT,I	;DETACH THE UNIT, SOMEHOW.
	CHMAF CIOFAIL,I	;ERROR... TYPE DIAGNOSTIC AND ALWAYS FAIL.
	ASMR COMMA,I	;OK... LOOK FOR OPTIONAL COMMA.
	JMP DETLP,I	;FOUND, GO GET ANOTHER UNIT.
	JMP FNDRET,I	;NOT FOUND, GO LOOK FOR TERMINAL CR-LF.
;
DETALL:	ASMF RETURN,I	;DETACH ALL... LOOK FOR TERMINAL CR-LF.
DETASB:	LDG CONADR,0,I	;INITIALIZE "NXTAUNT" FOR ALL UNIT SEARCH.
DETALP:	CHM NXTAUNT,I	;GET ADDRESS OF NEXT UNIT.
	RSS		;NONE LEFT, RETURN SUCCESSFULLY.
	STG UNTADR,.UCBAD,D	;STORE UNIT ADDRESS AS CIO ARGUMENT.
	CHMN GETFIL,I	;GET NAME OF ATTACHED FILE, IF ANY.
	SMZ .LEBLK,D	;NAME ZERO? NO FILE, DONT DETACH.
	CSSN DETINT,I	;DETACH THE UNIT, SUPRESSING ERRORS.
	JMP DETALP,I	;CONTINUE
;
DETINT:	SMN CONADR,RP,DATT	;DID THE USER SUPPLY AN ATT/DET ROUTINE?
	CHMP .DETAC,I		;NO, CALL STANDARD RTN, PROPAGATE RESULT.
	CHMP CONADR,RPL,DATT	;YES, CALL USER'S ROUTINE.
;
;CONSYN, PAGE 5
;4) LOAD--	LOAD BINARY FILES.  FORMAT
;	LOAD <FILENAME>[,<FILENAME>]*
;$
;$NOTE THAT THE LOAD COMMAND IS SUBJECT TO FURTHER EXPANSION
;$TO ACCOMODATE MULTIPLE-LOADER VM'S.
;$
LOAD:	ASM LO,I	;LOOK FOR "LO" OF LOAD.
	JMP QUIT,I	;NOT FOUND, GO TO NEXT COMMAND.
	ABS AD,I	;MATCH, ABSORB OPTIONAL "AD".
	CSSF VRBTRM,I	;LOOK FOR SPACE OR TAB.
IFN TYMSHR,<
	LSM		;IF TYMSHARE, HOP TO -10 MODE
	PUSHJ STK,BRCP	;AND WRITE A CHECKPOINT RECORD
	RSM
>
LDRFLS:	LDG VALUE,SYSLSP,RP,SYLDR	;GET THE ADDR OF THE LOADER
	STG VALUE,.UCBAD,D	;UCB AND SET IT UP AS A CIO ARGUMENT.
	STG VALUE,UNTADR,D	;SET IT UP ALSO AS "LDERR" ARGUMENT.
;
LDLP:	CSSF ANLFIL,I	;READ A FILENAME.
	CHM .ATTAC,I	;ATTACH THE FILE TO THE LOADER UCB.
	CHMAF LDFAIL,I	;IF FAILURE, GO ANALYZE AND DO FAIL RETURN.
	LDG CMSGAD,LDMSG,I	;SET UP STANDARD LOADER ERROR MESSAGE.
	CHM SYSLSP,RPL,SYLDR	;CALL THE LOADER.
	CHMAF LDERR,I	;ON ERROR, OUTPUT MESSAGE.
	CHMN .DETAC,I	;LOAD DONE, DETACH THE FILE.
	ASMR COMMA,I	;LOOK FOR OPTIONAL COMMA.
	JMP LDLP,I	;FOUND, GO GET NEXT FILE.
	JMP FNDRET,I	;NOT FOUND, LOOK FOR CRLF.
;
;PAGE 6
;5) QUIT--	LEAVE MIMIC, DETACHING ALL DEVICES, OPTIONALLY
;		SAVING THE STATE OF THE VM.
;	QUIT [<FILENAME>]
;
QUIT:	ASM QU,I	;LOOK FOR "QU" OF QUIT.
	JMP UNIT,I	;NOT FOUND, GO TO NEXT COMMAND.
	ABS IT,I	;MATCH, ABSORB OPTIONAL "IT"
	CSS FNDRET,I	;LOOK FOR RETURN.   NOTE:  WE DO THIS RATHER
			;THAN ASM BECAUSE SM EATS UP SPACES EVEN ON FAILURE,
			;WHILE WE NEED SPACES BEFORE THE FILE NAME.
	CSSF SAVSPC,I	;NOT FOUND, LOOK FOR FILE NAME, DO SAVE.
	CSSN DETASB,I	;DETACH ALL DEVICES.
	LSM		;LEAVE SM-MODE, RETURN TO -10 MODE.
IFE ONLINE+TYMSHR+TIMLTD,<
	EXIT 1,		;TEMPORARY EXIT.
	RSM		;WE RETURN HERE ON MONITOR CONTINUE.
	RSS		;TAKE SUCCESS RETURN.
>
IFN ONLINE,<	EXTERN BILFRC
	PUSHJ STK,BILFRC	;CALL BILLING PROGRAM
	EXIT		;AND EXIT FOR GOOD
>
IFN TYMSHR,<
	PUSHJ STK,BRF	;WRITE FINAL BILLING RECORD AND EXIT.
	EXIT
>
IFN TIMLTD,<	EXTERN CHARGE
	JSP 16,CHARGE	;WRITE FINAL BILL
	JUMP 0,2
	JUMP 0,[ASCII/MIM1/]
	EXIT		;AND EXIT FOR GOOD
>
;
;CONSYN, PAGE 7
;
;6) UNIT--		CHANGE THE DEFAULT UNIT.
;	UNIT COMES IN FOUR FLAVORS:  / ? : _
;	MEANING (AS ALWAYS) OPEN, DISPLAY, INPUT, JAM
;
UNIT:	ASM UN,I	;LOOK FOR "UN" OF UNIT.
	JMP ITIMER,I	;NOT FOUND, GO TO NEXT COMMAND.
	ABS IT,I	;MATCH, ABSORB OPTIONAL "IT".
	CHMF TRMCR,I	;GET TERMINATOR AND REDUCE IT TO AN INDEX.
	JGN TRM,UNTBL-1,XR,TRM	;BRANCH ON TERMINATOR IF NOT 0 (=?)
USLSH:	LDG NAME,DFUADR,RP,UNAM	;/ OR ?... GET THE NAME OF THE
	XHMN WRTTAB,D	;DEFAULT UNIT, TAB OVER,
	CHMN WRTNAM,I	;AND PRINT IT OUT.
	JGZ TRM,CRLFXT,I	;IF ? (TRM=0), GO EXIT.
UCOLON:	XHMN WRTTAB,D	;/ OR :... TAB OVER
	CHMN INPUT,I	;AND GET FRESH INPUT.
USTAR:	ASMR RETURN,I	;IS INPUT CR-LF?
	RSS		;YES, DONT CHANGE DEFAULT UNIT, JUST EXIT.
	CHMF REDNAM,I	;NO, READ THE NEW NAME.
	ASMF RETURN,I	;NAME MUST TERMINATE IN CR-LF.
	CHMF FNDAUNT,I	;SEARCH ALL UNITS FOR THIS NAME.
	STG UNTADR,DFUADR,D	;THIS SEARCH SETS UP THE CONTROLLER AND
	STG CONADR,DFCADR,D	;ADDRESSES OF THE NAMED UNIT.  SAVE
			;THESE ADDRESSES AS THE DEFAULT CTLR-UNIT.
	RSS		;DONE.
;
CRLFXT:	XHMN WRCRLF,D	;?  ...SIMULATE NO INPUT BY TYPING CR-LF.
	RSS		;RETURN.
;
UNTBL:	USLSH		;TERMINATOR BRANCH TABLE:  1=/
	USTAR		;2=_
	UCOLON		;3=:
;
;CONSYN, PAGE 8
;7) THE RENAME COMMAND HAS BEEN DECOMMITTED.
;   INSTEAD, WE HAVE THESE NEW COMMANDS.
;7A-B) TIMER/ITIMER-- SET ABSOLUTE/INCREMENTAL TIME TRAP
;	TIMER/ITIMER <TIME VALUE>(CR)
;
ITIMER:	ASM 'ITI',I	;LOOK FOR 'ITI' OF ITIMER.
	JMP TIMER,I	;NOT FOUND.
	LDG NAME,SYSLSP,RPR,SYTIM	;GET SYSTEM TIMER AS BASE
	JMP TIMCMD,I	;FOR TRAP.
;
TIMER:	ASM 'TI ',I	;LOOK FOR 'TI' OF TIMER.
	JMP ASCIMG,I	;NOT FOUND.
	LDG NAME,0,I	;USE ZERO AND BASE FOR TRAP.
TIMCMD:	ABS 'MER',I	;FINISH REST OF COMMAND.
	CSSF VRBTRM,I
	LDG NRADIX,^D10,I	;SET UP RADIX 10, WIDTH 2^35-1
	LDG NBITS,^D35,I	;AND LOOK FOR AN INTEGER.
	CHMF REDINT,I
	ASMF RETURN,I	;LOOK FOR TERMINATING (CR).
	LDG .UCBAD,DMPUCB,I	;SET UP CIO ARGUMENT AND
	CHMN .CNCEL,I	;AND CANCEL ANY CURRENT TRAP.
	JGZ VALUE,ALLTHR,I	;IF TIME WAS ZERO, JUST CANCEL.
	ADG VALUE,NAME,D	;OTHERWISE, ADD BASE TO SUPPLIED
	STG VALUE,DMPUCB+UTIM,D	;TIME AND STORE.
	CHMN .ACTVT,I	;ACTIVATE TRAP UCB.
ALLTHR:	RSS		;DONE.
;
;WHEN THE TIME TRAP EXPIRES, WE GET A PSEUDO INTERRUPT HERE:
;
	EXTERN .ACTVT,.CNCEL,INTSTP
	INTERN DMPSRV
DMPSRV:	MOVEI TMP,TIMMSG	;SET UP MESSAGE FOR TIMEOUT.
	MOVEM TMP,CMSGAD
	SETZM ,BRKBLK+BACT	;INDICATE NO ACTIONS.
	MOVE TMP,@CDMLSP	;GET ADDR OF CPU DDM AND
	HRRZ TMP,DUCB(TMP)	;EXTRACT UCB ADDRESS.
	HRRZM TMP,BRKBLK+BUCB	;STORE IN TRAP BLOCK.
	MOVE TMP,SYSLSP		;FROM THE SYSTEM LIST, EXTRACT
	MOVE TMP,SYPC(TMP)	;ADDRESS OF SYSTEM PC AND
	LDB TMP,RPTR(TMP)	;USE BYTE POINTER TO GET PC.
	MOVEM TMP,BRKBLK+BFRM	;STORE AS TRAP ADDRESS.
	PJRST INTSTP		;GO SPRING TRAP.
;
TIMMSG:	ASCIZ /TIMEOUT AT /
;
;CONSYN, PAGE 8A
;7C-7D) ASCII/IMAGE-- SET MODE ON 7/36 BIT CONTROLLERS.
;	ASCII/IMAGE <CONTROLLER NAME>
;THIS COMMAND IS USED TO SWITCH THE PTR/PTP OR TTI/TTO, ETC,
;FROM 7 BIT FRAMES TO 36 BIT FRAMES AND BACK AGAIN.
;
ASCIMG:	ASMR TASCII,D	;LOOK FOR "ASCII" COMMAND.
	JMP PASCII,I	;FOUND, GO PROCESS.
	ASM TIMAGE,D	;LOOK FOR "IMAGE" COMMAND.
	JMP START,I	;NOT FOUND, TRY START.
PIMAGE:	LDG VALUE,^D36,I	;IMAGE, DESIRED FRAME SIZE IS 36.
	LDG SVAL,7,I	;ALTERNATE WOULD BE 7 BITS.
	JMP FNDFRS,I
;
PASCII:	LDG VALUE,7,I	;ASCII, DESIRED FRAME SIZE IS 7.
	LDG SVAL,^D36,I	;ALTERNATE WOULD BE 36.
FNDFRS:	CHMF REDNAM,I	;LOOK FOR CONTROLLER NAME.
	CHMF FNDCON,I	;FIND CONTROLLER.
	ASMF RETURN,I	;LOOK FOR TRAILING CR.
	LSM		;OFF TO -10 MODE FOR GORY WORK.
	MOVE AC2,CONADR	;GET CONTROLLER ADDR AND
	HRRZ AC1,DSIZ(AC2)	;EXTRACT FRAME SIZE.
	CAMN AC1,VALUE	;SAME AS DESIRED FRAME SIZE?
	JRST NOCHGE	;THEN OK.
	CAME AC1,SVAL	;NO, SAME AS DESIRED ALTERNATE>
	JRST FAILCM	;IF NOT, FAIL.
	MOVE AC1,VALUE	;SET DESIRED FRAME SIZE INTO CONTROLLER.
	HRRM AC1,DSIZ(AC2)
	JRST NOCHGE	;BACK TO SM AND RETURN
;
FAILCM:	RSM		;BACK TO SM
	RSRN		;DIE.
;
TASCII:	SIXBIT /ASCII/
TIMAGE:	SIXBIT /IMAGE/
;
;CONSYN, PAGE 9
;8) START--	RESET VM, GO TO FETCH PHASE.
;9) RUN--	GO TO FETCH PHASE.
;10) GO--	RETURN TO VM AS CALLED.
;11) CONTINUE--	SAME AS GO
;
;NOTE THAT START/RUN ALLOW THE USER TO SPECIFY A PC VALUE:
;	START/RUN [<VALUE>]
;
START:	ASM ST,I	;LOOK FOR "ST" OF START COMMAND.
	JMP DORUN,I	;NOT FOUND, GO TO NEXT COMMAND.
	ABS ART,I	;GET RID OF OPTIONAL "ART".
IFN TYMSHR,<
	LSM		;OUT TO -10 MODE TO WRITE
	PUSHJ STK,BRCP	;AN INTERMEDIATE CHECKPOINT RECORD
	RSM
>
	CSS FNDRET,I	;LOOK FOR CR-LF TERMINATOR.
	CSSF SETPC,I	;NOT FOUND, LOOK FOR PC VALUE INSTEAD.
	CSSN RESASB,I	;COMMAND OK, RESET THE WHOLE MACHINE.
	JMP BKTOVM,I	;GO BACK TO THE VM.
;
DORUN:	ASM RUN,I	;LOOK FOR "RUN".
	JMP CONTIN,I	;NOT FOUND, GO TO NEXT COMMAND.
	CSS FNDRET,I	;LOOK FOR CR-LF TERMINATOR.
	CSSF SETPC,I	;NOT FOUND, BETTER FIND PC VALUE INSTEAD.
BKTOVM:	MFN QGO		;TURN ON "GO COMMAND OK" FLAG.
	LSM		;DROP BACK TO -10 MODE.
	PUSHJ STK,CLNUP	;CLEAN UP THE TELETYPE MODES, AS NEEDED.
	MOVE STK,STKINIT	;PURGE THE STACK OF EVERYTHING.
	CLRBFI		;PURGE THE MONITOR BUFFER.
	MOVE TMP,SYSLSP	;GET ADDRESS OF SYSTEM LIST.
	JRST @SYFTCH(TMP)	;GO TO FETCH PHASE.
;
CONTIN:	ASM GO,I	;LOOK FOR "GO".
	JMP CONT1,I	;NOT FOUND, GO TO NEXT COMMAND.
CONT2:	ASMF RETURN,I	;LOOK FOR TERMINATING CR-LF.
	JFF QGO,NOGO,I	;IF "GO" FLAG IS OFF, DISBAR GO.
	LSM		;GO OK... BACK TO -10 MODE.
	PUSHJ STK,CLNUP	;CLEANUP THE TELETYPE MODES.
	MOVE STK,STKSAV	;PURGE THE STACK.
	POPJ STK,	;RETURN TO VM.
;
CONT1:	ASMF CON,I	;LOOK FOR "CON" OF CONTINUE.
			;IF NOT FOUND, FAIL, SINCE CONTINUE IS LST VERB COMMAND.
	ABS [SIXBIT /TINUE/],D	;ABSORB OPTIONAL "TINUE".
	JMP CONT2,I	;CONTINUE IS TREATED EXACTLY LIKE GO.
;
SETPC:	CSSF VRBTRM,I	;LOOK FOR VERB TERMINATOR.
	LDG REGADR,SYSLSP,RP,SYPC	;GET PC VALUE... LOAD ADDRESS
			;OF SYSTEM PC INTO REGADR, SO WE CAN FIND IT.
	CHMF ANLREG,I	;ANALYZE THE INPUT.
	ASMF RETURN,I	;LOOK FOR TERMINATING RETURN.
	CHMN PUTREG,I	;STORE THE INPUT.
	RSS		;TAKE SUCCESS RETURN.
;
NOGO:	XHMN DONOGO,D	;NO GO ALLOWED... TYPE NASTY MESSAGE.
	RSS		;FAKE A SUCCESS RETURN.
;
DONOGO:	OUTSTR MNOGO
MNOGO:	ASCIZ /NO CONTINUE ADDR
/
;
CLNUP:	SETOB TMP,CTYSTAT	;GET STATUS OF USER'S TELETYPE
IFN LEVELD,<
	WAKE TMP,	;CLEANUP ANY WAKE/HIBERNATE TROUBLES.
	 JFCL
	MOVSI TMP,4	;SET UP HIBERNATE CODE SO THAT
	HIBER TMP,	;ONLY THIS JOB CAN WAKE ITSELF.
	 JFCL
>
IFN CCTRAP,<	EXTERN INTBLK
	SETZM INTBLK+2	;RE-ENABLE ^C TRAPPING
>
	TTCALL 6,CTYSTAT	;AND SAVE.
	MOVE TMP,CTYSTAT	;FOR THE MOMENT THOUGH,
IFN TYMSHR,<
	TLO TMP,10002>	;SET ^S, ^B SWITCHES
IFE TYMSHR,<
	TLO TMP,6>
	TTCALL 7,TMP
	MOVSI TMP,WRUFLG	;CLEAR STOP FLAG BEFORE STARTING.
	ANDCAM TMP,.FLAGS
	MOVEI TMP,SIMREN	;SET UP SPECIAL RE-ENTRY ROUTINE FOR
	MOVEM TMP,JOBREN	;SIMULATION.
	MOVE TMP,SYSLSP	;GET ADDRESS OF SYSTEM LIST.
	PJRST @SYBLD(TMP)	;CALL .BLDUP.
;
;IF THE USER TYPES ^C+ REENTER DURING SIMULATION, HE WILL GET
;A CLEAN STOP, AS THE REENTRY ROUTINE WILL SET THE STOP FLAG
;AND RESUME SIMULATION.
;
SIMREN:	PUSH STK,TMP	;SAVE AC-16.
	MOVSI TMP,WRUFLG	;SET STOP FLAG
	IORM TMP,.FLAGS
	POP STK,TMP	;RESTORE AC-16 AND
	JRST @JOBOPC	;RESUME SIMULATION.
;
;CONSYN, PAGE 10
;
;FROM HERE ON IN, THINGS GET RATHER MESSY, SINCE WE HAVE A WHOLE
;BUNCH OF COMMANDS WHICH BASICALLY WORK LIKE EX/MOD.  FOLLOW
;THE CODE CLOSELY, WADE THROUGH THE SUBROUTINES, AND YOU MAY
;BE ABLE TO FOLLOW WHAT IS GOING ON.  I CERTAINLY WISH YOU THE
;BEST OF LUCK.
;
;12) BREAK AND 13) SEARCH USE ALMOST THE EXACT SAME LOGIC AS
;EX/MOD;  HENCE, THEY ARE ALL PRESENTED TOGETHER, IN ONE SOGGY LUMP.
;
EXMOD:	CSSN CUANAL,I	;EX/MOD... GET THE CTLR-UNIT HIERARCHY.
	CSSF ATANAL,I	;ANALYZE THE FRAME/REGISTER SET TO BE USED.
	CHMF TRMCR,I	;GET THE TERMINATOR AND REDUCE IT TO AN INDEX.
	LDG ATMF,EXMF,I	;SET UP THE FRAME/REGISTER TRANSCEIVERS
	LDG ATMR,EXMR,I	;FOR THE EXECUTION OF THE FRAME/
			;REGISTER SET [CALLED THE ATOM LIST]
CHKSTR:			;IN CASE TERMINATOR IS JAM (_),
	LDG VALUE,[-1],D	;MARK VALUE AS UNSCANNED.
ATMLD:	LDG CNPLUG,ATMXCT,I	;SET UP THE ATOM-LIST DECIPHERER
			;FOR THE CTLR-UNIT HIERARCY DRIVER.
	CSSP CNLOOP,I	;CALL THE HIERARCHY DRIVER.  FOR EACH 
			;CONTROLLER AND UNIT IN THE HIERARCHY, IT CALLS THE
			;ATOM LIST DECODER, WHICH IN TURN TOGGLES THE TRANSCEIVERS
			;FOR EVERY ATOM IN THE LIST.
			;(ULP!)
;
;PERHAPS IT WILL MAKE MORE SENSE WITH A SECOND EXAMPLE:
;
BREAK:	ASM BR,I	;LOOK FOR THE "BR" OF BREAK.
	JMP SEARCH,I	;NOT FOUND, GO TO NEXT COMMAND.
	ABS EAK,I	;MATCH, ABSORB OPTIONAL "EAK".
	CSSF VRBTRM,I	;LOOK FOR SPACE OR TAB.
	CSSN CUANAL,I	;GET THE HIERARCHY.
	CSSF ATANAL,I	;GET THE ATOM LIST.
	CHMF TRMCR,I	;GET THE TERMINATOR.
	SGD TRM,2,I	;WAS TERMINATOR JAM (_)?
	CHMF ANLBRK,I	;YES, PROCESS BREAK INPUT.
	LDG ATMF,BRKF,I	;NO, SET UP FRAME TRANSCEIVER.
	LDG ATMR,FAIL10,I	;BREAKS ON REGS ARE NOT ALLOWED.
	JMP ATMLD,I	;GO DO COMMAND.
;
;
;CONSYN, PAGE 11.
;IF THAT DIDNT HELP, SEARCH IS JUST GOING TO MAKE THINGS WORSE.
;
;	SEARCH <FRAME SET> FOR <CONDITION><TERMINATOR>
;NOTE THAT ; CAN BE USED AS A SUBSTITUTE FOR "FOR".
;
SEARCH:	ASM SEA,I	;ABSORB "SEA" OF SEARCH.
	JMP ACTION,I	;NOT FOUND, GO TO NEXT COMMAND.
	ABS RCH,I	;MATCH, ABSORB OPTIONAL "RCH".
	CSSF VRBTRM,I	;LOOK FOR PSACE OR TAB.
	CSSN CUANAL,I	;GET THE HIERARCHY.
	CSSF ATANAL,I	;GET THE ATOM LIST.
	ASM FOR,I	;LOOK FOR TERMINATOR "FOR".
	ASMF SEMCOL,I	;NOT FOUND, LOOK FOR ";".
	LDG SBOOL,0,I	;OK... SET DEFAULT BOOLEAN OF "IOR 0".
	LDG SMSK,0,I
;
;WE ARE LOOKING FOR THE SEARCH <CONDITION> PHRASE:
;<CONDITION>::= [[<BOOLEAN><VALUE>]<RELATION>]<VALUE>
;<BOOLEAN>::=IOR/XOR/AND
;<RELATION>::=EQ/NE/LE/GE/GT/LT/>/</=
;
	ASMR PIOR,I	;LOOK FOR "OR".
	JMP PIORC,I	;FOUND, SET SBOOL=0.
	ASMR PAND,I	;NOT FOUND, LOOK FOR "AND".
	JMP PANDC,I	;AND FOUND, SET SBOOL=1.
	ASM PXOR,I	;NOT FOUND, LOOK FOR "XOR".
	JMP NOBOOL,I	;NO BOOLEAN FOUND, GO LOOK FOR RELATION.
	ADG SBOOL,1,I
PANDC:	ADG SBOOL,1,I
PIORC:	CHMF ANLFRM,I	;GET BOOLEAN MASK.
	STG VALUE,SMSK,D	;SAVE ANALYZED VALUE.
	CSSF REDRLN,I	;GET THE RELATION AND REDUCE IT TO AN INDEX.
GETVAL:	CHMF ANLFRM,I	;GET THE RELATIONAL VALUE AND SAVE IT.
	STG VALUE,SVAL,D
	CHMF TRMCR,I	;GET THE COMMAND TERMINATOR
	LDG ATMF,SCVF,I	;SET UP THE FRAME REGISTER TRANSCEIVERS.
	LDG ATMR,SCVR,I
	MFN QMULT	;SET "MULTIPLE" ITEM FLAG.
	JMP CHKSTR,I	;GO PROCEED AS IN NORMAL EX/MOD
;
NOBOOL:	CSS REDRLN,I	;NO BOOLEAN... LOOK FOR RELATION.
	LDG SRELN,0,I	;NO RELATION EITHER... SET RELATION "=".
	JMP GETVAL,I	;GO GET RELATIONAL VALUE.
;
REDRLN:	LDG SRELN,0,I	;REDRLN REDUCES THE RELATION STRING TO AN INDEX.
	SMZRF RELSTR,XD,SRELN	;HAVE WE REACHED END OF TABLE (SIGNIFIED
			;BY THO STRING)?
			;YES, FAIL.
	ASMR RELSTR,XD,SRELN	;NO, DO WE HAVE DESIRED ENTRY?
	RSS		;YES, SRELN HOLDS INDEX, RETURN.
	ADG SRELN,1,I	;NO, ADVANCE INDEX IN TABLE.
	JMP REDRLN+1,I	;GO TRY AGAIN.
;
RELSTR:	SIXBIT /=/	;0
	SIXBIT />/	;1
	SIXBIT /</	;2
	SIXBIT /NE/	;3
	SIXBIT /GE/	;4
	SIXBIT /LE/	;5
	SIXBIT /EQ/	;6
	SIXBIT /GT/	;7
	SIXBIT /LT/	;10
	Z
;
;CONSYN, PAGE 12
;14) ATTACH WORKS SOMEWHAT LIKE EX/MOD, EXCEPT ITS BASIC ITEM
;IS THE UNIT, NOT THE FRAME, AND IT DISPLAYS FILE INFORMATION,
;NOT NUMBERS.  ITS FORM, MORE OR LESS:
;	ATTACH <HIERARCHY SET><TERMINATOR>[<FILENAME>]
;
ATTACH:	ASM ATT,I	;LOOK FOR "ATT" OF ATTACH.
	JMP BREAK,I	;NOT FOUND, GO TO NEXT COMMAND.
	ABS ACH,I	;ABSORB OPTIONAL "ACH".
	CSSF VRBTRM,I	;LOOK FOR SPACE OR TAB.
	CSSF CHKALL,I	;GET THE HIERARCHY SPECIFICATION.
	CHMF TRMCR,I	;GET THE TERMINATOR.
	SGD TRM,2,I	;IS THE TERMINATOR JAM (_)?
	CSSF ATTFIL,I	;YES, PICK UP THE FILE NAME.
	LDG CNPLUG,ATCVR,I	;SET UP  CNLOOP TO TOGGLE THE
			;PROPER CONTROLLERS AND UNITS.
	CSSP CNLOOP,I	;DO ATTACH COMMAND.
;
ATTFIL:	LDG .LEBLK,0,I	;GET FILE NAME... LOOK FOR "CTY".
	ASM CTY,I	;IF FOUND, SET FILE NAME OF ZERO.
	CSSF ANLFIL,I	;IF NOT FOUND, GET A TRUE FILE NAME.
	ASMP RETURN,I	;IN ANY CASE, GET CR-LF TERMINATOR.
;
;CONSYN, PAGE 13
;AS WE ALL KNOW, PAGE 13 IS UNLUCKY, AND ANY COMMAND PUT ON THIS
;PAGE WOULD PROBABLY BE FULL OF BUGS, SO THE HELL WITH IT.
;
;
;CONSYN, PAGE 14
;ALL THE HARD WORK IN THE EX/MOD-LIKE COMMANDS (SEARCH, BREAK, ETC)
;IS DONE BY FOUR SUBROUTINES:
;CUANAL:	CONTROLLER UNIT ANALYSIS
;CNLOOP:	CONTROLLER-UNIT LOOP SUPERVISOR
;ATANAL:	ATOM LIST ANALYSIS
;ATMXCT:	ATOM LIST LOOP SUPERVISOR
;
;CUANAL ANALYZES THE POSSIBLE CONTROLLER-UNIT HIERARCHIES
;AND SETS UP "CONADR" AND "UNTADR" ACCORDINGLY:
;CONTROLLER	CONADR= CONTROLLER ADDRESS, UNTADR= 0
;[CONTROLLER] UNIT	CONADR= CTLR ADDRESS, UNTADR= UNIT ADDRESS
;---		CONADR= DEFAULT CTLR, UNTADR= DEFAULT UNIT, QDFAULT= 1
;
;NOTE THAT "CHKSYS/ALL" CAN ALSO SET "QMULT" (MULTIPLE ELEMENT COMMAND
;FLAG) IS THE CASE OF SYS OR ALL.
;
;CUANAL TAKES A SKIP RETURN IF AN EXPLICIT HIERARCHY IS FOUND
;AND A NON-SKIP RETURN IF THE DEFAULT UNIT IS FOUND.
;
CHKALL:	ASM ALL,I	;LOOK FOR "ALL". IF NOT FOUND,
CHKSYS:	ASMR SYS,I	;LOOK FOR "SYS".
	JMP SETSYS,I	;SYS/ALL, GO SET THEM UP.
CUANAL:	MFF QDFAULT	;ASSUME NOT DEFAULT AND
	MFF QMULT	;NOT A MULTIPLE COMMAND.
	LDG UNTADR,0,I	;ZERO THE UNIT FIELD FOR NOW.
	CHM REDNAM,I	;LOOK FOR A NAME.
	JMP STDFLT,I	;NO NAME AT ALL, MUST MEAN DEFAULT UNIT.
	CHMR FNDCON,I	;NAME FOUND, IS IT A CONTROLLER?
	JMP CNFND,I	;YES.
	CHMR FNDAUNT,I	;NO, IS IT A UNIT?
	RSS		;YES, EXIT, CONADR AND UNTADR ARE PROPERLY SET UP.
STDFLT:	LDG UNTADR,DFUADR,D	;NOT A CTLR OR UNIT...
	LDG CONADR,DFCADR,D	;USER MUST INTEND THE DEFAULT UNIT.
	MFN QDFAULT	;SET ADDRESSES AND FLAGS ACCORDINGLY.
FAIL:	RSRN		;RESTORE SYNTAX POINTER AND EXIT.
;
CNFND:	CHM REDNAM,I	;CTLR FOUND, LOOK FOR ANOTHER NAME.
	RSS		;NONE FOUND, PROBABLY A REGISTER.
	CHM FNDUNT,I	;NAME FOUND, IS IT A UNIT UNDER CURRENT CTLR?
	RSP		;NO, BACK SYNTAX POINTER UP OVER THIS NAME.
	RSS		;YES, EXIT, ADDRESSES ARE SET UP.
;
;CNLOOP ACTS ON THE INFORMATION ESTABLISHED BY CUANAL.  FOR EACH
;CTLR AND UNIT SPECIFIED, IT CALLS A SUBROUTINE (POINTED TO BY
;CNPLUG).
;
CNLOOP:	SGS TRM,2,I	;IS THE TERMINATOR JAM(_)?
	CHMN MULTCR,I	;NO, TYPE CR-LF IF MULTIPLE.
;
CNLPPR:	JGN UNTADR,ONEUNT,I	;IF A UNIT ADDRESS IS SPECIFIED,
			;CALL PLUGGED ROUTINE ONCE.
	JGN CONADR,ALLUNT,I	;IF A CTLR ADDRESS IS SPECIFIED,
			;CALL PLUGGED ROUTINE FOR FIRST UNIT IN THAT CTLR.
ALLCON:	CHM NXTAUNT,I	;OTHERWISE, CALL ROUTINE FOR EVERY UNIT
			;OF EVERY CTLR.
	RSS		;WHEN OUT OF CTLRS, EXIT.
	CHMF CNPLUG,R
	JMP ALLCON,I
;
ALLUNT:	CHMR NXTUNT,I	;FIRST UNIT IN CONTROLLER...GET FIRST UNIT.
ONEUNT:	CHMF CNPLUG,R	;SINGLE UNIT... CALL THE PLUGGED ROUTINE.
	RSS		;DONE.
;
SETSYS:	MFN QMULT	;IF ALL/SYS FOUND, SET UP SPECIAL CONDITIONS:
	MFF QDFAULT	;MULTIPLE, NOT DEFAULT,
	LDG CONADR,0,I	;NO UNIT AND NO CONTROLLER.
	LDG UNTADR,0,I
	RSS
;
;CONSYN, PAGE 15
;ATANAL REDUCES A COMBINED LIST OF FRAMES AND REGISTERS TO A
;STANDARDIZED SET OF ENTRIES IN TABLE "ATMLST".  ENTRY FORMS:
;FRAME SET ITEM:	WORD 1	BEGINNING FRAME
;			WORD 2	ENDING FRAME
;REGISTER ITEM:		WORD 1	REGISTER NAME
;ALL FRAMES ITEM:	WORD 1	-1
;ALL REGISTERS ITEM:	WORD 1	-2
;
;WE CAN DISTINGUISH BETWEEN REGNAMES AND FRAMES BECAUSE OF THE FOLLOWING:
;THE HIGH ORDER BIT OF A REGNAME IS THE HIGH ORDER BIT OF AN
;ALPHABETIC SIXBIT CHAR, HENCE IT IS ALWAYS 1.
;THE HIGH ORDER BIT OF AFRAME# IS THE HIGH ORDER BIT OF A
;24 BIT INTEGER, HENCE IT IS ALWAYS ZERO.
;
ATANAL:	LDG ATMPTR,ATMLST,I	;INITIALIZE THE LIST POINTER.
ANALP:	CHM REDADR,I	;LOOK FOR AN ADDRESS.
	JMP CHKNAM,I	;NOT FOUND, TRY FOR A NAME.
	STG VALUE,ATMPTR,R	;FOUND STORE FRAME# AS LOWER LIMIT
	ADG ATMPTR,1,I	;AND, TENTATIVELY, AS UPPER LIMIT AS WELL.
	STG VALUE,ATMPTR,R
	ASM MINUS,I	;LOOK FOR -.
	JMP SINGLF,I	;NOT FOUND, THEN ONLY SINGLE FRAME.
	CHMF REDADR,I	;FOUND, WE BETTER HAVE ANOTHER ADDRESS.
	CHMF CHPAIR,I	;SECOND ADDRESS MUST BE > FIRST.
SETMUL:	MFN QMULT	;FRAME SET PAIR, SET "MULTIPLE" FLAG.
	STG VALUE,ATMPTR,R	;STORE SECOND ADDRESS.
SINGLF:	ADG ATMPTR,1,I	;ADVANCE LIST PTR.
	ASM COMMA,I	;LOOK FOR ITEM SEPERATOR-- ,
	RSS		;NOT FOUND, DONE.
	MFN QMULT	;FOUND, SET "MULTIPLE" FLAG.
	JMP ANALP,I	;GO GET MORE INPUT
;
CHKNAM:	ASMR ALL,I	;NOT AN ADDRESS... IS ITEM "ALL"?
	JMP STALL,I	;YES.
	ASMR [SIXBIT /STATE/],D	;NO, IS IT "STATE"?
	JMP STATE,I	;YES.
	CHMF REDNAM,I	;NO, HAD BETTER BE A NAME.
	STG NAME,ATMPTR,R	;STORE NAME IN LIST.
	JMP SINGLF,I
;
STALL:	LDG VALUE,[-1],D	;ALL... STORE -1 IN LIST.
	JMP SETMUL,I
;
STATE:	LDG VALUE,[-2],D	;STATE... STORE -2 IN LIST.
	JMP SETMUL,I
;
CHPAIR:	MOVE AC1,@ATMPTR	;GET THE FIRST VALUE.
	CAMGE AC1,VALUE	;IS IT < SECOND VALUE?
CPOPJ1:	AOS ,0(STK)	;YES, SUCCESS.
FAIL10:	POPJ STK,	;NO, FAILURE
;
;CONSYN, PAGE 16
;ATMXCT IS TO ATANAL AS CNLOOP IS TO CUANAL:
;IT IS A LOOP CONTROLLER, WORKING OFF THE ATOM LIST.
;ATMXCT HAS TWO PLUGGABLE ROUTINES:
;ATMF	--POINTS TO ROUTINE TO PROCESS FRAMES.  FRAME# IS "FRMNUM".
;ATMR	--POINTS TO ROUTINE TO PROCESS REGS.  REG NAME IN "NAME".
;
ATMXCT:	MOVEI AC1,ATMLST	;A PDP-10 ROUTINE, FIRST OF MANY.
	MOVEM AC1,ATMTMP	;START SCAN AT TOP OF ATOM-LIST.
;
ATMLP:	SKIPN ,QDFAULT	;ARE WE WORKING ON DEFAULT UNIT?
	JRST NODFLT	;NO.
	MOVE AC1,DFUADR	;YES, SET UP THE DEFAULT UNIT AND
	MOVEM AC1,UNTADR	;DEFAULT CONTROLLER (AGAIN)
	MOVE AC1,DFCADR	;SINCE THEY MAY HAVE BEEN CLOBBERED IN
	MOVEM AC1,CONADR	;LOOKING FOR A REGISTER NAME.
NODFLT:	MOVE AC1,@ATMTMP	;GET THE NEXT ITEM.
	JUMPL AC1,REGALL	;IF BIT 0= -1, THEN MUST BE REG NAME
			;OR STATE OR ALL.  GO PROCESS.
	MOVEM AC1,LLIMIT	;OTHERWISE, SAVE AS LOWER LIMIT
	AOS ,ATMTMP	;OF FRAME# PAIR.  GET THE NEXT ATOM-LIST
	MOVE AC1,@ATMTMP	;ENTRY AND SAVE AS UPPER LIMIT.
FRMUL:	MOVEM AC1,ULIMIT
;
FRMLP:	MOVE AC1,LLIMIT	;SET UP "FRMNUM" FOR CALL ON PLUGGED ROUTINE.
	MOVEM AC1,FRMNUM
	PUSHJ STK,@ATMF	;CALL ROUTINE.
	POPJ STK,	;FAILURE, TAKE FAIL RETURN.
	AOS AC1,LLIMIT	;SUCCESS, ADD 1 TO LOWER LIMIT.
	CAMG AC1,ULIMIT	;NEW LOWER LIMIT> UPPER LIMIT?
	JRST FRMLP+1	;NO, GO BACK AND DO NEXT FRAME.
ATCMP:	AOS AC1,ATMTMP	;YES, ADVANCE PTR IN ATOM LIST.
	CAMGE AC1,ATMPTR	;ARE WE AT END OF LIST?
	JRST ATMLP	;NO, GET NEXT ITEM.
	JRST CPOPJ1	;YES, TAKE SUCCESS (SKIP) RETURN.
;
REGALL:	CAMN AC1,[-1]	;REG, STATE OR ALL... IS ITEM -1?
	JRST DOALL	;YES, ALL FRAMES.
	CAMN AC1,[-2]	;NO, IS ITEM -2?
	JRST DOSTATE	;YES, ALL REGISTERS.
	MOVEM AC1,NAME	;NO, ASSUME IT IS A REG NAME.
	PUSHJ STK,FNDREG	;IS IT A REGISTER UNDER CURRENT CTLR?
	JRST CHKDFLT	;NO.
DOREG:	PUSHJ STK,@ATMR	;YES, TOGGLE THE INDICATED ROUTINE.
	POPJ STK,	;FAILURE, BOMB OUT.
	JRST ATCMP	;SUCCESS, GO CHECK FOR END OF ATOM LIST.
;
CHKDFLT:	SKIPN ,QDFAULT	;REG NOT FOUND... UNDER DEFAULT UNIT?
	POPJ STK,	;NO, THEN GIVE UP.
	CLEARM ,CONADR	;YES, PERMORM ALL CTLRS SEARCH FOR REGISTER:
ALRSCH:	PUSHJ STK,NXTCON	;ADVANCE TTO FIRST (NEXT) CTLR.
	POPJ STK,	;NONE LEFT, AGAIN, TRULY DIE.
	PUSHJ STK,FNDREG	;DOES REG EXIST UNDER THIS CTLR?
	JRST ALRSCH	;NO, TRY NEXT CTLR.
	JRST DOREG	;YES, GO DO REG ACTION.
;
DOSTATE:	CLEARM ,REGADR	;STATE... ALL REGS UNDER CURRENT CTLR.
	PUSHJ STK,NXTREG	;GET THE NEXT REGISTER.
	JRST ATCMP	;NONE LEFT, GO ON TO NEXT LIST ITEM.
	PUSHJ STK,@ATMR	;REG FOUND, DO ACTION.
	POPJ STK,	;FAILURE, BLITZ OUT.
	JRST DOSTATE+1	;SUCCESS, GO TO NEXT REGISTER.
;
DOALL:	CLEARM ,LLIMIT	;FOR ALL, SET LOWER LIMIT OF ZERO.
	MOVE UCB,UNTADR	;TO GET THE UPPER LIMIT...
	HLRZ STA,USTAT(UCB)	;GET THE UNIT STATUS.
	TRNN STA,QDSK	;IS IT ATTACHED TO DISK?
	JRST FXCAP	;NO, IT MAY BE FIXED CAPACITY.
	HLRZ FAB,UFAB(UCB)	;GET FAB ADDRESS FROM UCB.
	MOVE AC1,FNFRM(FAB)	;GET FAB NFRMS AS UPPER LIMIT.
	SOJA AC1,FRMUL
;
FXCAP:	TRNN STA,QFIX	;IS DEVICE FIXED CAPACITY?
	POPJ STK,	;NO, FAIL.
	MOVE DDM,CONADR	;GET DDM ADDRESS AND
	MOVE AC1,DNFRM(DDM)	;YES, GET DDM NFRMS.  HIGHEST FRAME
	SOJA AC1,FRMUL	;IS THIS #-1.
;
;CONSYN, PAGE 17
;THE SUBROUTINES PLUGGED INTO ATMXCT ARE TYPICALLY TRANSCEIVERS:
;THAT IS, ON THE BASIS OF THE ITEM SPECIFIED AND THE TERMINATOR,
;THEY DISPLAY, OPEN, INPUT, OR JAM WITH/TO/BY THE USER.
;
;EXMR IS THE TRANSCEIVER FOR REGISTERS IN EX/MOD, AND IS A NICE MODEL.
;IT RECEIVES AS ARGUMENT "REGADR", REGISTER ADDRESS, AND "TRM",
;TERMINATOR INDEX.
;
BADR:	OUTSTR MBDVAL	;ERROR... PRINT ERROR MESSAGE.
EXRF:	AOS ,QMULT	;SET "MULTIPLE" TO FORCE IDENTIFICATION
;
EXMR:	SKIPE AC1,TRM	;GET THE TERMINATOR. BRANCH IF
	SOJG AC1,EXRTBL-2(AC1)	;NOT DISPLAY(?) OR OPEN(/).
	PUSHJ STK,RIDENT	;? OR /... DO IDENTIFICATION, IF NEEDED.
WRTTAB:	OUTCHR [11]	;TAB OVER,
	PUSHJ STK,GETREG	;GET THE REGISTER VALUE,
	PUSHJ STK,WRTREG	;AND PRINT IT OUT.
	SKIPN ,TRM	;IF ?, THEN WE ARE DONE, GO EXIT.
	JRST EXMCRLF
RINPT:	OUTCHR [11]	;OTHERWISE, TAB OVER AND GET INPUT.
	PUSHJ STK,REDREG	;IN CASE OF NO INPUT, REDREG
			;SIMPLY DUMPS THE OLD VALUE INTO "VALUE", SO THAT
			;PUTREG WILL HAVE SOMETHING TO STORE.
	JRST BADR	;ON BAD INPUT, GIVE ERROR MESSAGE, TRY AGAIN.
	PUSHJ STK,PUTREG	;GOOD INPUT, STORE NEW VALUE.
	SKIPE TMP,LOCTRM	;GET LOCAL TERMINATOR.  CR?
	JRST RLOCTB-1(TMP)	;NO, GO PROCESS.
EXMROK:	AOSA ,0(STK)	;TAKE SUCCESS EXIT.
FAILPO:	POP STK,TMP	;***USED BY SCVF*** POP STACK AND FAIL
	POPJ STK,
;
EXMULT:	SKIPN ,QMULT	;**USED BY BREAK TRANSCEIVER**
EXMCRLF:
WRCRLF:	OUTSTR CRLFST	;? EXITS... SIMULATE CR-LF INPUT
	JRST EXMROK	;AND EXIT SUCCESSFULLY.
;

;CONSYN, PAGE 17A
;REGISTER EX/MOD CONTINUED
;
;BRANCH TABLES FOR REGISTER EXMOD:
;RLOCTB-- REGISTER LOCAL TERMINATOR TABLE
;EXRTBL-- EXMOD TERMINATOR TABLE
;
RLOCTB:	JRST REINT	;/
	JRST REINT	;@
	JRST FWDREG	;(LF)
	JRST BCKREG	;^
;
EXRTBL:	JRST RJAM	;TERMINATOR BRANCH TABLE:  JAM(_)
	PUSHJ STK,RIDENT	;INPUT(:).  DO IDENTIFICATION
	JRST RINPT	;AND GO GET INPUT.
;
MBDVAL:	ASCIZ /BAD VALUE
/
;
BCKREG:	OUTSTR CRLFST	;ON TO NEW LINE AND
	PUSHJ STK,PRVREG	;BACK UP TO PREVIOUS REGISTER.
	JRST EXMROK	;NONE LEFT?  DONE.
	JRST EXRF	;IF MORE, ON TO NEXT.
;
FWDREG:	OUTSTR LFSTR	;(LF) FOR REGISTERS, ADVANCE TO NEW LINE.
	PUSHJ STK,NXTREG	;GO TO NEW REGISTER.
	JRST EXMROK	;IF NONE LEFT, EXIT.
	JRST EXRF	;IF MORE, GO ON TO NEXT.
;
RJAM:	PUSHJ STK,ANLREG	;JAM INPUT TO REGISTER.  SCAN INPUT.
	POPJ STK,	;ERROR, DIE.
	PUSHJ STK,FNDCR	;INPUT OK, CR IS TERMINATOR?
	POPJ STK,	;NO, GIVE UP.
	PUSHJ STK,PUTREG	;OK, STORE RESULT.
	SETOM ,VALUE	;MARK VALUE AS UNSCANNED.
	MOVE AC1,SMSAVE	;RESTORE SYNTAX POINTER TO SPOT
	MOVEM AC1,SMPTR	;JUST AFTER _.
	JRST EXMROK	;EXIT.
;
;THE FRAME TRANSCEIVER IS RATHER HAIRIER, DO TO A CONCPET CALLED
;"LOCAL INPUT".  THIS MEANS THAT THE USER, IN ADDITION TO
;CHANGING A FRAME'S VALUE, CAN LOCALLY ALTER THE SEQUENCE OF
;EXAM/MOD.  THE CURRENTLY DEFINED TERMINATORS:
;INDRCT	/	USE FRAME-VALUE AS NEXT ADDRESS
;EFA	@	USE FRAME-VALUE AS INSTRUCTION, DECODE EFFECTIVE ADDR
;FWD	LF	ADVANCE TO NEXT FRAME
;BKWD	^	RETREAT TO PREVIOUS FRAME
;
BADF:	OUTSTR MBDVAL	;BAD FRAME INPUT... TYPE ERROR MESSAGE
EXMFNW:	AOS ,QMULT	;SET "MULTIPLE" TO FORCE IDENTIFICATION.
;
;
EXMF:	SKIPE AC1,TRM	;GET THE TERMINATOR.  BRANCH IF NOT
	SOJG AC1,EXFTBL-2(AC1)	;? OR /.
	PUSHJ STK,FIDENT	;? OR /... DO FRAME IDENTIFICATION.
	OUTCHR [11]	;TAB OVER,
	PUSHJ STK,GETFRM	;GET THE FRAME,
	JRST CIOFAIL	;[IF YOU CANT GET IT, DIE]
	PUSHJ STK,WRTFRM	;AND TYPE IT OUT.
	SKIPN ,TRM	;IF ? COMMAND, DONE.
	JRST EXMCRLF
FINPT:	OUTCHR [11]	;OTHERWISE, TAB OVER AND GET INPUT.
	PUSHJ STK,REDFRM	;THE LOCAL TERMINATOR INDEX IS IN "LOCTRM".
	JRST BADF	;ON BAD INPUT, GO GIVE MESSAGE.
	PUSHJ STK,PUTFRM	;STORE NEW INPUT.
	JRST CIOFAIL	;[IF STORE FAILS, AGAIN DIE]
	SKIPN TMP,LOCTRM	;IF LOCAL TERMINATOOR IS CR-LF,
	JRST EXMROK	;THEN DONE.
REINT:	OUTSTR CRLFTB-1(TMP)	;REPOSITION CARRIAGE.
	MOVE AC1,CONADR	;IF NOT, GET ADDRESS OF CURRENT CONTROLLER,
	HRRZ AC1,DAINT(AC1)		;GET ADDRESS OF ITS LOCAL
	PUSHJ STK,@AC1	;INPUT INTERPRETER AND CALL IT.
	JRST LOCTBL-1(TMP)	;NOT INTERPRETED, DO STD INTERPRETATION.
	JRST EXMFNW	;INTERPRETED, GO TO START.
;
EXFTBL:	JRST FJAM	;MAIN TERMINATOR BRANCH TABLE:  JAM
	PUSHJ STK,FIDENT	;INPUT... DO IDENTIFICATION
	JRST FINPT	;AND GO DO INPUT.
;
LOCTBL:	JRST INDRCT	;LOCAL TERMINATOR BRANCH TABLE:  INDIRECT (=1)
	JRST EFFCTV	;EFFECTIVE ADDRESS (=2)
	AOSA ,FRMNUM	;FORWARD (=3)
	SOSL ,FRMNUM	;BACKWARD (=4)
	JRST EXMFNW	;GO TO NEXT LINE
	POPJ STK,	;UNLESS BACKWARD OUT OF CORE.
;
EFFCTV:
INDRCT:	MOVE AC1,CONADR	;INDIRECT... GET THE # OF BITS IN AN
	HRRZ AC1,DADR(AC1)	;ADDRESS FOR THIS CONTROLLER.
	SETO AC1+1,	;USE THIS # TO GET A MASK
	LSH AC1+1,-^D36(AC1)	;AND THEN MASK THE VALUE
	AND AC1+1,VALUE	;DOWN TO ADDRESS-SIZE.
	MOVEM AC1+1,FRMNUM	;STORE NEW FRAME#.
	JRST EXMFNW	;ANOTHER TRIUMPH OF MIND OVER MATTER.
;
CRLFTB:	BYTE (7)15,12(22)0	;/=1
	BYTE (7)15,12(22)0	;@=2
LFSTR:	BYTE (7)15,15(22)0	;LF=3
CRLFST:	BYTE (7)15,12(22)0	;^=4
;
FJAM:	SKIPL ,VALUE	;HAS VALUE BEEN SCANNED?
	JRST NOSCAN	;YES, DONT RESCAN!
	PUSHJ STK,ANLFRM	;NO, ANALYZE FRAME.
	POPJ STK,	;ERROR, DIE
	PUSHJ STK,FNDCR	;LOOK FOR TERMINAL CR.
	POPJ STK,	;ERROR, DIE.
	MOVE AC1,SMSAVE	;EVERYTHING OK, RESTORE SYNTAX
	MOVEM AC1,SMPTR	;POINTER.
NOSCAN:	PUSHJ STK,PUTFRM	;STORE RESULT.
	JRST CIOFAIL	;ON ERROR, GIVE MESSAGE.
	JRST EXMROK	;EXIT IF OK.
;
;CONSYN, PAGE 18
;THE BREAK TRANSCEIVER IS WORSE STILL.  COMPLICATIONS:
;1) IF NO BREAK EXISTS FOR A FRAME, ? IS IGNORED
;   AND / IS TREATED LIKE :
;2) IF NO BREAK AND A SINGLE-ITEM ? COMMAND, WE MUST PUT
;   OUT AN EXTRA-CRLF, JUST TO GET TO THE NEXT LINE.
;
BADB:	OUTSTR MBDATT	;BAD BREAK INPUT... TYPE ERROR MESSAGE.
	AOS ,QMULT	;SET MULTIPLE FLAG TO FORCE NEW LINE.
;
;
BRKF:	PUSHJ STK,GETBRK	;IS ANY BREAK SET IN THE CURRENT FRAME?
	JRST NOBRK	;NO.
	SKIPE AC1,TRM	;YES, GET THE TERMINATOR.  BRANCH IF
	SOJG AC1,EXBTBL-2(AC1)	;NOT  / OR ?
BSLSH:	PUSHJ STK,FIDENT	;/ OR ?... DO FRAME IDENTIFICATION.
	OUTCHR [11]	;TAB OVER,
	PUSHJ STK,WRTBRK	;TYPE OUT THE BREAK.
	SKIPN ,TRM	;IF ?, DONE.
	JRST EXMCRLF
BINPT:	OUTCHR [11]	;OTHERWISE, TAB OVER AND GET INPUT.
	PUSHJ STK,INPUT	;GET THE INPUT.  IS IT JUST CR-LF?
	PUSHJ STK,FNDCR	;IF YES, DO NOTHING AND EXIT.
	JRST .+2	;IF NO, GO LOOK FOR BREAK.  THIS SAVES US FROM
			;DELETING AND REINSTERTING THE SAME BREAK.
	JRST EXMROK	;IF A MERE CR-LF IS TYPED.
	PUSHJ STK,ANLBRK	;ANALYZE THE BREAK.
	JRST BADB	;BAD INPUT, TYPE ERROR MESSAGE.
BJAM:	PUSHJ STK,PUTBRK	;STORE THE NEW BREAK.
	POPJ STK,	;[STORE FAILED, DIE]
	JRST EXMROK	;DONE.
;
NOBRK:	SKIPN AC1,TRM	;NO BREAK... ? COMMAND.
	JRST EXMULT	;YES, GO TEST FOR MULTIPLE,
			;A LA COMPLICATION 2) ABOVE.
	CAIN AC1,2	;NO, TREAT / LIKE :
EXBTBL:	JRST BJAM	;TERMINATOR BRANCH TABLE... JAM(_)
	PUSHJ STK,FIDENT	;INPUT... DO IDENTIFICATION AND
	JRST BINPT	;GO GET INPUT.
;
MBDATT:	ASCIZ /BAD BREAK FORMAT
/
;
;CONSYN, PAGE 19
;THE SEARCH TRANSCEIVERS ARE ESSENTIALLY PRE-PROCESSORS FOR
;THE MAIN EX/MOD TRANSCEIVERS:  THEY TAKE THE CURRENT ITEM,
;CHECK TO SEE IF IT MEETS THE SEARCH CONDITIONS.
;IF NOT, THEY REPORT SUCCESS BUT DO NOTHING.
;IF YES, THEY TOGGLE THE APPROPRIATE EX/MOD TRANSCEIVER.
;
SCVF:	PUSH STK,VALUE	;SEARCH FRAMES... SAVE CURRENT VALUE.
	PUSHJ STK,GETFRM	;GET THE CURRENT FRAME INTO VALUE.
	JRST FAILPOP	;[IF YOU CAN'T, IT'S ALL OVER, BABY BLUE]
	JSP TMP,SCHTST	;TEST IT.
	JRST EXMROK	;FAILS TEST, REPORT SUCCESS BUT DO NOTHING.
	JRST EXMF	;OK, GO TRANSCEIVE.
;
SCVR:	PUSH STK,VALUE	;SEARCH REGISTERS... GET THE CURRENT REGISTER
	PUSHJ STK,GETREG	;AFTER PRESERVING OLD VALUE.
	JSP TMP,SCHTST	;TEST IT.
	JRST EXMROK	;IGNORE FAILURES.
	JRST EXMR	;PASS ON SUCCESSES.
;
;THE SEARCH-CONDITIONS TESTER CHECKS TO SEE IF
;"VALUE" "SBOOLEAN" "SMASK" "RELATION" "SVALUE" IS TRUE.
;IT ALSO POPS VALUE OFF THE STACK, WHERE IT HAS BEEN PLACED
;BY EITHER SCVF OR SCVR, SO THAT JAMMING WORKS PROPERLY.
;
SCHTST:	MOVE AC1,SBOOL	;GET BOOLEAN INDEX AND RELATION INDEX.
	MOVE AC2,SRELN
	MOVE AC3,VALUE	;GET CURRENT VALUE.
	POP STK,VALUE	;POP OLD VALUE OFF THE STACK.
	XCT ,BLTB(AC1)	;FORM VALUE-BOOOLEAN-MASK.
	XCT ,RLTB(AC2)	;CHECK THIS TERM AGAINST RELATION-VALUE.
	JRST 1(TMP)	;PASSES, TAKE SKIP RETURN.
	JRST 0(TMP)	;FAILS, TAKE NON-SKIP RETURN.
;
BLTB:	IOR AC3,SMSK	;BOOOLEAN TABLE.  1=OR
	AND AC3,SMSK	;2=AND
	XOR AC3,SMSK	;3=XOR
;
RLTB:	CAMN AC3,SVAL	;RELATIONS TABLE.  SKIP ON CONDITION NOT MET.  =
	CAMLE AC3,SVAL	;>
	CAMGE AC3,SVAL	;<
	CAME AC3,SVAL	;NE
	CAML AC3,SVAL	;GE
	CAMG AC3,SVAL	;LE
	CAMN AC3,SVAL	;EQ
	CAMLE AC3,SVAL	;GT
	CAMGE AC3,SVAL	;LT
;
;CONSYN, PAGE 20
;ATCVR CARRIES THE TRANSEIVER IDEA TO ITS ULTIMATE ABSURD CLIMAX.
;GIVEN A CONTROLLER-UNIT, ATCVT TRANSCEIVES AN ATTACHED FILE.
;BY THIS TIME THE WHOLE IDEA IS GETTING A BIT THIN.
;
ATCVR:	MOVE UCB,UNTADR	;GET THE UNIT ADDRESS AND STATUS.
	HLRZ STA,USTAT(UCB)
	TRNN STA,QATBL	;IS THE UNIT ATTACHABLE?
	JRST NTATBL	;NO.
	MOVEM UCB,.UCBAD	;YES, SAVE ITS ADDRESS FOR CIO.
	SKIPE AC1,TRM	;GET THE TERMINATOR.  BRANCH IF NOT 
	SOJG AC1,ATBL-2(AC1)	;/ OR ?
	PUSHJ STK,UIDENT	;DO UNIT IDENTIFICATION ON / OR ?
	OUTCHR [11]	;TAB OVER,
	PUSHJ STK,GETFIL	;GET THE FILE NAME,
	JRST NTATT	;[IF NO FILE, GO PRINT UNATTACHED]
	PUSHJ STK,WRTFIL	;AND PRINT THE FILE NAME.
ACHK:	SKIPN ,TRM	;IF ? COMMAND, THAT DOES IT.
	JRST EXMCRLF
QAINPT:	OUTCHR [11]	;OTHERWISE, TAB OVER AND GET INPUT.
	PUSHJ STK,INPUT
	PUSHJ STK,FNDCR	;IS THERE JUST CR-LF?
	JRST FILIN	;NO, GO LOOK FOR FILE NAME.
	JRST CPOPJ1	;YES, EXIT.
;
NTATBL:	PUSHJ STK,UIDENT	;DO CONDITIONAL IDENTIFICATION,
	OUTCHR [11]	;TAB OVER, AND
	OUTSTR MNTAT	;TREAT UNATTACHABLE UNIT LIKE READ ONLY.
	JRST EXMCRLF	;GO EXCIT SUCCESSFULLY.
;
NTATT:	OUTSTR [ASCIZ /UNATTACHED/]	;NOT ATTACHED... SAY SO
	JRST ACHK	;AND GO RECHECK TERMINATOR.
;
ATBL:	JRST QAJAM	;TERMINATOR BRANCH TABLE:  JAM
	PUSHJ STK,UIDENT	;INPUT:  DO IDENTIFICATION,
	JRST QAINPT	;GO GET INPUT
;
FILIN:	RSM		;NON-TRIVIAL INPUT... GO BACK TO SM MODE FOR SERIOUS WORK
	CSS ATTFIL,I	;ANALYZE THE INPUT.
	JHM FAIL10,I	;BAD, GO FAIL.
	LSM
QAJAM:	MOVE TMP,CONADR	;GET ADDRESS OF SELECTED CONTROLLER.
	SKIPN TMP,DATT(TMP)	;GET ATTACH ROUTINE.
	MOVEI TMP,.ATTAC	;IF ZERO, USE STANDARD ROUTINE.
	PUSHJ STK,(TMP)	;CALL ATTACH ROUTINE.
	JRST CIOFAIL	;ATTACH FAILURE, GO PRINT MESSAGE.
	JRST CPOPJ1	;ATTCH GOOD, TAKE SKIP RETURN.
;
;CONSYN, PAGE 21
;ONE OF THE MORE MYSTERIOUS CONCEPTS IN THESE PAGES HAS BEEN
;"IDENTIFICATION" OF FRAMES, REGISTERS, UNITS, ETC.  IT IS BASED
;ON THE FACT THAT IN SINGLE-ITEM COMMANDS:
;	110/ OR
;	AC?
;THE USER KNOWS WHAT HE IS WORKING ON, WHILE IN MULTIPLE ITEM
;COMMANDS:
;	100-107?
;	AC,MQ,1020-1030,STAT/
;HE DOES NOT KNOW, AT LEAST NOT AFTER THE FIRST ITEM.  THEREFORE,
;ON MULTIPLE ITEM COMMANDS, THE SYSTEM IDENTIFIES THE ITEM IT
;IS WORKING ON BY TYPING OUT ITS NAME OR NUMBER, IE,
;	100-103?
;	100/	1234		SYSTEM TYPES OUT "100/" ETC
;	101/	0045
;	102/	6211
;	103/	6212
;
;IDENTIFICATION IS INVARIABLY CONDITIONAL ON FLAG "QMULT" BEING
;SET, INDICATING MULTIPLE ITEMS.
;
FIDENT:	SKIPN ,QMULT	;FRAME IDENT... MULTIPLE?
	POPJ STK,	;NO.
	PUSHJ STK,WRTADR	;YES, TYPE THE FRAME#.
IDCMN:	MOVE AC1,TRM	;TYPE THE TERMINATOR.
	OUTCHR TRMPR(AC1)
	POPJ STK,
;
RIDENT:	MOVE AC1,REGADR	;REG IDENT.... GET THE NAME FROM THE RDB.
	MOVE AC1,RNAM(AC1)
	JRST .+3
UIDENT:	MOVE AC1,UNTADR	;UNIT IDENT... GET THE NAME FROM THE UCB.
	MOVE AC1,UNAM(AC1)	;SAVE THE NAME FOR PRINTING.
	MOVEM AC1,NAME
	SKIPN ,QMULT	;MULTIPLE?
	POPJ STK,	;NO.
	PUSHJ STK,WRTNAM	;YES, PRINT THE NAME.
	JRST IDCMN	;GO PRINT THE TERMINATOR.
;
TRMPR:	AOPEN	;?
	AOPEN	;/   ? PRINTS AS / FOR IDENTIFICATION
	AJAM	;JAM
	AINPT	;:
;
ACTID:	SKIPN ,QMULT	;ACTION ID... MULTIPLE?
	POPJ STK,	;NO, EXIT.
ACTIDX:	PUSHJ STK,ACTPNT	;YES, PRINT ACTION #.
	JRST IDCMN	;GO PRINT TERMINATOR.
;
;CONSYN, PAGE 22
;A PAIR OF DIAGNOSTIC ROUTINES:
;CIOFAIL	ANALYZE CIO FAILURE
;LDFAIL		PRINT FILE NAME AND ANALYZE CIO FAILURE.
;
;PDP-10 ROUTINES DO "JRST CIOFAIL", AND CIOFAIL DOES A FAIL RETURN
;SM ROUTINES DO A "CHMAF CIOFAIL", THUS ASSURING DISASTER.
;
LDERR:	PUSHJ STK,GETFIL	;RECOVER FILE NAME FROM LOADER FAB.
	HALT		;ON NO FILE ATTACHED, MUST BE BUG.
LDFAIL:	PUSHJ STK,WRTFIL	;PRINT THE CURRENT FILE NAME
	OUTSTR [ASCIZ /: /]	;FOLLOWED BY ": "
CIOFAI:	CLEARM ,DMPFLG	;IN CASE OF DUMP ERROR, CLEAR DUMP FLAG.
	MOVE AC1,.UCBAD	;GET THE CIO ARGUMENT.
	HLRZ AC1,USTAT(AC1)	;GET THE UNIT'S STATUS.
	ANDI AC1,ALLERR	;MASK OUT ALL EXCEPT ERROR BITS.
	JFFO AC1,ERRFND	;ANY ERROR?
	OUTSTR @CMSGAD	;NO, THIS IS POSSIBLE ONLY ON A LOAD
IFN TYMSHR,<
	PUSHJ STK,BRCP	;WRITE A BILLING CHECKPOINT RECORD
>
	JRST ERCRLF	;COMMAND, WHERE AN ERROR COULD BE GENERATED
			;BY THE LOADER RATHER THAN CIO.  IN THAT CASE, OUTPUT
			;THE LOADER-SPECIFIED OR DEFAULT MESSAGE.
;
ERRFND:	OUTSTR @ERRTBL-^D29(AC1+1)	;TYPE ERROR MESSAGE.
IFN TYMSHR,<
	PUSHJ STK,BRCP	;WRITE A BILLING CHECKPOINT RECORD
>
ERCRLF:	OUTSTR CRLFST	;TERMINATE WITH CR-LF.
	POPJ STK,	;FAIL.
;
ERRTBL:	MNTAT	;BITS 11-14:  ATTACH ERRORS
	MPROT
	MNOFIL
	MNOCHL
	MUNK	;BITS 15-17:	.READ/.WRITE ERRORS
	MUNAT
	MFRM
;
LDMSG:	ASCIZ /LOADER ERROR/
MNTAT:	ASCIZ /NOT ATTACHABLE/
MPROT:	ASCIZ /PROTECTION ERROR/
MNOFIL:	ASCIZ /NO SUCH FILE/
MNOCHL:	ASCIZ /NO CHANNELS/
MUNK:	ASCIZ +I/O ERROR+
MUNAT:	ASCIZ /UNIT NOT ATTACHED/
MFRM:	ASCIZ /FRAME# ERROR/
;
;CONSYN, PAGE 23
;AS SORT OF TAIL ENDERS, WE HAVE ACTION AND DO.
;THESE COMMANDS ARE USED FOR SETTING AND EXECUTING ACTION BUFFERS,
;WHICH ARE ONE OF THE GOODIES AVAILABLE ON BREAKPOINTS.
;
ACTION:	ASM ACT,I	;LOOK FOR "ACT" OF ACTION.
	JMP DODO,I	;NOT FOUND, GO TO NEXT COMMAND.
	ABS ION,I	;ABSORB OPTIONAL "ION".
	CSSF VRBTRM,I	;LOOK FOR SPACE OR TAB.
	CSSF ACTANL,I	;PROCESS THE LIST OF ACTION #S.
	CHMF TRMCR,I	;GET THE TERMINATOR.
;
	LDG ATMF,ACTCVR,I	;SET UP ATMXCT TO CALL ACTCVR.
	SGS TRM,2,I	;WAS TERMINATOR _?
	JMP NOTJAM,I	;NO, GO CHECK FOR MULTIPLE.
	ASMN RETURN,I	;YES, CHECK FOR BARE CR-LF.  IF FOUND, ADVANCE
			;PTR TO TERMINATING ZERO. SAVE LOCATION OF THIS ZERO.
	STG SMPTR,SCHVAL,D	;THEREFORE, ACTCVR WILL CLEAR THE ACTION.
	CHMA CONDCR,I	;LOOK FOR CONDITIONAL CR AND SKIP.
NOTJAM:	CHMN MULTCR,I	;NOT JAM, TYPE CR-LF IF MULTIPLE.
BLAH:	CHMP ATMXCT,I	;DO ACTIONS.
;
MULTCR:	SKIPE ,QMULT	;IF MULTIPLE FLAG ON, TYPE CR-LF.
	OUTSTR CRLFST
	POPJ STK,
;
;
DODO:	ASM DOSTR,I	;LOOK FOR "DO".
	JMP PSAVE,I	;NOT FOUND, LOOK FOR NEXT COMMAND.
	CSSF VRBTRM,I	;LOOK FOR SPACE OR TAB.
	CSSF ACTANL,I	;GET THE LIST OF ACTION #S TO EXECUTE.
	ASMF RETURN,I	;MAKE SURE LIST TERMINATES IN CR-LF.
	LDG ATMF,DOBITS,I	;SET UP ACTION# TO BIT TRANSLATOR.
	LSM
	PUSH STK,BRKBLK+BACT	;PUSH OLD ACTION BITS.
	CLEARM ,BRKBLK+BACT
	PUSHJ STK,ATMXCT	;DO TRANSLATION.
	JRST DOBOMB	;BOMB OUT--IT SHOULDNT.
	PUSHJ STK,DOACTS	;DO ACTIONS.
DOBOMB:	POP STK,BRKBLK+BACT	;POP OLD ACTIONS.
NOCHGE:	RSM
	RSS
;
;ACTANL ANALYZES A PSEUDO-FRAME SET CONSISTING ONLY OF ACTION
;NUMBERS AND STORES THEM IN STANDARD FORMAT IN THE ATOM LIST.
;THUS "ATMXCT" CAN BE USED BY BOTH ACTION AND DO.
;
ACTANL:	MFF QMULT	;ASSUME SINGLE ACTION.
	LDG ATMPTR,ATMLST,I	;INITIALIZE THE ATOM LIST.
ACTALP:	ASMR ALL,I	;IS ACTION "ALL"?
	JMP ALLACT,I
	CSSF USRACT,I	;NO, LOOK FOR ACTION#.
	STG VALUE,ATMPTR,R	;STORE ACTION# AS TENTATIVE
	ADG ATMPTR,1,I	;LOWER AND UPPER LIMIT.
	STG VALUE,ATMPTR,R
	ASM MINUS,I	;-?
	JMP INCRA,I	;NO, SINGLE ACTION.
	CSSF USRACT,I	;YES, GET UPPER LIMIT.
	CHMF CHPAIR,I	;CHECK TO SEE THAT UPPER LIMIT> LOWER.
STORA:	MFN QMULT	;SET "MULTIPLE" COMMAND.
	STG VALUE,ATMPTR,R	;STORE UPPER LIMIT.
INCRA:	ADG ATMPTR,1,I	;ADVANCE ATOM-LIST POINTER.
	ASM COMMA,I	;COMMA NEXT?
	RSS		;NO, DONE
	MFN QMULT	;YES, SET MULTIPLE.
	JMP ACTALP,I	;GO GET MORE INPUT.
;
ALLACT:	LDG VALUE,0,I	;ALL ACTIONS... BECAUSE WE ARE DUMMYING UP
	STG VALUE,ATMPTR,R	;FOR ATMXCT, WE CANNOT USE SHORTHAND
	ADG ATMPTR,1,I	;NOTATION FOR "ALL" AND MUST
	LDG VALUE,^D34,I	;MANUALLY INSERT THE UPPER AND
	JMP STORA,I	;LOWER LIMITS.
;
;CONSYN, PAGE 24
;SUPPORTING SUBROUTINES FOR ACTIONAND DO.
;
DOBITS:	MOVSI AC1,400000	;TRANSLATE ACTION# IN FRAMENUM TO
	MOVN AC2,FRMNUM	;BIT IN ACTION WORD.
	LSH AC1,(AC2)
	IORM AC1,BRKBLK+BACT
	JRST CPOPJ1	;ALWAYS SUCCEED
;
ACTCVR:	MOVE AC1,FRMNUM	;ACTION TRANSCEIVER... SET UP ADDRESS
	MOVE AC1,ACTPTR(AC1)	;OF SELECTED ACTION.
	HRRZM AC1,TXTADR
	MOVE AC2,TRM	;GET TERMINATOR.
	SKIPN ,@TXTADR	;ANY ACTION PRESENT?
	JRST @NOACTN(AC2)	;NO, BRANCH ON NO-ACTION TABLE.
	SOJG AC2,ACTTBL-2(AC2)	;YES, BRANCH ON _ OR :
	PUSHJ STK,ACTID	;/ OR ?... DO CONDITIONAL ID.
	OUTCHR [11]	;TAB OVER
	PUSHJ STK,WRTTXT	;AND TYPE ACTION.
	PUSHJ STK,CONDCR	;DO CR-LF IF NONE PRESENT.
	SKIPN ,TRM	;IF ?, DONE
	JRST EXMROK
	AOS ,QMULT	;IF / FORCE IDENTIFICATION.
;
ACTINP:	PUSHJ STK,ACTID	;:... DO CONDITIONAL ID.
	OUTCHR [11]	;TAB OVER
	PUSHJ STK,CINPUT	;GET COMMAND INPUT.
	PUSHJ STK,FNDCR	;LOOK FOR PLAIN CR-LF.
	JRST .+2	;NOT FOUND, MUST BE TRUE ACTION.
	JRST EXMROK	;FOUND, EXIT.
	PUSHJ STK,CONDCR	;ADD CR-LF IF NONE TYPED.
	MOVE AC2,[POINT 6,COMTXT,5]	;SET UP PTR TO TEXT BUFFER.
	MOVE AC1,FRMNUM	;GET PTR TO ACTION BUFFER.
	MOVE AC1,ACTPTR(AC1)
;
ACTLP:	LDB AC3,AC2	;TRANSFER CHARACTERS FROM INPUT TO ACTION.
	IBP ,AC2
	IDPB AC3,AC1
	JUMPN AC3,ACTLP
	JRST EXMROK	;DONE,, EXIT.
;
NOACTN:	JRST EXMULT	;ACTION TABLE FOR NO-ACTION... ?, EXIT
	JRST ACTINP	;/ TREAT LIKE :
ACTTBL:	JRST ACTJAM	;_
	JRST ACTINP	;: GO GET INPUT
;
ACTJAM:	SETZM ,@TXTADR	;JAM... ZERO THE ACTION BUFFER.
	MOVE AC2,SCHVAL	;GET SAVED PTR IN SYNTAX.  AC1 HOLDS PTR TO ACTION.
	JRST ACTLP
;
CONDCR:	HRRZ AC1,TXTADR	;LOOK TRHOUGH CURRENT BUFFER
	HRLI AC1,440600	;FOR CR-LF.  IF NOT FOUND, DO IT YOURSELF.
CONDLP:	ILDB AC2,AC1
	JUMPE AC2,ERCRLF
	CAIE AC2,TCRTN
	JRST CONDLP
	POPJ STK,
;
;CONSYN, PAGE 25
;SAVE/GET SYNTAX
;
PSAVE:	ASM SA,I	;LOOK FOR "SA" OF SAVE.
	JMP PGET,I	;NOT FOUND.
	ABS VE,I	;FOUND, ABSORB OPTIONAL "VE".
IFN TYMSHR,<
	LSM		;BACK TO -10 MODE
	PUSHJ STK,BRCP	;WRITE A CHECKPOINT RECORD
	RSM
>
SAVSPC:	CSSF VRBTRM,I	;LOOK FOR SPACE OR TAB.
	CSSP SAVSUB,I	;CALL SAVE SUBROUTINE.
;
PGET:	ASM GET,I	;LOOK FOR "GET".
	JMP PDUMP,I	;NOT FOUND.
IFN TYMSHR,<
	LSM		;BACK TO -10 MODE
	PUSHJ STK,BRCP	;WRITE A CHECKPOINT RECORD
	RSM
>
	CSSF VRBTRM,I	;LOOK FOR SPACE OR TAB.
	CSSP GETSUB,I	;CALL GET SUBROUTINE.
;
;CONSYN, PAGE 26
;THE DUMP COMMAND HAS THE FOLLOWING FORMAT:
;	DUMP <FILE NAME> <FRAME SET> CR
;

	XLINKNT==XSBOOL	;LINE COUNTER
	XPGKNT=XSRELN	;PAGE COUNTER

PDUMP:	ASM DU,I	;LOOK FOR "DU" OF DUMP.
	JMP DETACH,I	;NOT FOUND.
	ABS MP,I	;ABSORB OPTIONAL "MP".
	CSSF VRBTRM,I	;LOOK FOR SPACE OR TAB.
	LDG .LEBLK,0,I	;ZERO .LEBLK TO INDICATE "CTY".
	ASMR CTY,I	;LOOK FOR CTY.  IF FOUND, DONT
	JMP DODUMP,I	;BOTHER WITH FILE OR DUMP FLAG.
	CSSF ANLFIL,I	;NOT FOUND, GET FILE NAME.
	LDG .UCBAD,DMPUCB,I	;ATTACH THE FILE
	CHM .ATTAC,I	;TO THE DUMP UCB.
	CHMAF CIOFAIL,I	;ATTACH FAILURE... GIVE MESSAGE AND DIE.
DODUMP:	CSSN CUANAL,I	;GET THE HIERARCHY.
	CSSF ATANAL,I	;GET THE FRAME SET.
	ASMF RETURN,I	;GET THE TERMINATING CR-LF.
	LDG DMPFLG,.LEBLK,D	;SET DMPFLG TO CTY/FILE (0/>0).
	LDG CNPLUG,ATMXCT,I	;SET UP THE STANDARD PLUGS.
	LDG ATMF,DUMPF,I
	LDG ATMR,DUMPR,I
	LDG LINKNT,0,I	;SET LINE AND PAGE COUNTERS TO ZERO.
	LDG PGKNT,0,I
	CSSF CNLPPR,I	;LOOP TROUGH AS REQUIRED.
	MFF DMPFLG	;OK, CLEAR DUMP TO FILE FLAG.
	LDG .UCBAD,DMPUCB,I	;DETACH THE DUMP FILE.
	CHMN .DETAC,I
	RSS		;RETURN
;
;CONSYN, LAST PAGE
;
	END
 2|y