	TITLE CPU	NOVA/SUPERNOVA SIMULATOR, CPU MODULE
;
;CORE STORAGE IS LAID OUT AS FOLLOWS:
;PDP-10 WORD C+N CONTAINS:
;	BITS 20-35	NOVA WORD N
;	BIT 0		BREAKPOINT FLAG
;
;REGISTERS:  THE FAST AC'S ARE KEPT AS ARRAY "AC".  THE CARRY BIT
;IS KEPT IN CORE LOCATION "CARRY".
;
;TENTATIVE I/O SCHEME FOR THE NOVA/SUPERNOVA:
;3 PARALLEL REGISTERS ARE KEPT:
;BSY--	HOLDS ALL DEVICE BUSY FLAGS (FAST AC)
;DON--	HOLDS ALL DEVICE DONE FLAGS (FAST AC)
;DSBLE--	HOLDS ALL DEVICE-INTERRUPT DISABLE FLAGS (CORE)
;
;BIT ASSIGNMENTS ARE AS FOLLOWS:
;BIT 0		CPU
;    1		NON EXISTANT DEVICE
;    19		PTP
;    25		LPR		THESE ASSIGNMENTS CORRESPOND TO THE
;    29		DSK		BITS IN THE MASKO INSTRUCTION,
;    30		CDR		EXCEPT FOR THE PTP, WHICH ON THE REAL
;    31		PTR		MACHINE IS ASSIGNED THE SAME BIT AS
;    33		RTC		THE CLOCK.
;    34		TTI
;    35		TTO
;
;THE CPU IS A BIT OF A PROBLEM, SINCE ITS BUSY BIT =?ION
;WHILE ITS DONE BIT =?POWER FAILURE, AND ITS DISABLE BIT IS NEVER SET.
;FOR CONSISTENCY, THE CPU IS ASSIGNED BIT 0 IN ALL REGISTERS:
;	BSY 0=	?ION
;	DON 0=	?POWER FAILURE
;	DSBLE 0=	0, ALWAYS
;THEREFORE THE NECESSARY CONDITION FOR AN INTERRUPT IS
;	BSY-0=1 AND (DONE AND NOT DSBLE>0)
;
	ENTRY IOT77P	;ENTRY HOOK FOR EXTERN FROM COMM. REGION.
	INTERN GETCMA,NULL,IBKPT,OBKPT,ILLEG
	INTERN .FETCH,LOADR,BRSET,MEMTRP
	INTERN .BLDUP,.TRDN,CPURD,CPUWR,CPURST

	EXTERN CPUPC,SR,OLDPC,AC,C,XCORE,DSBLE,CARRY
	EXTERN RSTLST,.FLAGS,.TMCHK,STM,BRKCHK,INTSTP
	EXTERN SBSY,SDON,TRAPS
	EXTERN CPUUCB,IOTTBL,BITTBL
	EXTERN .READ,LDRUCB,INDMAX
;
;NOVA FAMILY CPU, PAGE 2
;TIMING:	ALL NOVA-CLASS MACHINES KEEP TRACK OF TIME IN UNITS
;OF 100 NANOSECONDS.
;
IFN NOVA,<	TMEM=^D26	;MEMORY CYCLE BASIC TIME.
	TISZ=0	;EXTRA TIME FOR INSTRUCTIONS:  ISZ
	TSTA=3
	TJSR=^D9
	TOPR=^D30	;INCR,MOV,NEG,COM
	TOPR1=^D33	;ADD,SUB,ADC,AND
	TIOTNO=^D18	;NIO
	TIOT=^D18	;DIA,DIB,DIC
	TIOT1=^D21	;DOA,DOB,DOC
	TBSE=3	;EXTRA TIME FOR BASE REG ADDRESSING
	TINTR=^D26
	TCHIN=^D35	;CHANNEL TIMES: IN AND OUT
	TCHOUT=^D44
	TMUL=^D64	;EXTRA MULTIPLY AND DIVIDE TIME
	TDIV=^D72
	>

IFN SUPERNOVA,<	TMEM=^D8
	TISZ=2
	TSTA=0
	TJSR=6
	TSKP=^D8	;EXTRA TIME FOR CONDITIONAL SKIP.
	TIOTNO=^D25
	TIOT=^D21
	TIOT1=^D25
	TINTA=^D8	;EXTRA TIME FOR INTA
	TINTR=^D22	;TIME FOR INTERRUPT
	TCHIN=^D23
	TCHOUT=^D28
	TMUL=5
	TDIV=^D36
	>

IFN NOVA8,<	TMEM=^D8
	TISZ=2
	TSTA=0
	TSKP=2
	TIOTNO=^D20	;THESE TIMINGS ARE COMPROMISES:  THEY ARE 2.2
	TIOT=^D16	;USEC (=.8+1.4) + .6 IF S,C, OR P IS SET.
	TIOT1=^D16	;WE DONT TEST FOR S,C,P, HENCE TIMING IS AVERAGE.
	TINTR=^D16
	TCHIN=^D20
	TCHOUT=^D20
	TMUL=^D66
	TDIV=^D66
	>

IFN NOVA12,<	TMEM=^D13
	TISZ=6
	TSTA=0
	TSKP=^D13
	TIOTNO=^D18
	TIOT=^D12
	TIOT1=^D18
	TINTR=^D30
	TCHIN=^D12
	TCHOUT=^D12
	TMUL=^D60
	TDIV=^D60
	>

IFN SCNOVA,<	TMEM=6
	TISZ=2
	TSTA=0
	TJSR=6
	TSKP=6
	TIOTNO=^D26
	TIOT=^D22
	TIOT1=^D26
	TINTA=^D8
	TINTR=^D18
	TCHIN=^D23
	TCHOUT=^D28
	TMUL=5
	TDIV=^D36
	>
;
;NOVA/SUPERNOVA CPU, PAGE 3
;BASIC FETCH CYCLE:
;1) CHECK FOR INTERRUPTS
;2) FETCH INSTRUCTION, CHECK FOR OPR AND IOT
;3) DECODE ADDRESS
;4) GO EXECUTE
;
NOINT:	PUSHJ P,.TMCHK	;FOLLOWING ION, NO INTERRUPTS ARE ALLOWED
	SKIPE XR3,.FLAGS	;FOR ONE CYCLE.  HENCE WE MERELY DO
	PUSHJ P,WRUTRP	;NORMAL OVERHEAD AND THEN
	JRST FETCHI	;GO FETCH INSTRUCTION AND EXECUTE.
;
ILLEG:	SKIPGE ,TRAPS	;ILLEGAL INSTR... TRAP ENABLED?
	PUSHJ P,ILLTRP	;YES.
.FETCH:	PUSHJ P,.TMCHK	;CHECK FOR TIMED-OUT DEVICS.
	SKIPE XR3,.FLAGS	;ANY FETCH PHASE TRAPS OUTSTANDING?
	PUSHJ P,WRUTRP	;YES, GO PROCESS.
	JUMPL BSY,INTON	;NO.  INTERRUPTS ENABLED?  GO CHECK.
FETCHI:	MOVE MA,PC	;PC--> MA.
	JSP RTN,GETCMA	;FETCH INSTRUCTION FROM CORE.  BKPT?
	PUSHJ P,EBKPT	;YES.
	TRNE MB,100000	;IN ANY CASE, BIT 0 OF INSTRUCTION=1?
	AOJA PC,POPR	;YES, GO DO OPERATES.
	CAIL MB,060000	;NO, BITS 1-2=1?
	AOJA PC,PIOT	;YES, IOT.
;
	MOVE MA,MB	;NO, MEMORY REFERENCE.
	ANDI MA,377	;GET DISPLACEMENT (MB 8-15)
	LDB XR1,[POINT 2,MB,27]	;GET ADDRESS MODE (MB 6-7).
	JUMPE XR1,NTREL	;MODE >0?
	TRNE MA,200	;YES, EXTEND DISPLACEMENT, SIGNED, TO 16 BITS.
	IORI MA,177400	;ADD ON PROPER BASE REGISTER.
	ADD MA,@RGTBL-1(XR1)
IFN NOVA,<	ADD TM,MDTM-1(XR1)>	;IF NOVA, ADD ON EXTRA COST.
	ANDI MA,77777	;CUT RESULT TO 15 BITS.
NTREL:	LDB IR,[POINT 2,MB,22]	;GET THE OPCODE FROM MB 1-2.
	LDB XR2,[POINT 2,MB,24]	;GET THE AC-SELECTOR FROM MB 3-4.
	TRNN MB,002000	;INDIRECT?
	AOJA PC,@OPTBL(IR)	;NO, GO EXECUTE.
	SETZ XR1,	;ZERO INDIRECT LEVEL COUNTER.
INDLP:	CAML XR1,INDMAX	;INDIRECT LEVEL LIMIT EXCEEDED?
	PUSHJ P,INDTRP	;YES, TRAP.
	JSP RTN,GETCMA	;GET INDIRECT WORD.  BKPT?
	PUSHJ P,NBKPT	;BREAK?
	CAIGE MA,40	;IS MA IN THE RANGE 17<MA<40?
	CAIGE MA,20
	JRST NOAUTO	;NO.
	CAIL MA,30	;YES, IF 20-27, ADD 1 TO MB.
	SOJA MB,.+2	;IF 30-37, SUBTRACT 1 FROM MB.
	AOJ MB,
	ANDI MB,177777	;IN ANY CASE, RESTORE WORD TO MEMORY.
	HRRM MB,C(MA)
IFE NOVA,<	ADDI TM,TISZ>	;ON ALL EXCEPT NOVA, AUTO-INDEX COSTS.
;
NOAUTO:	MOVE MA,MB	;MOVE MB TO MA.
	TRZE MA,100000	;INDIRECT BIT SET?
	AOJA XR1,INDLP	;YES, LOOP BACK.
	AOJA PC,@OPTBL(IR)	;NO, EXECUTE.
;
INTON:	SETCM XR1,DSBLE	;ION... MASK OUTSTANDING INTERRUPTS UNDER
	AND XR1,DON	;INTERRUPTS ENABLED FLAGS.
	JUMPE XR1,FETCHI	;ANY ON?
	HRRM PC,C	;YES, SAVE PC IN LOCATION 0.
	TLZ BSY,400000	;TURN INTERRUPTS OFF.
	ADDI TM,TINTR	;INTERRUPTS COST A SMALL FEE.
	HRRZ MB,C+1	;GET THE INDIRECT ADDRESS.
	CLEARB XR2,IR	;SET OPCODE AND SUBCOE OF 0 (JMP).
	JRST NOAUTO	;GO PROCESS.
;
;NOVA/SUPERNOVA CPU, PAGE 4
;TABLES AND INSTRUCTION DECODERS.  ALL INSTRUCTIONS ARE TRIVIAL.
;
OPTBL:	JRST OPSPEC(XR2)	;00XXXX
	JRST PLDA	;02XXXX
	JRST PSTA	;04XXXX
;
OPSPEC:	JRST PJMP	;000XXX
	JRST PJSR	;004XXX
	JRST PISZ	;010XXX
	JRST PDSZ	;014XXX
;
RGTBL:	Z ,PC	;ADDRESS MODES: 1=PC RELATIVE
	Z ,AC+2	;2=AC2 RELATIVE
	Z ,AC+3	;3=AC3 RELATIVE
;
IFN NOVA,<MDTM:	Z	;EXTRA COST FOR RELATIVE ADDRESSING.
	TBSE
	TBSE>
;
;MEMORY REFERENCE INSTRUCTIONS.  ALL ARE TRIVIAL:
;MOVE GROUP:	LDA/STA
;MODIFY GROUP:	JMP/JSR/ISZ/DSZ
;
PLDA:	JSP RTN,GETCMA	;GET THE OPERAND.
	PUSHJ P,RBKPT	;BKPT?
	MOVEM MB,AC(XR2)	;STORE OPERAND IN SELECTED AC.
	JRST .FETCH
;
PSTA:	ADDI TM,TMEM+TSTA	;PREPARE TO TAKE A MEMORY CYCLE.
	MOVE MB,AC(XR2)	;GET CONTENTS OF SELECTED AC.
	CAML MA,XCORE	;IS MEMORY ADDRESS LEGAL?
	JRST ILLSTO	;NO, GO ABORT STORE.
	SKIPGE ,C(MA)	;BKPT?
	PUSHJ P,WBKPT	;YES.
	HRRM MB,C(MA)	;STORE INTO MEMORY.
	JRST .FETCH
;
;
PDSZ:	JSP RTN,GETCMA	;GET MEMORY OPERAND.  BKPT?
	PUSHJ P,RBKPT	;YES.
	SOJA MB,PDEC	;DECREMENT OPERAND.
;
PISZ:	JSP RTN,GETCMA	;GET MEMORY OPERAND.  BKPT?
	PUSHJ P,RBKPT	;YES.
	ADDI MB,1	;INCREMENT OPERAND.
PDEC:	IFN TISZ,<	ADDI TM,TISZ>	;ADD ON EXTRA COST, IF ANY.
	ANDI MB,177777
	CAML MA,XCORE	;IS MEMROY ADDRESS LEGAL?
	JRST ILLSTO	;NO, ABORT STORE.
	SKIPGE ,C(MA)	;YES, CHECK AGAIN FOR BKPT,
	PUSHJ P,WBKPT	;THIS TIME A W-BRK.
	HRRM MB,C(MA)	;CUT RESULT TO 16 BITS AND STORE IN CORE.
	JUMPN MB,.FETCH	;RESULT 0?
	AOJA PC,.FETCH	;YES, SKIP.
;
PJSR:	MOVEM PC,AC+3	;JSR... SAVE PC IN AC3.
IFN NOVA!SUPERNOVA!SCNOVA,<	ADDI TM,TJSR>	;EXTRA COST, 3 MINOR CYCLES.
PJMP:	MOVEM PC,OLDPC	;SAVE OLD PC.
	MOVE PC,MA	;LOAD PC FROM MA.
	JRST .FETCH
;
;NOVA/SUPERNOVA CPU, PAGE 5
;THE NOVA HAS ONE "DO EVERYTHING" INSTRUCTION, EXECUTED AS FOLLOWS:
;1) CARRY FUNCTION
;2) MAIN OPERATION
;3) SHIFT FUNCTION
;4) SKIP FUNCTION
;5) LOAD/NO LOAD
;
POPR:	LDB XR3,[POINT 2,MB,31]	;GET THE CARRY FUNCTION
	XCT ,CRYF(XR3)	;AND DO IT.  CARRY IS NOW IN AR-19.
	ANDI AR,200000	;CLEAR THE REST OF AR.
	LDB XR1,[POINT 2,MB,22]	;GET THE SOURCE AC'S #.
	IOR AR,AC(XR1)	;GET THE SOURCE AC INTO AR.

	LDB XR3,[POINT 3,MB,27]	;GET THE MAIN FUNCTION.
	LDB XR2,[POINT 2,MB,24]	;GET THE DESTINATION AC'S #.
IFN NOVA,<	ADD TM,OPRTM(XR3)>	;ON NOVA, FUNCTIONS COST TIME.
	XCT ,FUNC(XR3)	;DO THE FUNCTION.
RTN1:	ANDI AR,377777	;NON-SKIP RETURN... MASK TO 17 BITS.
RTN2:	LDB XR3,[POINT 2,MB,29]	;GET THE SHIFT FUNCTION.
	JUMPG XR3,@SHFUNC-1(XR3)	;IF >0, DO IT.

RTN4:	LDB XR3,[POINT 3,MB,35]	;GET THE SKIP FUNCTION.
	JUMPG XR3,SKIPTB-1(XR3)	;IF NON-ZERO, DO IT.

RTN3SK:	IFE NOVA,<	ADDI TM,TSKP>	;ON ALL EXCEPT NOVA, SKIPS COST.
RTN3:	TRNE MB,10	;BIT 12 OF INSTRUCTION=1?
	JRST .FETCH	;NO, LEAVE OLD CARRY-AC.
	MOVEM AR,CARRY	;NO, STORE CARRY.
	ANDI AR,177777
	MOVEM AR,AC(XR2)	;STORE DESTINATION AC.
	JRST .FETCH
;
IFN NOVA,<OPRTM:	TOPR	;COM
	TOPR	;NEG
	TOPR	;MOV
	TOPR	;INCR
	TOPR1	;ADC
	TOPR1	;SUB
	TOPR1	;ADD
	TOPR1	;AND
	>
;
;NOVA/SUPERNOVA CPU, PAGE 6
;OPERATE INSTRUCTION TABLES
;
FUNC:	TRCA AR,177777	;000=COM, SKIP OVER MASKING
	JRST PNEG	;001=NEG
	JRST RTN2	;010=MOV
	ADDI AR,1	;011=INCR
	JRST PADC	;100=ADC
	JRST PSUB	;101=SUB
	ADD AR,AC(XR2)	;110=ADD
	JRST PAND	;111=AND
;
PSUB:	XORI AR,177777	;SUBTRACT... COMPLEMENT SOURCE,
	ADD AR,AC(XR2)	;ADD DESTINATION,
	AOJA AR,RTN1	;ADD 1 AND GO CHECK FOR OVERFLOW.
;
PNEG:	XORI AR,177777	;NEGATE... COMPLEMENT AR, ADD 1,
	AOJA AR,RTN1	;ALLOWING OVERFLOW INTO CARRY.
;
PADC:	XORI AR,177777	;ADD COMPLEMENT... COMPLEMENT AR,
	ADD AR,AC(XR2)	;ADD, GO CHECK FOR OVERFLOW.
	JRST RTN1
;
PAND:	MOVE XR1,AC(XR2)	;GET OPERAND.
	ANDI AR,200000(XR1)	;AND IT INTO AR, PRESERVING CARRY.
	JRST RTN2
;
SHFUNC:	JRST PRAL	;1XX1XX
	JRST PRAR	;1XX2XX
	JRST PSWHA	;1XX3XX
;
CRYF:	MOVE AR,CARRY	;00=LOAD CARRY
	TRZA AR,777777	;01=CLEAR CARRY
	MOVEI AR,200000	;10=SET CARRY
	SETCM AR,CARRY	;11=COMPLEMENT CARRY
;
PRAL:	LSH AR,1	;RAL... SHIFT CARRY+AR LEFT 1.
	TRZE AR,400000	;1 SHIFTED OUT?
	IORI AR,1	;YES, SHIFT 1 BACK IN.
	JRST RTN4
;
PRAR:	ROT AR,-1	;RAR... ROTATE CARRY+AR RIGHT 1.
	TLZE AR,400000	;1 SHIFTED OUT?
	IORI AR,200000	;YES, SHIFT 1 BACK IN.
	JRST RTN4
;
PSWHA:	LDB XR1,[POINT 8,AR,27]	;SWAP HALVES... GET AR 0-7.
	DPB AR,[POINT 8,AR,27]	;MOVE AR 8-15 INTO AR 0-7.
	ANDI AR,377400	;CLEAR AR 8-15.
	IOR AR,XR1
	JRST RTN4
;
;NOVA/SUPERNOVA CPU, PAGE 7
;SKIP INSTRUCTIONS.
;
SKIPTB:	AOJA PC,RTN3SK	;SKP: 1XXXX1
	JRST PSZC	;1XXXX2
	JRST PSNC	;1XXXX3
	JRST PSZR	;1XXXX4
	JRST PSNR	;1XXXX5
	JRST PSEZ	;1XXXX6
	JRST PSBN	;1XXXX7
;
PSEZ:	TRNE AR,177777	;SKIP ON C=0 OR AR=0.  AR=0?
PSZC:	TRNN AR,200000	;NO.  C=0?
	AOJA PC,RTN3SK	;YES, SKIP.
	JRST RTN3
;
PSBN:	TRNE AR,177777	;SKIP ON C=1 AND AR NE 0.  AR NE 0?
PSNC:	TRNN AR,200000	;YES. C=1?
	JRST RTN3	;NO.
	AOJA PC,RTN3SK	;YES, SKIP.
;
PSZR:	TRNE AR,177777	;SKIP ON AR =0.
	JRST RTN3	;NOT ZERO.
	AOJA PC,RTN3SK	;SKIP.
;
PSNR:	TRNE AR,177777	;SKIP ON AR NE 0.
	AOJA PC,RTN3SK	;NOT ZERO.
	JRST RTN3	;ZERO.
;
;NOVA/SUPERNOVA CPU, PAGE 8
;I/O PROCESSOR.  ASIDE FROM THE STANDARDIZATION INHERENT IN THE
;BSY-DONE-DSBLE REGISTERS, EACH DEVICE SUPPLIES A HEADER
;CONSISTING OF THE FOLLOWING:
;WORD 1	:	BIT MASK FOR BSY/DON REGISTERS
;WORD 2	:	FIRST WORD OF IOT DECODER
;THE ADDRESS IN TABLE IOTTBL (ORDERED BY DEVICE #S) POINTS AT
;THE FIRST WORD OF THE DEVICE HEADER.
;
;THE I/O PROCESSOR PRODUCES FOUR OUTPUTS:
;IR:	SUBOPCODE
;XR1:	DEVICE #
;XR2:	AC DESIGNATOR
;XR3:	FUNCTION CODE
;NOTE THAT SUBCODE '7' (SKIPS) AND ALL CODES FOR DEVICE '77' [CPU]
;ARE HANDLED IN THE CPU MODULE.
;
PIOT:	LDB IR,[POINT 3,MB,27]	;GET THE SUBCODE.
	LDB XR1,[POINT 6,MB,35]	;GET THE DEVICE#.
	LDB XR3,[POINT 2,MB,29]	;GET THE FUNCTION CODE.
	ADD TM,IOTTM(IR)	;ADD ON COST OF INDICATED IOT.
	CAIN IR,7	;IS SUBCODE 7?
	JRST PIOSKP	;YES.
	LDB XR2,[POINT 2,MB,24]	;NO, GET THE AC DESIGNATOR
	HRRZ XR1,IOTTBL(XR1)	;GET THE MEMORY ROUTINE ADDRESS.
	JRST ,1(XR1)	;GO TO SECOND WORD.
;
PIOSKP:	XCT ,TIOSKP(XR3)	;OPCODE 0634XX... DO TEXT ON BSY OR DONE.
	JRST .FETCH	;NO SKIP
	AOJA PC,.FETCH	;SKIP
;
TIOSKP:	TDNN BSY,@IOTTBL(XR1)	;BSY NE 0?
	TDNE BSY,@IOTTBL(XR1)	;BSY = 0?
	TDNN DON,@IOTTBL(XR1)	;DON NE 0?
	TDNE DON,@IOTTBL(XR1)	;DON = 0?
;
IOTTM:	TIOTNO	;NIO
	TIOT	;DIA
	TIOT1	;DOA
	TIOT	;DIB
	TIOT1	;DOB
	TIOT	;DIC
	TIOT1	;DOC
	TIOT	;SKIPS
;
;NOVA/SUPERNOVA CPU, PAGE 9
;CPU IOT MODULE.  THE CPU IS AN I/O DEVICE WHICH HANDLES INTERRUPTS,
;POWER FAILURE, ETC.
;
IOT77P:	DEV CPUBIT	;HEADER
	JRST @IO77TB(IR)	;BRANCH ON SUBCODE
IO77TB:	JRST PION	;NIO=NOP
	JRST PREADS	;DIA=READ SWITCHES
	JRST PION	;DOA=NOP
	JRST PINTA	;DIB=ACKNOWLEDGE INTERRUPT
	JRST PMSKO	;DOB=MASK OUT
	JRST PIORST	;DIC=I/O RESET
	JRST DOHALT	;DOC=HALT
;
PREADS:	MOVE AR,SR	;READ SWITCHES.
	MOVEM AR,AC(XR2)	;STORE IN INDICATED AC.
PION:	XCT ,IONTB(XR3)	;DO FUNCTION OF ION/IOF
	JRST NOINT	;NO INTERRUPT FOR 1 INSTRUCTION AFTER THAT.
;
PIORST:	PUSHJ P,.TRDN	;SAVE ALL THE CPU'S FAST ACS.
	MOVEI RTN,RSTLST	;SET UP PTR IN  "RTN" TO RESET LIST.
RSTLP:	PUSHJ P,@(RTN)	;CALL THE NEXT RESET ROUTINE.
	SKIPE ,1(RTN)		;END OF LIST?
	AOJA RTN,RSTLP	;NO, GO ON TO NEXT
;
RSTDON:	PUSHJ P,.BLDUP	;IORST DONE, RESTORE FAST ACS.
	XCT ,IONTB(XR3)	;XR3 WAS PRESERVED/RESTORED BY .TRDN/.BLDUP.
	JRST NOINT	;DO CPU FUNCTION.
;
IONTB:	JRST .FETCH	;00=NOP
	TLO BSY,400000	;01=ION
	TLZ BSY,400000	;10=IOF
	JRST .FETCH	;11=NOP
;
PINTA:	SETCM IR,DSBLE	;ACKNOWLEDGE INTERRUPT... ANY OUTSTANDING?
	AND IR,DON
	JFFO IR,.+1	;IF NO, WE WILL LOAD A ZERO.
	MOVE IR,BITTBL(IR+1)	;GET DEVICE# CORRESPONDING TO BIT#.
	MOVEM IR,AC(XR2)	;STORE DEVICE# IN SELECTED AC.
IFN SUPERNOVA!SCNOVA,<	ADDI TM,TINTA>	;COSTS MORE ON SUPERNOVA.
	XCT ,IONTB(XR3)	;DO FUNCTION.
	JRST NOINT
;
PMSKO:	MOVE IR,AC(XR2)	;MASK OUT... GET NEW MASK.
	TRNE IR,CBIT	;CLOCK BIT SET?
	IORI IR,PBIT	;YES, ALSO DISABLE PTP.
	MOVEM IR,DSBLE
	XCT ,IONTB(XR3)	;DO FUNCTION
	JRST NOINT
;
DOHALT:	XCT ,IONTB1(XR3)	;HALT... DO FUNCTION FIRST.
	PUSHJ P,PHALT	;HALT
	JRST NOINT
;
IONTB1:	CAI 0,0	;00=NOP
	TLO BSY,400000	;01=ION
	TLZ BSY,400000	;10=NOP
	CAI 0,0	;11=NOP
;
;NOVA/SUPERNOVA CPU, PAGE 10
;
	INTERN XCHIN,XCHOUT,XMUL,XDIV
XCHIN:	TCHIN	;OPTION TIMERS.
XCHOUT:	TCHOUT
XMUL:	TMUL
XDIV:	TDIV
;
GETCMA:	ADDI TM,TMEM	;FETCH OPERAND, CHECK FOR ILLEGAL ADDRESS.
	CAML MA,XCORE	;MA LEGAL?
	JRST NOMEM	;NO, TRAP AND THEN FETCH ZERO.
	SKIPGE MB,C(MA)	;FETCH AND CHECK FOR BKPT.
	JRST 0(RTN)	;FOUND, DONT SKIP.
	JRST 1(RTN)	;NOT FOUND, SKIP.
;
NOMEM:	PUSHJ P,MEMTRP	;ILLEGAL MA... TAKE TRAP.
	CLEAR MB,	;FETCH ZERO.
	JRST 1(RTN)	;BKPT IMPOSSIBLE, SO SKIP.
;
;
ILLSTO:	PUSHJ P,MEMTRP	;ILLEGAL MA ON MEMORY STORE...
	JRST .FETCH	;TRAP, THEN ABORT OPERATION.
