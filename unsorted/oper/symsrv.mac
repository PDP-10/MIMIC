	TWOSEG
	RELOC 400000
	TITLE SYMSRV	SYMBOL TABLE SERVICE FOR MIMIC ASSEMBLERS
	SUBTTL BINARY SEARCH VERSION
;
;THIS IS THE SECOND, BINARY SEARCHING VERSION OF SYMSRV.
;WE NOW HAVE VERSION 1(LINEAR), BINARY
;(VERSION 2) AND ULTIMATELY GENERALIZED HASH CODING (VERSION 3).
;ALL WILL CONTAIN AT LEAST THE FOLLOWING ENTRY POINTS:
	ENTRY SINSRT	;SYMBOL INSERT
	ENTRY LOOKUP	;SYMBOL LOOKUP
	ENTRY ALLOC	;ALLOCATE CORE BLOCK.
;THE CALLING SEQUENCES GIVEN HEREIN FOR THESE ROUTINES WILL BE
;VALID FOR ALL VERSIONS.  FURTHER, ALL VERSIONS WILL USE ONLY
;AC'S 13-16 (LIKE EXEC SUBROUTINES).

	EXTERN CURSYM,JOBFF,JOBREL
	ARG=13	;ARGUMENT AC
	T1=14
	T2=15
	T3=16
	P=17	;PUSHDOWN LIST POINTER

;FURTHER, THIS MODULE ALSO CONTAINS THE FOLLOWING SUBSIDIARY
;ROUTINES:
	INTERN INITST	;INITIALIZE FREE STORAGE
	INTERN SORT	;SORT THE SYMBOL TABLE ALPHABETICALLY.
	INTERN INITNX	;INITIALIZE NEXT SYMBOL ROUTINE
	INTERN NXTSYM	;GET NEXT SYMBOL.
	DEFINE CPY(A,B)
<	MOVE T3,A
	MOVEM T3,B>
	CORINC=2000	;CORE INCREMENT (1K)
	SUBTTL INSERT/LOOKUP SYMBOLS.

;SINSRT-- INSERT SYMBOL, SKIP IF INSERTED SUCCESSFULLY,
; NON-SKIP IF NO ROOM (DUE TO CORE ERROR).

SINSRT:	PUSH P,ARG	;STACK THE ARGUMENT.
	MOVE ARG,SYMN(ARG)	;GET THE SYMBOL NAME FROM THE ARCHETYPE.
	PUSHJ P,LOOKUP	;LOOK IT UP.
	JRST NTFND	;NOT FOUND. GO CREATE ROOM.
	POP P,T1	;FOUND, RECOVER ADDRESS OF ARCHETYPE.
FOUND:	CPY SYMN(T1),SYMN(ARG)	;A POINTS TO ENTRY.
	CPY SYMV(T1),SYMV(ARG)
	CPY SYMF(T1),SYMF(ARG)
	SETZM SYMC(ARG)	;ZERO CREF BLOCK.
CPOPJ1:	AOS ,(P)	;TAKE SKIP RETURN.
	POPJ P,

NTFND:	POP P,T1	;RECOVER ARCHETYPE ADDRESS.
	MOVE T2,JOBFF	;INCREMENT BOTTOM OF TABLE POINTER.
	ADDI T2,SYMLNT
	CAMG T2,JOBREL	;OVERFLOW BEYOND ALLOCATED AREA?
	JRST NOGETC	;NO, DONT GET CORE.
	MOVE T3,T2	;YES, TRY FOR MORE CORE.
	CORE T3,
	POPJ P,	;NONE TO BE HAD, DIE.
NOGETC:	EXCH T2,JOBFF	;STORE NEW JOBFF, RECOVER OLD.
	HRRO T2,T2	;FORM INFINITE LENGTH PDL.
	POP T2,SYMLNT(T2)	;MOVE ENVERYTHING UP 4 WORDS
	CAIG ARG,(T2)	;UNTIL WE HAVE REACHED ENTRY TO BE MOVED.
	JRST .-2
	MOVE T2,JOBFF	;CALCULATE LENGTH OF NEW SYMBOL TABLE.
	SUB T2,SYMBEG
	MOVEM T2,SYMLEN
	MOVEI T3,1	;CALCULATE INITIAL DELTA FOR SEARCH.
	LSH T3,1
	TDZ T2,T3
	JUMPN T2,.-2
	MOVEM T3,DELTA	;SAVE RESULT.
	JRST FOUND	;GO COPY SYMBOL.

INITST:	MOVE T1,JOBFF	;INITIALIZE FREE STORAGE.
	MOVEM T1,SYMBEG
	MOVEM T1,FREBEG
	SETZM SYMLEN	;SYMBOL TABLE IS EMPTY.
	MOVEI T1,SYMLNT	;SO DELTA IS 1 SYMBOL LENGTH.
	MOVEM T1,DELTA
	POPJ P,

;LOOKUP-- HAIRY BINARY SEARCH ALGORITH CRIBBED FROM PALX11

LOOKUP:	MOVE T2,DELTA	;T2 IS DECLINING INCREMENT.
	MOVE T1,T2	;T1 IS PROBE POSITION, INITIALLY THE
		;SAME AS THE INCREMENT, WHICH IS INITIALLY HALF
		;THE TABLE LENGTH.

	MOVE T3,SYMBEG	;SET UP ADDRESS CONSTANT OF
	SUBI T3,SYMLNT	;  SYMBEG-SYMLNT(T1)
	HRRM T3,SYMPNT	;SO THAT HARDWARE DOES ADDRESS CALCULATION.
SCH1:	LSH T2,-1	;HALVE INCREMENT.
	CAMLE T1,SYMLEN	;IS PROBE WITHIN THE TABLE?
	JRST GODOWN	;NO, MERELY GO DOWN.
	CAMN ARG,@SYMPNT	;MATCH ON CURRENT PROBE?
	JRST SEXT2	;YES.
	CAIGE T2,SYMLNT	;NO, BEFORE INCREMENTING/DECREMENTING,
	JRST SEXT1	;HAVE WE HALVED TO BELOW SYMBOL LENTGTH?
			;YES, DONE, NO MATCH.
	CAMLE ARG,@SYMPNT	;DO WE GO UP OR DOWN?
	TDOA T1,T2	;UP, INCREMENT BY OR'ING.
SCH2:	SUB T1,T2	;DOWN, DECREMENT BY SUBTRACTING.
	JRST SCH1	;GO REPROBE.

GODOWN:	CAIL T2,SYMLNT	;OUT OF BOUNDS.  BEFORE SUBTRACTING, CHECK
	JRST SCH2	;TO SEE IF SEARCH OVER.
	MOVE ARG,JOBFF	;IF IT IS, RETURN JOBFF AS POINTER.
	POPJ P,	;EXIT.

SEXT2:	AOS ,(P)	;OK... SET UP SKIP RETURN.
	MOVEI ARG,@SYMPNT	;CALCULATE ADDR OF ENTRY.
	POPJ P,	;RETURN.

SEXT1:	CAMLE ARG,@SYMPNT	;NOT FOUND, WE MAY HAVE TO ADJUST
	ADDI T1,SYMLNT	;POINTER BY ONE ENTRY.
	MOVEI ARG,@SYMPNT	;CALUCLATE FINAL ADDRESS.
	POPJ P,	;EXIT.
	SUBTTL SORT/SCAN SYMBOL TABLE.

SORT:	POPJ P,	;WITH BINARY SEARCH, SYMBOL TABLE IS
			;ALREADY SORTED.

INITNX:	CPY SYMBEG,SYMPTR	;INITIALIZE THE NEXT ROUTINE.
CPOPJ:	POPJ P,	;EXIT.

NXTSYM:	MOVE ARG,SYMPTR	;RETURN POINTER TO CURRENT SYMBOL.
	MOVEI T1,SYMLNT	;ADVANCE TO NEXT SYMBOL.
	ADDM T1,SYMPTR
	CAML ARG,JOBFF	;IS PAST END OF TABLE,
	SETZ ARG,	;RETURN ZERO.
	POPJ P,
	SUBTTL CORE MANAGEMENT

;ALLOC-- ALLOCATE BLOCK.  CALLED BY
;	MOVEI ARG,EXPON	;BLOCK SIZE IS 2^EXPON
;	PUSHJ P,ALLOC
;	...	;ERROR
;	...	;ALLOCATED.  BLCOK ADDRESS IS IN ARG
;ALTERNATELY, YOU CAN SPECIFY AN ARBITRARY SIZE BLOCK, BUT
;THIS WILL NOT BE SUPPORTED IN OTHER PACKAGES.
;	MOVEI ARG,BLOCKSIZE
;	PUSHJ P,SALLOC
;	...	;ERROR
;	...	;OK.

	INTERN SALLOC
ALLOC:	MOVE T1,ARG	;ALLOC... GET ACTUAL BLOCK SIZE BY
	MOVEI ARG,1	;CALCULATING 2^ARGUMENT.
	LSH ARG,(T1)	;NOW DO STRAIGHT ALLOCATION.
SALLOC:	ADD ARG,FREBEG	;CALCULATE NEW BEGINNING OF FREE STORAGE.
	CAML ARG,FREEND	;DOES IT EXCEED END OF FREE STORAGE?
	JRST GETMOR	;YES, TRY TO GET MORE.
FINISH:	EXCH ARG,FREBEG	;UPDATE BEGINNING OF FREE STOREAGE,
	AOS (P)	;RETURN OLD BEGINNING OF FREE STORAGE AS START OF BLOCK.
	POPJ P,

GETMOR:	MOVE T1,JOBFF	;GET CURRENT END OF SYMBOL TABLE.
	ADDI T1,CORINC	;ADD ON AMOUNT WE INTEND TO MOVE IT BY.
	CAMG T1,JOBREL	;ARE WE NOW OUT OF BOUNDS?
	JRST JUSTMV	;NO, GO DO MOVE.
	MOVE T3,T1	;YES, GET ANOTHER BLOCK OF CORE.
	CORE T3,
	POPJ P,	;FAILED, EXIT.
JUSTMV:	EXCH T1,JOBFF	;SAVE JOBFF+INCREMENT AS NEW JOBFF.
	MOVEI T2,CORINC	;SAVE CURSYM+INCREMENT AS NEW CURSYM, SINCE
	ADDM T2,CURSYM	;ALL SYMBOLS WILL BE MOVED 1024 WORDS.
	ADDB T2,SYMBEG	;SAVE SYMBEG+INCREMENT AS NEW SYMBEG.
	SUB T2,JOBFF	;CALCULATE #OF WORDS TO MOVE AS
			;(SYMBEG+INCR)-(JOBFF+INCR).
	HRRO T1,T1	;FORCE INFINITE PUSH DOWN DEPTH AND
	POP T1,CORINC(T1)	;MOVE A WORD.
	AOJLE T2,.-1	;INCREMENT COUNT, IF NOT OVERFLOW, GO BACK.
	JRST FINISH	;MOVE DONE, GO FINISH OFF ALLOCATION.

	LIT
	SUBTTL VARIABLES

	RELOC 0
FREBEG:	BLOCK 1	;POINTS TO START OF FREE STORAGE.
SYMBEG:FREEND:	BLOCK 1	;POINTS TO START OF SYMTAB (=END OF FREE STORE)
SYMPTR:	BLOCK 1	;TEMPORARY.
DELTA:	BLOCK 1	;INITIAL SEARCH PROBE
SYMLEN:	BLOCK 1	;TABLE LENGTH
SYMPNT:	0(T1)	;ADDRESS CONSTANT, FILLED IN LATER.
	END
