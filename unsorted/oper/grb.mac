
	SUBTTL EVALUATE LINE SUBROUTINE
;EVLIN1--EVALUATE LINE ONCE OPCODE HAS BEEN FOUND.  IN THE INITIAL
;PHASE, WE ISOLATED THE OPCODE IN "NAME". WE NOW
;PROCEED TO EVALUATE THE REST OF THE LINE.

EVLIN1:	MOVEI AC,1B^L<OPTEND-OPTBL>	;SET UP DELTA AND INCREMENT
	MOVEI AC1,1B^L<OPTEND-OPTBL>/2	;FOR BINARY SEARCH.
OSCH1:	CAMN NAME,OPTBL-2(AC)	;PROBE.  MATCH?
	JRST FOUNDO	;YES,.
	CAML NAME,OPTBL-2(AC)	;NO, UP OR DOWN?
	TDOA AC,AC1	;UP, INCREMENT.
OSCH2:	SUB AC,AC1	;DOWN, DECREMENT.
	LSH AC1,-1	;HALVE INCREMENT.
	JUMPE AC1,UNDFOP	;IF ZERO, NO GO.
	CAILE AC,OPTEND-OPTBL	;OUT OF BOUNDS?
	JRST OSCH2	;YES, GO DOWN.
	JRST OSCH1	;NO, RE PROBE.

FOUNDO:	MOVEI ARG,OPTBL-2(AC)	;FOUND, CALCULATE ADDRESS.
	HRRZ T,SYMV(ARG)	;PICK UP VALUE AND
	MOVEM T,WORD1	;SAVE IT.
	PUSHJ P,CCOMMA	;COUNT COMMAS IN STATEMENT
	HLRZ AC,SYMV(ARG)	;GET CLASS#/PROCESSOR.
	CAIL AC,MAXCLS		;IS IT A CLASS#?
	JRST (AC)		;NO, PROCESSOR, GO IT!
	TRO AF,QVAL+QPUN+QINF+QLOC	;YES, A REAL INSTRUCTION,
	JRST CLSSTB(AC)		;SET INSTRUCTION FLAGS AND GO TO PROPER
CLSSTB:	JRST CPOPJ	;CLASS 0= NO OPERANDS
	JRST CLASS1		;1= FO
	JRST CLASS2		;2= FOI/FOA/SFA ECT
	JRST CLASS3		;3= SF
	JRST CLASS4		;4= JC/JCD
	JRST CLASS5		;5= JU/JUD
	JRST CLASS6		;6= RR/RRC
	JRST CLASS7		;7= ZR/ZRC
	JRST CLASS8		;8= RS/RSC
	JRST CLASS9		;9= RM
	JRST CLSS10		;10= ZM
	JRST CLSS11		;11= MR
	JRST CLSS12		;12= MS
	MAXCLS=.-CLSSTB


CCOMMA:	HRRZ COMMA,BUFPTR	;COUNT COMMAS. GET CURRENT BUFFER PTR.
	SUBI COMMA,1		;BACK UP 1 FOR CHAR IN "CHAR"
CLP:	MOVE CHR,(COMMA)	;GET CURRENT CHARACTER.
	CAIN CHR,","	;IS IT A COMMA?
	AOBJP COMMA,CLP	;YES, INCREMENT COUNT, ADVANCE TO NXT CHAR.
	CAIN CHR,";"	;IS IT SEMI COLON?
	JRST CDONE	;YES, SCAN IS DONE.
	CAIN CHR,042	;IS IT DOUBLE-QUOTE?
	AOJA COMMA,ADDONE	;YES, THEN NEXT CHARACTER IS IGNORED.
	CAIE CHR,CRTN	;NO, CARRIAGE RETURN.
ADDONE:	AOJA COMMA,CLP	;ADVANCE TO NEXT CHR.
CDONE:	HLRZ COMMA,COMMA	;RETURN COUNT IN COMMA WHEN DONE.
	POPJ P,
;GRI-909/99/919 ASSEMBLER, PART B, PAGE 1A
;UNDEFINED OR NON-STANDARD OPCODE.
;
UNDFOP:	MOVE ARG,NAME	;LOOK UP SYMBOL.
	PUSHJ P,LOOKUP
	JRST NTDFOP	;NOT FOUND.
	MOVE AC,SYMF(ARG)	;FOUND, IS IT DEFINED?
	TLNE AC,QUNV
	JRST NTDFOP	;NO.
	TLNN F,QPASS1	;IF IN PASS 2, CREF THE REFERENCE.
	PUSHJ P,CREF
	CPY SYMV(ARG),WORD1	;YES, VALUE OF SYMBOL IS OPCODE.
STOPT:	TRO AF,QVAL+QLOC+QPUN+QTWO+QINF	;TREAT AS 2 WORD INSTRUCTION
	PUSHJ P,EVALXP	;IF NO MORE EXPRESSIONS,
	TRZA AF,QTWO+QINF	;TREAT AS 1 WORD INSTRUCTION.
	MOVEM EXPVAL,WORD2	;SAVE 2ND WORD, IF ANY.
	POPJ P,

NTDFOP:	CLEARM ,WORD1	;NOT DEFINED OP.  VALUE IS ZERO.
	TRO AF,QUERR	;SET UNDEFINED ERROR.
	JRST STOPT	;GO DO REST.
;PAGE 2

;GRI-909 ASSEMBLER, PART B, PAGE 2
;OPCODE EVALUATORS.  FOR EACH CLASS, THE BASIC OPCODE IS IN WORD1
;AND THE PROPER 1ST WORD FLAGS HAVE BEEN SET.

;CLASS 1:	FO MOD,DST

CLASS1:	 GTAEXP MODPTR		;EXPRESSION 1--> MODFIELD
	CHNXT TOOFEW		;CHECK FOR TERMINATING ",".
	GTAEXP DSTPTR		;EXPRESSION 2--> DSTFLD
	POPJ P,			;EXIT

;CLASS 2:	FOI/FOM/FOA/SFA/SFM MOD
;CLASS 3:	SF SRC,MOD

CLASS3:	GTAEXP SRCPTR		;EXPRESSION 1--> SRCFIELD	
	CHNXT TOOFEW		;CHECK FOR TERMINATING COMMA
CLASS2:	GTAEXP MODPTR		;EXPRESSION 2--> MODPTR
	POPJ P,			;EXIT

;CLASS 4:	JC/JCD SRC,MOD,DST
;CLASS 5:	JU/JUD DST

CLASS4:	GTAEXP SRCPTR		;EXPR 1--> SRCFIELD
	CHNXT TOOFW2		;CHECK FOR TERMINATING COMMA.
	GTAEXP CNDPTR		;EXPR 2--> MODFIELD
	CHNXT TOOFW2		;CHECK FOR TERMINATING COMMA.
CLASS5:	TRO AF,QTWO	;THIS IS A TWO WORD INSTRUCTION
	GTEXP			;GET THIRD EXPRESSION.
	MOVEM EXPVAL,WORD2	;STORE AS 2ND WORD
	POPJ P,			;EXIT

;CLASS 6:	RR/RRC SRC[,MOD],DST
;CLASS 7:	ZR/ZRC [MOD,]DST

CLASS6:	GTAEXP SRCPTR		;EXPR 1--> SRCFIELD
	CHNXT TOOFEW		;MUST BE AT LEAST ONE MORE EXPRESSION.
CLASS7:	GTAEXP			;GET EXPR 2.
	CHNXT C7A		;IS THERE A THIRD EXPR?
	DPB EXPVAL,PMDPTR	;YES, 2ND EXPR IS MODFIELD.
	GTAEXP			;GET 3RD EXPR.

C7A:	DPB EXPVAL,DSTPTR	;STORE IN DSTFIELD.
	POPJ P,			;EXIT.

TOOFW2:	CLEARM ,WORD2		;TOO FEW EXPRESSIONS, 2 WORD MODE...
TOOFWX:	TRO AF,QTWO		;SET 2 WORD MODE AND CLEAR 2ND WORD
TOOFEW:	TROA AF,QTFERR		;SET ERROR FLAG AND SKIP.
EXTERR:	TRO AF,QXTERR	;SET EXTERN ERROR FLAG.
	POPJ P,





;PAGE 3

;GRI-909 ASSEMBLER, PART B, PAGE 3
;CLASS EVALUATORS, CONTD

;CLASS 8:	RS/RSC SRC[,MOD]

CLASS8:	GTAEXP SRCPTR		;EXPR 1--> SRCFIELD
	DPB EXPVAL,DSTPTR	;ALSO INTO DSTFIELD.
	CHNXT CPOPJ		;IF NO COMMA, NO MOD FIELD.
	GTAEXP PMDPTR		;OTHERWISE, EXPR 2--> MODFIELD
	POPJ P,			;EXIT.

;CLASS 9:	RM/RMID/RMD/RMI SRC,[MOD,]ADDR
;CLASS 10:	ZM/ZMD/ZMI/ZMID [MOD,]ADDR

CLASS9:	GTAEXP SRCPTR		;EXPR 1--> SRCFIELD
	CHNXT TOOFW2		;MUST BE AT LEAST A 2ND EXPR.
CLSS10:	TRO AF,QTWO	;SET TWO WORD FLAG.
	SOJL COMMA,C10A	;IF ONLY TWO EXPRESSIONS, NO MOD FIELD.
	GTAEXP PMDPTR	;EXPRESSION 2--> MODFIELD.
	GETCHR		;REPRIME THE SCANNER
C10A:	GTEXP		;EXPRESSION 3--> ADDRESS.
	MOVEM EXPVAL,WORD2	;SAVE AS 2ND WORD.
	POPJ P,

;CLASS 11:	MR/MRD/MRI/MRID ADDR,[MOD,]DRT

CLSS11:	TRO AF,QTWO	;SET TWO WORD FLAG.
	GTEXP			;EXPR 1--> WORD 2 AS ADDRESS FIELD.
	MOVEM EXPVAL,WORD2
	CHNXT TOOFWX		;MUST BE AT LEAST TWO EXPRESSIONS.
	GTAEXP			;GET 2ND EXPRESSION. IS THERE A 3RD?
	CHNXT C11A		;IF NOT, 2ND EXPR IS DSTFIELD.
	DPB EXPVAL,PMDPTR	;IF SO, 2ND EXPR IS MODFIELD.
	GTAEXP			;GET 3RD EXPRESSION.
C11A:	DPB EXPVAL,DSTPTR	;SAVE AS DSTFIELD.
	POPJ P,			;EXIT.

;CLASS 12:	MS ADDR[,MOD]

CLSS12:	TRO AF,QTWO	;SET TWO WORD FLAG.
	GTEXP			;GET FIRST EXPRESSION.
	MOVEM EXPVAL,WORD2	;SAVE AS ADDRESS, 2ND WORD.
	CHNXT CPOPJ		;IF THERE IS A NEXT EXPR,
	GTAEXP PMDPTR		;IT IS THE MODFIELD.
	POPJ P,			;EXIT.




;PAGE 4

;GRI-909 ASSEMBLER, PART B, PAGE 4
;PSEUDO-OPERATION PROCESSORS

PNLIST:	TRNN F,QOVRID		;FEATURES ENABLED. IF ENABLED, AND IF NO
	TLO F,QANLST		;OVERRIDE, DISABLE LISTING.
	POPJ P,			;EXIT.

PLIST:	TRNN F,QOVRID		;IS NO OVERRIDE, ENABLE LISTING.
	TLZ F,QANLST
	POPJ P,			;EXIT

PEJECT:	TLO AF,QFF	;SET FORM FEED FLAG ON EJECT.  NOTE THAT
	POPJ P,	;FORM FEED WILL OCCUR BEFORE EJECT, AS IN REAL ASSB.

PTITLE:	SKIPA AC,[POINT 7,$TITLE]	;TITLE PSEUDO...
PSBTTL:	MOVE AC,[POINT 7,$SUBTTL]	;SUBTITLE PSEUDO...
	ADVCHK UNDFOP		;CHECK FOR ILLEGAL OP.
	TLNN F,QPASS1		;ARE WE IN PASS1?
	JRST STL		;NO, ORDINARY PROCESSING.
	SKIPE ,(AC)		;YES, IS THE SELECTED BUFFER EMPTY?
	POPJ P,			;NO, LEAVE ONLY FIRST INSTANCE IN FOR THE MOMENT.
STL:	MOVE CHR,CHAR 		;GET CURRENT CHARACTER
	CAIN CHR,CRTN	;IS CHARACTER END OF LINE?
	CLEAR CHR,		;YES, SET CHARACTER TO ZERO.
	IDPB CHR,AC		;AND STORE IN TITLE BUFFER OR SBTTL BUFFER.
	JUMPE CHR,CPOPJ		;IF CHARACTER WAS ZERO, EXIT.
	GETCHR			;GET NEXT CHARACTER AND
	JRST STL		;GO BACK.

PDECIM:	SKIPA AC,[^D10]		;DECIM COMMAND... SET PREVAILING RADIX TO 10.
POCTAL:	MOVEI AC,^D8		;OCTAL COMMAND... SET PREVAILING RADIX TO 8.
	MOVEM AC,PRADIX
	POPJ P,		;EXIT.

PEND:	TLO AF,QEND		;SET END FLAG.
	TLZ F,QANLST	;RESTORE LISTING IF OFF.
	JRST PREL	;PRETEND THAT REL STATEMENT PRECEDED.


;GRI-909/99/919 ASSEMBLER, PART B, PAGE 4A
;LOC, REL, ENTRY PSEUDO-OPERATIONS.
;
;FOR LOC, WE EVALUATE THE ATTACHED EXPRESSION AND USE IT TO
;SET THE LOCATION COUNTER.
;
;FOR REL, WE SET THE LOCATION COUNTER FROM THE LAST RELOCATABLE
;VALUE PRIOR TO A LOC <ABS EXPR> STATEMENT.
;
;ENTRY DEFINES THE ATTACHED SYMBOLS AT ENTRY POINTS.
;
PLOC:	TRO AF,QLOC	;PRINT LOCATION FIELD.
	GTREXP	;GET RELOCATABLE EXPRESSION.
	MOVEM EXPVAL,WORD1	;SAVE FOR OUTPUT.
	HLRZ AC,EXPVAL	;GET RELOC. CONST. AND BRANCH
	JRST LOCTBL+RELBAS(AC)
LOCTBL:	JRST ILLOC	;-1, NEG REL, IS ILLEGAL
	JRST ABSLOC	;0, ABSOLUTE
	JRST RELLOC	;1, RELOCTABLE

ABSLOC:	HLRZ AC,CURLOC	;ABSOLUTE, GET CURRENT MODE.
	JUMPE AC,.+3	;ALSO ABSOLUTE? THEN DO NOTHING.
	MOVE AC,CURLOC	;FORMERLY RELOCATABLE.  SAVE CURLOC
	MOVEM AC,OLDLOC	;AS OLDLOC FOR NEXT REL STATEMENT.
RELLOC:	MOVEM EXPVAL,CURLOC	;SAVE EXPR RESULT AS LOCN CNTR.
	TLNE F,QPASS1	;IF IN PASS 1, EXIT.
	POPJ P,		;IF IN PASS 2,
	PUSHJ P,OTPDAT	;PUNCH THE CURRENT DATA BUFFER
	PUSHJ P,INDBNT	;INITIALIZE THE PUNCH BUFFER FOR NEXT ITEMS.
	POPJ P,	;EXIT

PREL:	TRO AF,QLOC	;PRINT LOCATION FIELD.
	MOVE EXPVAL,OLDLOC	;GET LAST SAVED VALUE.
	HLRZ AC,CURLOC	;ARE WE RELOCATABLE NOW?
	JUMPE AC,RELLOC	;NO, ABSOLUTE, REL GETS EXECUTED.
	POPJ P,	;OTHERWISE DO NOTHING.

ENTLP:	GETCHR	;BETWEEN SYMBOLS, ADVANCE OVER COMMA.
PENTRY:	GETNAM	;LOOK FOR A SYMBOL.
	JUMPE NAME,ENTERR	;NOT FOUND, PUNT.
	MOVE ARG,NAME	;LOOK UP THE SYMBOL.
	PUSHJ P,LOOKUP
	PUSHJ P,MAKUND	;IF NOT FOUND, CREATE IT.
	MOVSI AC,QENT	;WHETHER FOUND OR CREATED, SET ENTRY BIT
	IORB AC,SYMF(ARG)	;IN SYMBOL BLOCK.
	TLNE F,QPASS1	;ARE WE IN PASS 2?
	JRST .+4	;NO.
	PUSHJ P,CREF	;YES, CREF THIS REFERENCE
	TLNE AC,QUNV	;YES, THEN UNDEFINED ENTRIES ARE VERBOTEN.
	TRO AF,QNERR+QUERR
	MCHR <",">	;SYMBOL ENDS IN COMMA?
	JRST ENTLP	;YES, ON TO NEXT.
	POPJ P,		;NO, EXIT.

ILLOC:	TROA AF,QRERR	;BAD RELOCATION IN LOC STATEMENT.
ENTERR:	TRO AF,QNERR	;ENTRY ERROR.
	POPJ P,
;GRI-909/99/919 ASSEMBLER, PART B, PAGE 4B
;EXTRN PROCESSING.  SYMBOLS DEFINED THROUGH THE EXTRN FEATURE
;ARE SIMPLY UNDEFINED'S WITH A SPECIAL FLAG WHICH CAUSES THE U
;ERROR TO BE SUPPRESSED IF AN EXTERN REFERENCE IS GENERATED.
;
PEXTRN:	ADVCHK UNDFOP	;EXTRN IS UNDEFINED IF NO ADVANCED FEATURES.
EXTNLP:	GETNAM		;GET A SYMBOL NAME.
	JUMPE NAME,EXTERR	;NONE FOUND, ERROR.
	MOVE ARG,NAME	;LOOK THE SYMBOL UP.
	PUSHJ P,LOOKUP
	PUSHJ P,MAKUND	;IF NOT FOUND, CREATE IT.
	MOVSI AC,QEXT	;SET EXTERN FLAG IN SYMBOL BLOCK.
	IORB AC,SYMF(ARG)
	TLNE F,QPASS1	;ARE WE IN PASS 2?
	JRST .+4	;NO.
	PUSHJ P,DCREF	;YES, CREF THIS REFERENCE.
	TLNN AC,QUNV	;IS SYMBOL DEFINED?
	TRO AF,QXTERR	;YES, ERROR, EXTERNS CANNOT BE DEFINED.
	MCH <",">	;DOES FIELD END IN COMMA?
	POPJ P,		;NO, EXIT.
	GETCHR		;YES, ONTO NEXT SYMBOL.
	JRST EXTNLP
;PAGE  5

;GRI-909 ASSEMBLER, PART B, PAGE 5

;CONSTANT AND DATA GENRATION PSEUDO-OPERATIONS.


PPKB:	TRO AF,QLOC+QVAL+QPUN	;PKB... SET PRINT/PUNCH FLAGS.
	GTAEXP LHBYTE		;EXPR 1--> BITS 15-8.
	CHNXT TOOFEW		;THERE MUST BE 2 EXPRESSIONS.
	GTAEXP RHBYTE		;EXPR 2--> BITS 7-0.
	POPJ P,			;EXIT

PWRD:	GTEXP			;GET THE FIRST (NEXT) EXPRESSION AND SAVE ITS VALUE
	MOVEM EXPVAL,WORD1
	TRO AF,QVAL+QLOC+QPUN	;SET FLAGS TO PRINT AND PUNCH.
	CHNXT CPOPJ		;LOOK FOR NEXT EXPRESSION. IF NONE, EXIT,
				;SO THAT HIGHER LEVEL ROUTINE CAN PRINT RESULT
				;OF LAST EXPRESSION FOUND.
	PUSHJ P,OUTPUT		;NOT LAST, OUTPUT CURRENT VALUE.
	TRZ AF,QLIN		;DONT PRINT LINE AFTER 1ST PRINT OPERATION.

	JRST PWRD		;START OVER

PASC:	MOVE CHR,CHAR		;ASC COMMAND... SAVE FIRST CHARACTER AS
	MOVEM CHR,TRMCR		;STRING DELIMITER.
	CAIN CHR,CRTN	;IS IT END OF LINE?
	JRST BADASC		;YES, ILLEGAL COMMAND.

ASCLP:	GETCHR			;GET NEXT CHARACTER.
	CAMN CHR,TRMCR		;IS IT END OF STRING?
	JRST REPRIM		;YES, EXIT.
	CAIN CHR,CRTN	;IS IT END OF LINE?
	JRST CPOPJ	;YES, TREAT AS TERMINATOR.
	IORI CHR,200	;FORCE ON HIGH ORDER BIT.
	SKIPN AC,WORD1		;NO, ANYTHING GENERATED YET?
	JRST PUTLH		;NOTHING YET, STORE INTO LEFT HALF.
	TRNN AC,000377		;BOTH HALVES FILLED?
	JRST PUTRH		;NO, STORE INTO RIGHT HALF.
PUTASC:	TRO AF,QPUN+QVAL+QLOC	;SET PRINT/PUNCH FLAGS
	PUSHJ P,OUTPUT		;AND DO OUTPUT TO DATE.
	TRZ AF,QLIN		;AFTER 1ST LINE, KILL LINE BUFFER PRINT.
PUTLH:	LSH CHR,^D8		;STORE CHARACTER INTO OUTPUT WORD, LEFT HALF.
	MOVEM CHR,WORD1
	TRO AF,QVAL+QPUN+QLOC	;SET PRINT/PUNCH FLAGS.
	JRST ASCLP		;GET NEXT CHARACTER.
PUTRH:	IORM CHR,WORD1		;STORE CHARACTER INTO OUTPUT WORD, RIGHT HALF.
	JRST ASCLP		;SET NEXT CHARACTER.
REPRIM:	GETCHR			;AT EXIT, PRIME FURTHER SCANNERS.
	POPJ P,			;EXIT.




IFN GRI919,<
PBLK:	GTAEXP	;BLK PSEUDO-OPERATION.  GET BLOCK COUNT.
	JUMPE EXPVAL,CPOPJ	;EXIT ON COUNT OF ZERO.
	MOVEM EXPVAL,WORD2	;SAVE AS COUNTER.
	CHNXT TOOFEW	;CHECK FOR ANOTHER EXPRESSION.
BLKLP:	GTEXP	;GET FIRST/NEXT EXPRESSION.
	MOVEM EXPVAL,WORD1	;SAVE RESULT FOR OUTPUT.
	TRO AF,QVAL+QLOC+QPUN	;FORCE OUTPUT AND LISTING.
	CHNXT FILLCT	;IS THERE ANOTHER EXPRESSION?
	PUSHJ P,OUTPUT	;YES, OUTPUT CURRENT VALUE.
	TRZ AF,QLIN	;AFTER 1ST EXPR, DONT PRINT LINE.
	SOSE ,WORD2	;DECREMENT COUNT.  ZERO?
	JRST BLKLP	;NO, GO GET NEW EXPRESSION.
	POPJ P,	;YES, EXIT.

FILLCT:	SOSN ,WORD2	;NO MORE EXPRESSIONS ON LINE.  IS THIS
	POPJ P,	;THE LAST WORD?  IF SO, EXIT, HIGHER LEVEL ROUTINE
		;WILL OUTPUT IT.
	PUSHJ P,OUTPUT	;NO, OUTPUT IT HERE.
	TRZ AF,QLIN
	JRST FILLCT	;GO COUNT DOWN COUNT.
>
;PAGE 6

;GRI-909 ASSEMBLER, PART B, PAGE 6
;SYNTAX OPERATORS AND EVALUATORS.
;SUBTTL SYNTAX OPERATORS

GTNAMS:	CLEAR NAME,		;GET A NAME ROUTINE... CLEAR NAME HOLDER.
	MOVE AC,[POINT 6,NAME]	;SET UP POINTER TO NAME HOLDER.
	MOVE CHR,CHAR		;GET CURRENT CHARACTER.

CHKIT:	CAIE CHR,"@"		;IS IT A SPECIAL LETTER, I.E.,
	CAIN CHR,"$"		;@,$, OR $
	JRST STORIT		;YES.
	CAIN CHR,"%"
	JRST STORIT
	CAIL CHR,"A"
	CAILE CHR,"Z"
	POPJ P,			;NOT A LETTER, EXIT.
STORIT:	SUBI CHR,40		;CHARACTER PASSES... CONVERT TO SIXBIT
	TRNN NAME,007700	;HAVE WE GOTTEN 5 CHARACTERS YET?
	IDPB CHR,AC		;NO, STORE NEW CHARACTER.
	GETCHR			;GET NEXT CHARACTER.
	CAIL CHR,"0"		;IS IT A NUMBER?
	CAILE CHR,"9"
	JRST CHKIT		;NO, CHECK FOR  A LETTER.
	JRST STORIT		;YES, GO APPEND TO NAME.

GTNUMS:	CLEARB NUM,AC2		;GET A NUMBER ROUTINE...CLEAR NUMBER HOLDER.
NUMLP:	MOVE CHR,CHAR		;GET FIRST CHARACTER.
	CAIL CHR,"0"		;IS IT A DIGIT?
	CAILE CHR,"9"
	POPJ P,			;NO, FAIL.
STONUM:	SUBI CHR,"0"		;YES, CONVERT FROM ASCII TO BINARY.
	CAML CHR,PRADIX		;IS THE CHARACTER LEGAL IN CURRENT RADIX?
	TRO AF,QDERR		;NO, ERROR.
	IMUL NUM,PRADIX		;NUMBER= NUMBER*RADIX+ DIGIT.
	ADD NUM,CHR
	IMULI AC2,^D10		;AC2 HOLDS SAME NUMBER BASE 10.
	ADD AC2,CHR
	GETCHR			;GET NEXT CHARACTER.
	CAIL CHR,"0"		;IS THIS A DIGIT?
	CAILE CHR,"9"
	JRST NMEXIT		;NO, EXIT, END OF NUMBER.
	JRST STONUM		;YES, GO STORE.




;
NMEXIT:	CAIE CHR,"."		;DOES # END IN PERIOD?
	JRST MSKNUM		;NO.
	TRZ AF,QDERR		;YES, CLEAR PROBABLE RADIX ERROR.
	MOVE NUM,AC2		;RETURN DECIMAL VERSION OF NUMBER.
	GETCHR			;REPRIME THE SCANNER.
MSKNUM:	ANDI NUM,177777		;CUT RESULT TO 16 BITS AND
	JRST CPOPJ1		;EXIT.
;PAGE 7

;GRI-909 ASSEMBLER, PART B, PAGE 7

DOTAIL:	ABS		;ABSORB TAIL OF STATEMENT, INCLUDING COMMENT.
	MCH <";">	;IS NEXT CHARACTER A COMMENT DELIMITER
	CAIN CHR,CRTN	;OR END OF LINE?
	JRST FLSHBUF	;YES, FLUSH REST OF BUFFER.
	CAIN CHR,","		;NO EOL... IS CHARACTER A COMMA?
	TROA AF,QTMERR		;YES, TOO MANY EXPRESSIONS.
BADASC:	TRO AF,QSERR		;NO, A SYNTAX ERROR.
FLSHBUF:	AOS AC,BUFPTR	;ADVANCE BUFFER POINTER
	SKIPE ,(AC)	;ARE WE AT END?
	JRST FLSHBUF	;NO, CONTINUE FLUSHING.
	POPJ P,		;EXIT.

ABSLP:	GETCHR			;ABSORB SPACES/TABS. TRIVIAL
ABSORB:	MCH " "
	CAIN CHR,"	"
	JRST ABSLP
	POPJ P,

