	SUBTTL SYMBOL TABLE ROUTINES
;
;THE LOADER MAINTAINS A NON-SORTED, NON-PROTECTED LINEARLY
;ACCESSED SYMBOL TABLE WHICH THE OUTSIDE WORLD IS FREE TO MASH.
;THE SYMBOL TABLE IS IN STANDARD MIMIC FORMAT:
;WORD 0:	NAME (SIXBIT)
; 1:		VALUE
; 2:		FLAGS

	SYMLNT=3	;LENGTH OF A SYMBOL TABLE ENTRY.

;THE FOLLOWING SUBROUTINES ARE AVAILABLE FOR TABLE MASHING:
;$STSYM-- STORE SYMBOL AT END OF TABLE
;$LKSYM-- LOOKUP SYMBOL IN TABLE
;$LKGLB-- LOOKUP GLOBAL IN TABLE.  A GLOBAL IS A SYMBOL WITH
;	EITHER THE ENTRY OR EXTERN FLAG SET.
;$PURGE-- REMOVE SYMBOL ENTRY
;SALLOC-- ALLOCATE FREE STORAGE

	ENTRY $PURGE,$STSYM
	INTERN $LKSYM,$LKGLB,$LKOWN
	EXTERN JOBREL,JOBFF
	INTERN $HI,$LO,$MAX,$MIN,$MASK
NOCORE:	MOVE T2,T1	;NO CORE FOR SYMBOL INSERT
	CORE T2,	;THEN TRY FOR MORE.
	POPJ P,	;NO GO, EXIT.  OTHERWISE, START OVER.
$STSYM:	MOVE T1,JOBFF	;GET POINTER TO END OF TABLE.
	ADDI T1,SYMLNT	;ADD ON ROOM FOR NEW ENTRY.
	CAMLE T1,JOBREL	;IS THERE ENOUGH CORE?
	JRST NOCORE	;NO, GET MORE.
	MOVEM T1,JOBFF	;SAVE UPDATED END-OF-TABLE POINTER.
	CPY SYMN(A),SYMN-SYMLNT(T1)
	CPY SYMV(A),SYMV-SYMLNT(T1)
	CPY SYMF(A),SYMF-SYMLNT(T1)
	TLO F,QUSORT	;MARK SYMBOL TABLE AS UNSORTED.
	MOVEI A,-SYMLNT(T1)	;COPY ENTRY AND RETURN ADDRESS
	JRST CPOPJ1	;OF NEW ENTRY.

$PURGE:	MOVE T1,JOBFF	;PURGE SYMBOL... GET CURRENT END OF TABLE.
	SUBI T1,SYMLNT	;GO TO BEGINNING OF LAST ENTRY.
	CAMG T1,A	;IS IT THE ENTRY TO BE ZAPPED, OR IS
	JRST NOMOVE	;THE TABLE EMPTY.
	HRLI A,SYMLNT(A)	;FROM IS ARG+SYMLNT/TO IS ARG.
	BLT A,(T1)	;MOVE TO CURRENT END-SYMLNT,
	TLO F,QUSORT	;MARK SYMBOL TABLE AS UNSORTED.
NOMOVE:	MOVEM T1,JOBFF	;AND UPDATE END OF TABLE POINTER.
	POPJ P,

$LKGLB:	SKIPA T,$EMASK	;LOOKUP GLOBAL.
$LKSYM:	SETO T,		;LOOKUP ALL.
	MOVEM T,$MASK	;USE ONLY GLOBAL FLAGS.
$LKOWN:	SKIPA T,SYMBEG	;MASK HAS BEEN DEFINED. GET TABLE POINTER.
SYMLKL:	ADDI T,SYMLNT	;ON ALL SUBSEQUENT PASSES, INCREMENT IT.
	CAML T,JOBFF	;END OF TABLE?
	POPJ P,		;YES, FAILURE.
	CAME A,SYMN(T)	;NO.  NAME MATCH?
	JRST SYMLKL	;NO, KEEP GOING.
	MOVE T1,SYMF(T)	;YES.  FLAG MATCH?
	TDNN T1,$MASK
	JRST SYMLKL	;NO, KEEP GOING.
	MOVE A,T	;YES, RETURN ADDRESS OF THIS ENTRY.
	JRST CPOPJ1
;LEXEC C, PAGE 2
;STORAGE ALLOCATOR.  ALLOCATES A CONTIGUOUS BLOCK OF STORAGE
;STARTING AT "FREBEG", IF NECESSARY RELOCATING THE SYMBOL TABLE.
;
SALLOC:	MOVE T1,A	;SAVE INCREMENT FOR LATER USE.
	MOVE T,A
	ADD A,FREBEG	;ADD INCREMENT ONTO PRESENT START OF FREE
	CAML A,FREEND	;STORAGE.  DOES IT OVERLAP THE END?
	JRST GETMOR	;YES, GET MORE CORE.
FINISH:	EXCH A,FREBEG	;NO, RETURN OLD FREBEG AS START OF NEW AREA.
	JRST CPOPJ1

GETMOR:	ADD T1,JOBFF	;GET MORE CORE.  ADD INCREMENT ONTO JOBFF.
	CAMG T1,JOBREL	;IS THERE ENOUGH OVERALL CORE?
	JRST JUSTMV	;YES, JUST MOVE THE SYMBOL TABLE.
	MOVE T2,T1	;NO, GET MORE CORE!
	CORE T2,
	POPJ P,		;FAILURE.

JUSTMV:	ADDM T,SYMBEG	;UPDATE SYMBEG BY ADDING ON INCREMENT.
	HRRO T,JOBFF	;GET OLD JOBFF (WITH PHONY POP COUNT)
	MOVEM T1,JOBFF	;STORE NEW JOBFF.
	POP T,(T1)	;MOVE FROM "OLD JOBFF" TO "NEW JOBFF".
	CAMLE T1,SYMBEG	;HAVE WE MOVED THE ENTIRE SYMBOL TABLE?
	SOJA T1,.-2	;NO DECREMENT "NEW" AND CONTINUE.
	JRST FINISH	;GO FINISH OFF.

INITFS:	MOVEI T,LEXEC	;SET UP REENTRY ADDRESS.
	MOVEM T,JOBREN
	CPY $DFINF,INFBLK+FDFEXT	;SET UP INPUT AND OUTPUT
	CPY $DFBIN,OTFBLK+FDFEXT	;BINARY DEFAULT EXTENSIONS.
	AND F,[QCCL+QCCLC+QEOF,,0]	;CLEAR ALL FLAGS EXCEPT CCL FLAG
	SETZM ,TGR	;ZERO LOADER TEMPORARIES.
	MOVE T,[XWD TGR,TGR+1]
	BLT T,TGREND
	HLRZ T,JOBSA	;INITIALIZE GREE STORAGE.
	MOVEM T,JOBFF
	MOVEM T,FRESTR
	MOVEM T,FREBEG	;CURRENT BEGINNING,
	MOVEM T,FREEND	;AND END.
	POPJ P,		;EXIT


	EXTERN JOBSA
	SUBTTL VARIABLES AND TABLES
	LIT
	RELOC 0

TGR:
EXAMIN:	BLOCK 1
$HI:	BLOCK 1
$LO:	BLOCK 1
$MAX:	BLOCK 1
$MIN:	BLOCK 1
$MASK:	BLOCK 1
TMPPTR:	BLOCK 1
COMPTR:	BLOCK 1
FRESTR:	BLOCK 1

FREBEG:	BLOCK 1
FREEND:
SYMBEG:	BLOCK 1
RUNBLK:	;6 WORD RUN BLOCK
SCNDEV:	BLOCK 1
SCNNAM:	BLOCK 1
SCNEXT:	BLOCK 1
	BLOCK 1
SCNPJ:	BLOCK 1
	BLOCK 1
OLDDEV:	BLOCK 1
OLDNAM:	BLOCK 1
OLDEXT:	BLOCK 1
SWTARG:	BLOCK 1
MASK:	BLOCK 1
INFB:	BLOCK 2*BUFSIZ
OTFB:	BLOCK 2*BUFSIZ
OSFB:	BLOCK 2*BUFSIZ
SYMB:	BLOCK 2*BUFSIZ
COMBUF:	BLOCK 200
TGREND:	BLOCK 1
STKST:	BLOCK STKLN	;STACK MUST NOT BE CLEARED.
CCLBUF:	BLOCK BUFSIZ	;CCLBUF MUST NOT BE CLEARED
;LEXEC C, PAGE 4

	DEFINE BL(BB,N1,N2,CH,IN,OU)
<	XWD 400000,BB+1
	SIXBIT /N1/
	SIXBIT /N2/
	BLOCK 4
	10
	SIXBIT /DSK/
IFN IN,<	XWD 0,CH'HDR>
IFN OU,<	XWD CH'HDR,0>
	Z CH,0
	BLOCK 3
	SWTBL>

INFBLK:	BL INFB,BINARY,BIN,INF,1,0
	ASCIZ /BINARY INPUT/

SYMBLK:	BL SYMB,SYMBOL,SYM,SYM,1,0
	ASCIZ /SYMBOL/

OTFBLK:	BL OTFB,0,BIN,OTF,0,1
	ASCIZ /BINARY OUTPUT/

OSFBLK:	BL OSFB,0,SYM,OSF,0,1
	ASCIZ /SYMBOL/

CCLBLK:	XWD 400000,CCLBUF+1
	XWD CCLNAM,0	;DEFAULT FILE NAME.
	SIXBIT /CMD/	;DEFAULT EXTENSION.
	BLOCK 1		;CURRENT NAME.
	SIXBIT /TMP/	;CURRENT EXTENSION.
	BLOCK 2		;REST OF LOOKUP BLOCK.
	1		;OPEN BLOCK: MODE
	SIXBIT /DSK/	;DEVICE
	XWD 0,CCLHDR	;INPUT HEADER
	Z CCL,0		;CHANNEL
	BLOCK 3		;3 WORD HEADER
	SWTBL		;SWITCH TABLE
	ASCIZ /CMD/	;FIELD NAME

IFN ONLINE,<	INTERN XYOLSZ
XYOLSZ:	REPEAT ^D160,<	Z>
XN1:	ASCII /LEXEC/
XE1:	ASCII /ADR/
XN2:	ASCII /ROYAL/
XE2:	ASCII /CHG/
XNCO2:	10
XNPR2:	13
XN3:	0
XE3:	0
XNCO3:	0
XNPR3:	0
XPCT1:	0.5	;SURCHARGE ON CP UNITS
XPCT2:	0	;SURCHARGE ON CONNECT TIME
XMIN:	0	;MINIMUM CHARGE
>
;
IFN TIMLTD,<		;BILLING ROUTINE ARGUMENTS

DSKBUF:: BLOCK 16
ILIST::  BLOCK 2
OLIST::  BLOCK 2
FCTBLK:: BLOCK 2
FCTBUF:: BLOCK 200
FCTEND::

PDL::	 BLOCK 6
SAFE::	 BLOCK 10
>

IFN TYMSHR,<
	EXTERN VALPRI,IPCODE
BRI:	JSA 16,VALPRI	;OUTPUT INITIAL BILLING RECORD
	ARG 0,IBR
	ARG 0,IPCODE
	ARG 5,BFNAME
	POPJ P,
;
BRCP:	JSA 16,VALPRI	;OUTPUT BILLING CHECKPOINT RECORD
	ARG 0,CPBR
	ARG 0,IPCODE
	ARG 5,BFNAME
	POPJ P,
;
BRF:	JSA 16,VALPRI	;PUTPUT FINAL BILLING RECORD
	ARG 0,FBR
	ARG 0,IPCODE
	ARG 5,BFNAME
	POPJ P,
;
IBR:	3		;BILLING RECORD CODES
CPBR:	1
FBR:	4
BFNAME:	ASCII /BILIN/	;NAME OF BILLING FILE
>

	END LEXEC
