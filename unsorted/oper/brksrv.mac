	TITLE	BRKSRV - BCT SERVICE ROUTINES
	HISEG
	SUBTTL	BKSRCH - BCT BINARY SEARCH

;BREAK CONTROL TABLE BINARY SEARCH
;SEARCH IS FOR THE ENTRY IN BRKBLK
;SEARCH IS MADE BY ENTRY NUMBER, FIRST ON THE UNIT AS KEY
;THEN ON FRAME NUMBER AS KEY

;AC'S - BKSRCH ALTERS AC'S 13 - 16


STK=17

BCTPTR=10	;WORD POINTER TO BCT ENTRY OF CURRENT INTEREST
AC1=11	;TEMP AC
SRCHLO=12	;LOWER BOUND OF SEARCH SPACE
SRCHHI=13	;UPPER BOUND OF SEARCH SPACE
BCT=14	;NUMBER OF BCT ENTRY OF CURRENT INTEREST
BRKFRM=15	;FRAME NUMBER OF BREAK BEING SEARCHED FOR
BRKUNT=16	;UNIT (UCB ADDRESS) OF BREAK
;
;EXTERNAL DATA AND SUBROUTINES
;
	EXTERN	BRKPTR,OLDPTR
	EXTERN	BCTBOT,BCTTOP,BCTLIM
	EXTERN	BCTMOV
	EXTERN	SMGR	;TO KEEP P.MQC HAPPY
	INTERN	BRKINS,BRKDEL
	INTERN	BKSRCH
;
	PAGE


BKSRCH:	MOVE	SRCHHI,BCTTOP
	SUB	SRCHHI,BCTBOT	;COMPUTE NUMBER OF ENTRIES IN TABLE
	IDIVI	SRCHHI,ENTSIZ
	CAIN	SRCHHI,2	;IS BCT EMPTY EXCEPT FOR PHONY ENTRIES?
	JRST	,SETPTR		;YES, DON'T WASTE TIME
	SUBI	SRCHHI,1	;ENTRIES NUMBERED FROM 0 TO N-1
	PUSH	STK,10
	PUSH	STK,11		;SAVE VM'S AC'S LIKE A GOOD GUY
	PUSH	STK,12
	MOVEI	SRCHLO,0	;FIRST ENTRY IS ZERO, BUT DON'T ZONK AC12
	SETOM	,OLDPTR		;THIS VALUE SHOULD NEVER BE COMPUTED
	MOVE	BRKFRM,BLO+BRKBLK	;GET THINGS SEARCHED FOR
	HRRZ	BRKUNT,BUCB+BRKBLK
TRYAGN:	MOVE	BCT,SRCHLO	;RECOMPUTE POINTER TO MIDDLE OF SPACE
	ADD	BCT,SRCHHI	;ALGORITHM IS OBVIOUS
	LSH	BCT,-1		;NAMELY, BCT=(SRCHHI+SRCHLO)/2
	MOVE	BCTPTR,BCT	;COMPUTE WORD POINTER FROM ENTRY NUMBER
	IMULI	BCTPTR,ENTSIZ
	ADD	BCTPTR,BCTBOT
	CAMN	BCT,OLDPTR	;COMPARE WITH POINTER COMPUTED LAST TIME
	JRST	,ADJPTR		;IF SAME, DIDN'T FIND DESIRED ENTRY
	MOVEM	BCT,OLDPTR	;SAVE FOR TEST NEXT TIME AROUND
	HRRZ	AC1,BCTUCB(BCTPTR)	;GET UNIT FROM ENTRY
	CAMN	BRKUNT,AC1	;AND COMPARE WITH ONE WANTED
	JRST	,UNITOK		;SAME, GO CHECK FRAME
	CAMG	BRKUNT,AC1	;DKFFERENT, BUT WHICH WAY?
GODOWN:	SKIPA	SRCHHI,OLDPTR	;TOO FAR, REVISE SEARCH SPACE DOWNWARD
GOUP:	MOVE	SRCHLO,OLDPTR	;NOT FAR ENOUGH, REVISE SPACE UPWARD
	JRST	,TRYAGN		;AND TRY AGAIN

UNITOK:	CAMGE	BRKFRM,BCTLO(BCTPTR)	;FRAME WITHIN BREAK REGION?
	JRST	,GODOWN			;NO, HAVE GONE TOO FAR IN TABLE
	CAMLE	BRKFRM,BCTHI(BCTPTR)	;NOW CHECK UPPER BOUND
	JRST	,GOUP		;HAVEN'T GONE FAR ENOUGH IN TABLE
	AOS	,-3(STK)	;GOT IT, SET UP SKIP RETURN
POPACS:	MOVEM	BCTPTR,BRKPTR	;SAVE POINTER BEFORE RESTORING AC'S CLOBBERS IT
	POP	STK,12		;RESTORE VM'S ACS
	POP	STK,11
	POP	STK,10
	POPJ	STK,		;AND RETURN

SETPTR:	MOVE	BCT,BCTBOT	;TABLE EMPTY
	ADDI	BCT,ENTSIZ	;BUMP POINTER PAST 0 ENTRY
	MOVEM	BCT,BRKPTR
	POPJ	STK,

ADJPTR:	HRRZ	AC1,BCTUCB(BCTPTR)	;GET UNIT OF POINTED AT ENTRY
	CAMLE	AC1,BRKUNT	;IS IT NEXT UNIT IN TABLE?
	JRST	,POPACS		;YES, NO POINTER FUDGING NEEDED
	CAMN	AC1,BRKUNT	;IS IT SAME UNIT? IF NOT, MUST FUDGE POINTER
	CAMLE	BRKFRM,BCTHI(BCTPTR)	;ADJUST POINTER TO PROPER PLACE
	ADDI	BCTPTR,ENTSIZ	;FOR INSERTION OR DELETION
	JRST	,POPACS

	PAGE
	SUBTTL	BRKDEL - DELETE AN ENTRY FROM THE BCT

;AC'S

AC2=2	;BEWARE OF CHANGING THESE TWO DEFS
AC3=3	;THEY ARE COMMUNICATION WITH A DIFFERENT MODULE

;AC DEFINITIONS ARE CRITICAL
;BKSRCH WILL DESTROY ACS 13-16
;BCTMOV WILL ALTER ACS 1-5 (2 AND 3 ARE USED FOR ARGUMENTS)
;THUS CRITICAL THINGS IN BRKDEL MUST BE ASSIGNED 6-12

DLO=6		;LOW FRAME OF DELETION RANGE
DHI=7		;HIGH FRAME OF DELETION RANGE
LOWENT=10	;POINTER TO ENTRY TO BE OVERWRITTEN IN DELETION
B=11		;POINTER TO ENTRY OF CURRENT INTEREST

;THESE AC'S MAY BE MODIFIED BY BKSRCH, AS THEY WILL EITHER
;NOT BE USED AAGAIN AFTER A CALL OR WILL BE RESET ANYWAY

PLO=12
PHI=13
PBRK=14
PACT=15
PCNT=16

	PAGE




;A SUBROUTINE

SETUP:	MOVE	PLO,BCTLO(B)
	MOVE	PHI,BCTHI(B)
	MOVE	PBRK,BCTBRK(B)
	MOVE	PACT,BCTACT(B)
	MOVE	PCNT,BCTCNT(B)
	POPJ	STK,

BRKDEL:	MOVE	DLO,BLO+BRKBLK
	MOVE	DHI,BHI+BRKBLK	;GET RANGE TO BE DELETED
	PUSHJ	STK,BKSRCH	;SEARCH FOR DLO
	JRST	,BDEL1		;NOT FOUND
	MOVE	B,BRKPTR	;GET POINTER TO ENTRY FOUND IN
	PUSHJ	STK,SETUP	;GET ENTRY'S PARAMETERS
	CAMN	DLO,PLO		;DLO=PLO?
	JRST	,BDEL2		;YES, MIGHT DELETE WHOLE ENTRY
	SUBI	DLO,1		;NO, MIGHT HAVE TO SPLIT ENTRY
	MOVEM	DLO,BCTHI(B)	;1ST PART WILL BE FROM PLO TO DLO-1
	ADDI	DLO,1		;RESTORE DLO
	CAMGE	DHI,PHI		;DHI>=PHI?
	JRST	,BDEL3		;NO, ENTRY MUST BE SPLIT
	ADDI	B,ENTSIZ	;BUMP POINTER TO NEXT ENTRY
	CAMN	DHI,PHI		;DHI=PHI?
	JRST	,BDEL9		;YES, NO 2ND PART, SET POINTER AND LEAVE
BDEL6:	MOVEM	B,LOWENT	;SAVE POINTER TO ENTRY TO BE OVERWRITTEN
	MOVEM	DHI,BLO+BRKBLK	;NOW SEARCH FOR DHI
	PUSHJ	STK,BKSRCH
	JRST	,BDEL4		;NOT IN AN ENTRY, NO FIXING TO DO
	MOVE	B,BRKPTR	;GET POINTER TO ENTRY
	PUSHJ	STK,SETUP	;GET IT'S PARAMETERS
	CAMN	DHI,PHI		;DHI=PHI?
	JRST	,BDEL5		;YES, DELETE WHOLE ENTRY, FUDGE POINTER ACCORDINGLY
	ADDI	DHI,1		;NO, FIX RANGE TO REFLECT DELETION
	MOVEM	DHI,BCTLO(B)
	SOJA	DHI,BDEL4	;RESTORE DHI AND GO DO DELETIONS

	PAGE
BDEL5:	ADDI	B,ENTSIZ	;SKIP OVER ENTRY TO BE DELETED
BDEL4:	CAMN	B,LOWENT	;CHECK THAT THERE'S REALLY SOMETHING TO DELETE
	JRST	,BDEL9		;THERE ISN'T, SAVE POINTER AND LEAVE
	HRL	AC2,B		;B POINTS AT ENTRY TO BE MOVED
	HRR	AC2,LOWENT	;INTO LOWENT'S PLACE
	MOVEM	LOWENT,BRKPTR	;SAVE POINTER TO WHERE DELETION OCCURRED
	SUB	LOWENT,B	;UPDATE BCTTOP
	ADDB	LOWENT,BCTTOP	;LOWENT,BCTTOP_BCTTOP-(B-LOWENT)
	SUBI	LOWENT,1	;LOWENT_BCTTOP-1, I.E.,
	BLT	AC2,0(LOWENT)	;LAST WORD OF COLLAPSED BCT
	JRST	,BDEL8		;ALL DONE, RESTORE BRKBLK AND RETURN

BDEL1:	MOVE	B,BRKPTR	;GET POINTER TO ENTRY
	PUSHJ	STK,SETUP	;GET ENTRY'S PARAMETERS
	HRRZ	AC2,BUCB+BRKBLK	;GET UNIT OF DELETION
	CAIN	AC2,(PBRK)	;IF NOT SAME AS POINTEDAT, RETURN
BDEL2:	CAMGE	DHI,PLO		;IS DHI IN SAME GAP AS DLO?
	POPJ	STK,		;YES, NOTHING TO DO
	CAMGE	DHI,PHI		;DHI<PHI? (I.E., WITHIN SAME ENTRY AS DLO?)
	JRST	,BDEL7		;YES, JUST FIX RANGE OF ENTRY
	CAME	DHI,PHI		;NO, DHI=PHI?
	JRST	,BDEL6		;NO, MUST FIND DHI
	MOVEM	B,LOWENT	;YES, JUST DELETE THIS ENTRY
	JRST	,BDEL5		;ENTRY AFTER IT OVERWRITES IT

BDEL3:	MOVEI	AC2,ENTSIZ	;ENTRY MUST BE SPLIT, OPEN A HOLE
	MOVEI	AC3,ENTSIZ(B)	;FOR ONE ENTRY AFTER IT
	PUSHJ	STK,BCTMOV
	ADDI	B,ENTSIZ	;UPDATE POINTER TO HOLE
	MOVEM	PHI,BCTHI(B)	;COPY ENTRY INTO HOLE
	MOVEM	PBRK,BCTBRK(B)
	MOVEM	PACT,BCTACT(B)
	MOVEM	PCNT,BCTCNT(B)
BDEL7:	ADDI	DHI,1		;ENTRY IS FROM DHI+1
	MOVEM	DHI,BCTLO(B)	;NO NEED TO RESTORE DHI
BDEL9:	MOVEM	B,BRKPTR	;SAVE POINTER TO WHERE DELETION OCCURRED
BDEL8:	MOVEM	DLO,BLO+BRKBLK	;RESTORE BRKBLK
	POPJ	STK,		;AND RETURN

	PAGE

	SUBTTL	BRKINS - BREAK INSERTION

LOWER=1

BRKINS:	PUSHJ	STK,BRKDEL	;DELETE THE INSERTION
	MOVE	B,BRKPTR	;GET POINTER TO WHERE IT GOES
	SUBI	B,ENTSIZ	;SET POINTER TO LOWER ENTRY
	PUSHJ	STK,SETUP	;GET PARAMETERS OF LOWER ENTRY
	ADDI	PHI,1
	CAME	PHI,BLO+BRKBLK	;DOES LOWER ENTRY'S RANGE ABUT INSERTION'S?
	JRST	,BINS2		;NO, CAN'T MERGE
	PUSHJ	STK,SAMBRK	;ARE ENTRY PARAMETERS THE SAME?
	JRST	,BINS2		;NO, CAN'T MERGE
	MOVEM	B,LOWER	;YES, SAVE POINTER
	ADDI	B,ENTSIZ	;RESTORE POINTER  (TO WHAT MIGHT BE UPPER ENTRY)
	PUSHJ	STK,SETUP	;GET ENTRY'S PARAMETERS
	SUBI	PLO,1
	CAME	PLO,BHI+BRKBLK	;DOES UPPER ENTRY'S RANGE ABUT INSERTION'S?
	JRST	,BINS3		;NO, CAN ONLY MERGE TO LOWER
	PUSHJ	STK,SAMBRK	;ARE ENTRY PARAMETERS THE SAME?
	JRST	,BINS3		;NO, CAN ONLY MERGE TO LOWER
	MOVEM	PHI,BCTHI(LOWER)	;YES MERGE LOWER AND UPPER
	MOVEM	B,LOWENT	;AND DELETE THE UPPER ENTRY
	JRST	,BDEL5

	PAGE
BINS2:	ADDI	B,ENTSIZ	;RESTORE POINTER TO WHAT MIGHT BE UPPER ENTRY
	PUSHJ	STK,SETUP	;GET ENTRY'S PARAMETERS
	SUBI	PLO,1
	CAME	PLO,BHI+BRKBLK	;DOES UPPER ENTRY'S RANGE ABUT INSERTION'S?
	JRST	,BINS4		;NO, MUST INSERT
	PUSHJ	STK,SAMBRK	;ARE ENTRY PARAMETERS THE SAME?
	JRST	,BINS4		;NO, MUST INSERT
	MOVE	AC2,BLO+BRKBLK	;YES, CAN MERGE WITH UPPER
	MOVEM	AC2,BCTLO(B)	;BY EXPANDING ITS RANGE DOWNWARD
	POPJ	STK,		;ALL DONE. RETURN

BINS3:	MOVE	AC1,BHI+BRKBLK	;MERGE WITH LOWER ENTRY
	MOVEM	AC1,BCTHI(LOWER)	;BY EXPANDING ITS RANGE UPWARD
	POPJ	STK,		;AND RETURN

BINS4:	MOVEI	AC2,ENTSIZ	;MUST INSERT. OPEN 1 HOLE
	MOVE	AC3,B		;WHERE POINTER SAYS
	PUSHJ	STK,BCTMOV
	MOVE	AC2,BLO+BRKBLK	;COPY BRKBLK INTO BCT
	MOVEM	AC2,BCTLO(B)
	MOVE	AC2,BHI+BRKBLK
	MOVEM	AC2,BCTHI(B)
	MOVE	AC2,BBRK+BRKBLK
	MOVEM	AC2,BCTBRK(B)
	MOVE	AC2,BACT+BRKBLK
	MOVEM	AC2,BCTACT(B)
	MOVE	AC2,BCNT+BRKBLK
	MOVEM	AC2,BCTCNT(B)
	POPJ	STK,		;AND RETURN

SAMBRK:	CAMN	PBRK,BBRK+BRKBLK	;ARE UNIT AND BREAKS SAME?
	CAME	PACT,BACT+BRKBLK	;YES, ARE ACTIONS ALSO THE SAME?
	POPJ	STK,		;NO, TAKE NONSKIP RETURN
	JUMPN	PCNT,NOTSAM	;IS PROJECTED COUNT ZERO?
	CAMN	PCNT,BCNT+BRKBLK	;YES, HOW ABOUT COUNTS?
	AOS	,0(STK)		;YES, SETUP SKIP RETURN
NOTSAM:	POPJ	STK,

	PAGE

	END
